@using Mercurius.Infrastructure
@helper CreateTree(IEnumerable<TreeNode> nodes, string containerId = "treeContainer", string emptyMessage = "无")
{
    if (nodes.IsEmpty())
    {
        <ul id="@containerId" class="filetree">
            <li>
                <span class="file empty-data"></span> @emptyMessage
            </li>
        </ul>
    }
    <ul id="@containerId" class="filetree">
        @{
            foreach (var parent in nodes)
            {
                <li>
                    <span class="folder">&nbsp;</span><i data="@parent.Id">@parent.Text</i>
                    @CreateTreeNode(parent.Children)
                </li>
            }
        }
    </ul>
}

@helper CreateTreeNode(IEnumerable<TreeNode> children)
{
    if (children.IsEmpty())
    {
        return;
    }
    <ul>
        @foreach (var child in children)
        {
            <li>
                <span class="file">&nbsp;</span><i data="@child.Id">@child.Text</i>
                @CreateTreeNode(child.Children)
            </li>
        }
    </ul>
}

@helper CreateComboTree(IEnumerable<TreeNode> nodes, string name, string selectedValue, string defaultValue = null, bool hasRoot = true)
{
    if (hasRoot)
    {
        nodes = new[] { new TreeNode { Id = "0", Text = "根", Children = nodes } };
    }
    <input id="@name" type="hidden" name="@name" value="@selectedValue" />
    <div class="input-group">
        <input id="@string.Format("{0}Text", name)" type="text" value="" class="form-control" validate-field="所属部门" validate-rule="notNull" readonly="readonly" style="cursor: pointer;background-color:#fff;" />
        <span class="input-group-btn">
            <button id="@string.Format("btn{0}", name)" class="btn btn-sm btn-default">
                <i class="glyphicon glyphicon-chevron-down"></i>
            </button>
        </span>
    </div>
    <div id="@string.Format("{0}Container", name)" style="display: none; position: absolute; min-height: 120px; overflow-y: auto; background: #fff; border: 1px solid #ccc; z-index: 111;">
        @CreateTree(nodes, "tree" + name)
    </div>

    <script type="text/javascript">
        var treeInitalized = false;

        $(document).ready(function () {
            if ('@selectedValue' == '') {
                $('#@string.Format("{0}Text", name)').val('根');
            } else {
                $('#@string.Format("{0}Text", name)').val($('#@string.Format("tree{0}", name) li > i[data=@selectedValue]').text());
            }

            $('#@string.Format("tree{0}", name) li').click(function () {
                return false;
            });

            $('#@string.Format("tree{0}", name) li > i').click(function () {
                var id = $(this).attr('data');

                if (id == '@defaultValue') {
                    mercurius.ShowWarningMessage('不能选择自己作为自己的上级！');
                } else {
                    $('#@name').val(id);
                    $('#@string.Format("{0}Text", name)').val($(this).text());

                    $('#@string.Format("{0}Container", name)').hide();
                }

                return false;
            });

            $('#@string.Format("{0}Text",name), #@string.Format("btn{0}", name)').click(function () {
                var input = $('#@string.Format("{0}Text", name)');
                var container = $('#@string.Format("{0}Container", name)');

                if (container.is(':visible')) {
                    container.hide();
                    input.removeClass('tree-active');
                } else {
                    var offset = $(this).offset();
                    input.addClass('tree-active');
                    container.css('width', container.prev().width()).css('left', 5).css('top', 30).show();

                    if (!treeInitalized) {
                        $('#@string.Format("tree{0}", name)').treeview({
                            collapsed: false,
                            unique: false
                        });

                        container.height($(document).height() - offset.top - 36);

                        treeInitalized = true;
                    }
                }

                return false;
            });

            $(document).click(function () {
                $('#@string.Format("{0}Container", name)').hide();
                $('#@string.Format("{0}Text", name)').removeClass('tree-active');

                return false;
            });
        });
    </script>
}