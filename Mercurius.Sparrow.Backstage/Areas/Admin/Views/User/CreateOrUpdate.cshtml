@using Mercurius.Sparrow.Backstage.Areas.Admin.Models.User

@model CreateOrUpdateVM

@{
    var roles = this.ViewBag.Roles as ResponseCollection<Role>;
    var departments = this.ViewBag.Departments as ResponseCollection<Organization>;
}

@section Styles{
    @Styles.Render("~/Content/tree/css")
    <style type="text/css">
        .tab-pane {
            padding-top: 5px;
        }

        .treeview label {
            cursor: pointer;
            font-weight: normal;
        }
    </style>
}

@section Scripts
{
    @Scripts.Render("~/bundles/tree", "~/bundles/validate")
    <script type="text/javascript">
        $(document).ready(function () {
            $('a[data-toggle="tab"]').one('shown.bs.tab', function (e) {
                if (e.target.text == '所属部门') {
                    $('#departmentContainer').treeview({
                        persist: "location",
                        collapsed: false,
                        unique: false
                    });
                }

                if (e.target.text == '所属角色') {
                    $('#roleContainer').treeview({
                        persist: "location",
                        collapsed: false,
                        unique: true
                    });
                }
            });

            $('#reporterName').click(function () {
                mercurius.OpenDialog('@Url.Action("ChooseUser", "User",new { ExcludeReporter = (Model ==null || Model.User==null) ? "" : Model.User.Id })', 'ChooseUser', '选择用户', 720, 500, { statusbar: false, x: 'right', y: 'bottom' });
            });
        });

        //获取表单值
        function OnSave() {
            var checkedOrgCount = $('#table2 label > :checkbox:checked').length;

            if (checkedOrgCount == 0) {
                mercurius.ShowWarningMessage("点击面板所属部门，选择部门！");
            } else if (JudgeValidate('#frmSave')) {
               $('#frmSave').submit();
            }
        }

        function SetUser(reporterId, reporterName) {
            $('#reporterId').val(reporterId);
            $('#reporterName').val(reporterName);
        }
    </script>
}
@using (Ajax.BeginForm("CreateOrUpdate", "User", null, new AjaxOptions { HttpMethod = "POST" }, new { @id = "frmSave", @class = "form-horizontal form", @role = "form" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.User.Id)
    @Html.Hidden("RealPassword", this.ViewData["RealPassword"])
    <ul class="nav nav-tabs" role="tablist">
        <li class="active"><a href="#table1" role="tab" data-toggle="tab">基本信息</a></li>
        <li><a href="#table2" role="tab" data-toggle="tab">所属部门</a></li>
        <li><a href="#table3" role="tab" data-toggle="tab">所属角色</a></li>
    </ul>
    <div class="tab-content" style="height: 330px;">
        @*基本信息*@
        <div id="table1" class="tab-pane active">
            <div class="form-group form-group-sm">
                <label class="col-sm-2 control-label" for="User_Code">工号</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(m => m.User.Code, new { @class = "form-control", @validate_field = "工号", @validate_rule = "notNull" })
                </div>
                <label class="col-sm-2 control-label" for="User_Name">姓名</label>
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.User.Name, new { @class = "form-control", @validate_field = "姓名", @validate_rule = "notNull" })
                </div>
            </div>
            <div class="form-group form-group-sm">
                <label class="col-sm-2 control-label" for="User_Account">账号</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(m => m.User.Account, new { @class = "form-control", @validate_field = "账号", @validate_rule = "notNull" })
                </div>
                <label class="col-sm-2 control-label" for="User_Password">密码</label>
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.User.Password, new { @class = "form-control", @validate_field = "密码", @validate_rule = "notNull" })
                </div>
            </div>
            <div class="form-group form-group-sm">
                <label class="col-sm-2 control-label" for="User_Sex">性别</label>
                <div class="col-sm-3">
                    @Html.DropDownListFor(m => m.User.Sex,
                    new SelectListItem[]
                    {
                        new SelectListItem { Text="1 - 男", Value="1", Selected= (Model!=null && Model.User!=null && Model.User.Sex == 1) },
                        new SelectListItem { Text="0 - 女", Value="0", Selected=(Model!=null && Model.User!=null&& Model.User.Sex == 0) }
                    },
                    new
                    {
                        @class = "form-control"
                    })
                </div>
                <label class="col-sm-2 control-label" for="User_Email">电子邮件</label>
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.User.Email, new { @class = "form-control", @validate_field = "电子邮箱", @validate_rule = "emailOrNull" })
                </div>
            </div>
            <div class="form-group form-group-sm">
                <label class="col-sm-2 control-label" for="User_Title">职称</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(m => m.User.Title, new { @class = "form-control" })
                </div>
                <label class="col-sm-2 control-label" for="reporterName">报告人</label>
                <div class="col-sm-4">
                    @Html.HiddenFor(m => m.User.Reporter, new { @id = "reporterId" })
                    @Html.TextBoxFor(m => m.User.ReporterName, new { @id = "reporterName", @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
            <div class="form-group form-group-sm">
                <label class="col-sm-2 control-label" for="User_Remark">备注描述</label>
                <div class="col-sm-9">
                    @Html.TextAreaFor(m => m.User.Remark, new { @class = "form-control", @style = "height: 90px;" })
                </div>
            </div>
            <div class="form-group form-group-sm">
                <label class="col-sm-2 control-label" for="User_CreateUserName">创建用户</label>
                <div class="col-sm-3">
                    <input id="CreateUserName" value="@WebHelper.GetLogOnAccount()" class="form-control" disabled />
                </div>
                <label class="col-sm-2 control-label" for="User_CreateDateTime">创建时间</label>
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.User.CreateDateTime, new { @class = "form-control", @disabled = "disabled" })
                </div>
            </div>
            <div class="form-group form-group-sm">
                <label class="col-sm-2 control-label" for="User_ModifyUserName">修改用户</label>
                <div class="col-sm-3">
                    @Html.TextBoxFor(m => m.User.ModifyUserName, new { @class = "form-control", @disabled = "disabled" })
                </div>
                <label class="col-sm-2 control-label">修改时间</label>
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.User.ModifyDateTime, new { @class = "form-control", @disabled = "disabled" })
                </div>
            </div>
        </div>
        @*所属部门*@
        <div id="table2" class="tab-pane">
            <div class="header">组织机构</div>
            <div style="height: 300px; overflow-y: auto;">
                <ul id="departmentContainer" class="filetree">
                    @{
                        var departmentParents = departments.Datas.Where(o => o.ParentId == "0");

                        foreach (var parent in departmentParents)
                        {
                            <li>
                                <span class="folder"></span>
                                <label>
                                    <input name="CheckValues" type="checkbox" @IsChecked((Model != null && Model.User != null) ? Model.User.Departments : null, parent.Id) value="@parent.Id|所属部门" />
                                    @parent.Name
                                </label>
                                @CreateDepartmentTreeNode(departments.Datas, parent.Id)
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
        @*所属角色*@
        <div id="table3" class="tab-pane">
            <div class="header">所属角色</div>
            <div style="height: 300px; overflow-y: auto;">
                <ul id="roleContainer" class="filetree">
                    @{
                        var roleParents = roles.Datas.Where(r => r.ParentId == "0");

                        foreach (var roleParent in roleParents)
                        {
                            <li>
                                <span class="folder"></span>
                                <label>
                                    <input name="CheckValues" type="checkbox" @IsChecked((Model != null && Model.User != null) ? Model.User.Roles : null, roleParent.Id) value="@roleParent.Id|所属角色" />
                                    @roleParent.Name
                                </label>
                                @CreateRoleTreeNode(roles.Datas, roleParent.Id)
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
}

@helper CreateDepartmentTreeNode(IList<Organization> datas, string parentId)
{
    var children = datas.Where(d => d.ParentId == parentId);

    if (children.Any())
    {
        <ul>
            @foreach (var child in children)
            {
                <li>
                    <span class="file"></span>
                    <label>
                        <input name="CheckValues" type="checkbox" @IsChecked((Model != null && Model.User != null) ? Model.User.Departments : null, child.Id) value="@child.Id|所属部门" />
                        @child.Name
                    </label>

                    @CreateDepartmentTreeNode(datas, child.Id)
                </li>
            }
        </ul>
    }
}
@helper CreateRoleTreeNode(IList<Role> roles, string parentId)
{
    var children = roles.Where(d => d.ParentId == parentId);

    if (children.Any())
    {
        <ul>
            @foreach (var child in children)
            {
                <li>
                    <span class="file"></span>
                    <label>
                        <input name="CheckValues" type="checkbox" @IsChecked((Model != null && Model.User != null) ? Model.User.Roles : null, child.Id) value="@child.Id|所属角色" />
                        @child.Name
                    </label>
                    @CreateRoleTreeNode(roles, child.Id)
                </li>
            }
        </ul>
    }
}
@helper IsChecked(IList<string> sources, string id)
{
    if (!sources.IsEmpty() && sources.Contains(id))
    {
        <text>checked="checked"</text>
    }
}