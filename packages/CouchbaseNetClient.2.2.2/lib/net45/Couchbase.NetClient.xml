<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Couchbase.NetClient</name>
    </assembly>
    <members>
        <member name="T:Couchbase.Authentication.AuthType">
            <summary>
            The type of authentication to use with a given bucket.
            </summary>
        </member>
        <member name="F:Couchbase.Authentication.AuthType.None">
            <summary>
            Use no authentication.
            </summary>
        </member>
        <member name="F:Couchbase.Authentication.AuthType.Sasl">
            <summary>
            Use Simple Authentication and Security Layer (SASL) authentication.
            </summary>
        </member>
        <member name="T:Couchbase.Authentication.SASL.CramMd5Mechanism">
            <summary>
            Provides support for SASL CRAM-MD5 for password encryption between the client and server.
            </summary>
        </member>
        <member name="T:Couchbase.Authentication.SASL.ISaslMechanism">
            <summary>
            Provides and interface for implementating a SASL authentication mechanism (CRAM MD5 or PLAIN).
            </summary>
        </member>
        <member name="M:Couchbase.Authentication.SASL.ISaslMechanism.Authenticate(Couchbase.IO.IConnection,System.String,System.String)">
            <summary>
            Authenticates a username and password using a specific <see cref="T:Couchbase.IO.IConnection"/> instance.
            </summary>
            <param name="connection">An implementation of <see cref="T:Couchbase.IO.IConnection"/> which represents a TCP connection to a Couchbase Server.</param>
            <param name="username">The username or bucket name to authentic against.</param>
            <param name="password">The password to authenticate against.</param>
            <returns>True if succesful.</returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.ISaslMechanism.Authenticate(Couchbase.IO.IConnection)">
            <summary>
            Authenticates a username and password.
            </summary>
            <param name="connection">An implementation of <see cref="T:Couchbase.IO.IConnection"/> which represents a TCP connection to a Couchbase Server.</param>
            <returns>True if succesful.</returns>
        </member>
        <member name="P:Couchbase.Authentication.SASL.ISaslMechanism.Username">
            <summary>
            The username or Bucket name.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.ISaslMechanism.Password">
            <summary>
            The password to authenticate against.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.ISaslMechanism.MechanismType">
            <summary>
            The type of SASL mechanism to use: PLAIN or CRAM MD5.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.ISaslMechanism.IOStrategy">
            <summary>
            The I/O strategy to use <see cref="P:Couchbase.Authentication.SASL.ISaslMechanism.IOStrategy"/>
            </summary>
        </member>
        <member name="M:Couchbase.Authentication.SASL.CramMd5Mechanism.#ctor(Couchbase.IO.IOStrategy,Couchbase.Core.Transcoders.ITypeTranscoder)">
            <summary>
            Creates a <see cref="T:Couchbase.Authentication.SASL.CramMd5Mechanism"/> object using a given <see cref="P:Couchbase.Authentication.SASL.CramMd5Mechanism.IOStrategy"/>.
            </summary>
            <param name="ioStrategy">The I/O strategy to use.</param>
            <param name="transcoder"></param>
        </member>
        <member name="M:Couchbase.Authentication.SASL.CramMd5Mechanism.#ctor(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Couchbase.Authentication.SASL.CramMd5Mechanism"/> object using a given username (which is a Couchbase Bucket) and password.
            </summary>
            <param name="username">The name of the Bucket you are connecting to.</param>
            <param name="password">The password for the Bucket.</param>
        </member>
        <member name="M:Couchbase.Authentication.SASL.CramMd5Mechanism.#ctor(Couchbase.IO.IOStrategy,System.String,System.String,Couchbase.Core.Transcoders.ITypeTranscoder)">
            <summary>
            Creates a <see cref="T:Couchbase.Authentication.SASL.CramMd5Mechanism"/> object using a given username (which is a Couchbase Bucket) and password.
            </summary>
            <param name="ioStrategy">The <see cref="P:Couchbase.Authentication.SASL.CramMd5Mechanism.IOStrategy"/>to use for I/O.</param>
            <param name="username">The name of the Bucket you are connecting to.</param>
            <param name="password">The password for the Bucket.</param>
            <param name="transcoder"></param>
        </member>
        <member name="M:Couchbase.Authentication.SASL.CramMd5Mechanism.Authenticate(Couchbase.IO.IConnection,System.String,System.String)">
            <summary>
            Authenticates a username and password using a specific <see cref="T:Couchbase.IO.IConnection"/> instance. The password will
            be encrypted before being sent to the server.
            </summary>
            <param name="connection">An implementation of <see cref="T:Couchbase.IO.IConnection"/> which represents a TCP connection to a Couchbase Server.</param>
            <param name="username">The username or bucket name to authentic against.</param>
            <param name="password">The password to authenticate against.</param>
            <returns>True if succesful.</returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.CramMd5Mechanism.ComputeResponse(System.String)">
            <summary>
            Computes the reply or response to send back to the server that is hashed with the server's challenge.
            </summary>
            <param name="challenge">The key to hash the password against.</param>
            <returns>A reply to send back to the server.</returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.CramMd5Mechanism.Authenticate(Couchbase.IO.IConnection)">
            <summary>
            Authenticates a username and password.
            </summary>
            <param name="connection">An implementation of <see cref="T:Couchbase.IO.IConnection"/> which represents a TCP connection to a Couchbase Server.</param>
            <returns>True if succesful.</returns>
        </member>
        <member name="P:Couchbase.Authentication.SASL.CramMd5Mechanism.Username">
            <summary>
            The username or Bucket name.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.CramMd5Mechanism.Password">
            <summary>
            The password to authenticate against.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.CramMd5Mechanism.MechanismType">
            <summary>
            The type of SASL mechanism to use: will always be CRAM-MD5.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.CramMd5Mechanism.IOStrategy">
            <summary>
            The <see cref="P:Couchbase.Authentication.SASL.CramMd5Mechanism.IOStrategy"/> to use for I/O connectivity with the Couchbase cluster or server.
            </summary>
        </member>
        <member name="T:Couchbase.Authentication.SASL.PlainTextMechanism">
            <summary>
            A PLAIN text implementation of <see cref="T:Couchbase.Authentication.SASL.ISaslMechanism"/> for authenticating connections to Couchbase Buckets. 
            </summary>
        </member>
        <member name="M:Couchbase.Authentication.SASL.PlainTextMechanism.Authenticate(Couchbase.IO.IConnection)">
            <summary>
            Authenticates a username and password.
            </summary>
            <param name="connection">An implementation of <see cref="T:Couchbase.IO.IConnection"/> which represents a TCP connection to a Couchbase Server.</param>
            <returns>True if succesful.</returns>
        </member>
        <member name="M:Couchbase.Authentication.SASL.PlainTextMechanism.Authenticate(Couchbase.IO.IConnection,System.String,System.String)">
            <summary>
            Authenticates a username and password using a specific <see cref="T:Couchbase.IO.IConnection"/> instance.
            </summary>
            <param name="connection">An implementation of <see cref="T:Couchbase.IO.IConnection"/> which represents a TCP connection to a Couchbase Server.</param>
            <param name="username">The username or bucket name to authentic against.</param>
            <param name="password">The password to authenticate against.</param>
            <returns>True if succesful.</returns>
        </member>
        <member name="P:Couchbase.Authentication.SASL.PlainTextMechanism.IOStrategy">
            <summary>
            The I/O strategy to use <see cref="P:Couchbase.Authentication.SASL.PlainTextMechanism.IOStrategy"/>
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.PlainTextMechanism.Username">
            <summary>
            The username or Bucket name.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.PlainTextMechanism.Password">
            <summary>
            The password to authenticate against.
            </summary>
        </member>
        <member name="P:Couchbase.Authentication.SASL.PlainTextMechanism.MechanismType">
            <summary>
            The type of SASL mechanism to use: will always be PLAIN.
            </summary>
        </member>
        <member name="T:Couchbase.Authentication.SASL.SaslFactory">
            <summary>
            Creates an ISaslMechanism to use for authenticating Couchbase Clients.
            </summary>
        </member>
        <member name="F:Couchbase.Authentication.SASL.SaslFactory.DefaultTimeout">
            <summary>
            The default timeout for SASL-related operations.
            </summary>
        </member>
        <member name="T:Couchbase.Authentication.SASL.SaslMechanismType">
            <summary>
            The SASL mechanism type.
            </summary>
        </member>
        <member name="F:Couchbase.Authentication.SASL.SaslMechanismType.Plain">
            <summary>
            The username and password will be sent using human-readable plain text.
            </summary>
        </member>
        <member name="F:Couchbase.Authentication.SASL.SaslMechanismType.CramMd5">
            <summary>
            The username and password will be sent encrypted and will not be human-readable on the wire.
            </summary>
        </member>
        <member name="T:Couchbase.ClusterHelper">
            <summary>
            A helper object for working with a <see cref="T:Couchbase.Cluster"/> instance.
            </summary>
            <remarks>Creates a singleton instance of a <see cref="T:Couchbase.Cluster"/> object.</remarks>
            <remarks>Call <see cref="M:Couchbase.ClusterHelper.Initialize"/> before calling <see cref="M:Couchbase.ClusterHelper.Get"/> to get the instance.</remarks>
        </member>
        <member name="M:Couchbase.ClusterHelper.#ctor">
            <summary>
            Ctor for creating Cluster instance.
            </summary>
            <remarks>
            This is the default configuration and will attempt to bootstrap off of localhost.
            </remarks>
        </member>
        <member name="M:Couchbase.ClusterHelper.#ctor(Couchbase.Configuration.Client.ClientConfiguration)">
            <summary>
            Ctor for creating Cluster instance.
            </summary>
            <param name="configuration">The ClientCOnfiguration to use for initialization.</param>
        </member>
        <member name="M:Couchbase.ClusterHelper.#ctor(Couchbase.Configuration.Client.ClientConfiguration,Couchbase.Core.IClusterController)">
            <summary>
            Ctor for creating Cluster instance.
            </summary>
            <param name="configuration">The ClientCOnfiguration to use for initialization.</param>
            <param name="clusterManager">The ClusterManager instance use.</param>
            <remarks>
            This overload is primarly added for testing.
            </remarks>
        </member>
        <member name="M:Couchbase.ClusterHelper.Get">
            <summary>
            Returns a Singleton instance of the Cluster class.
            </summary>
            <remarks>
            Call one of the Initialize() overloads to create or recreate the Singleton instance.
            However, Initialize() should only be called when the process starts up.
            </remarks>
            <returns>A Singleton instance of the Cluster class.</returns>
            <exception cref="T:Couchbase.Core.InitializationException">Thrown if Initialize is not called before accessing this method.</exception>
        </member>
        <member name="M:Couchbase.ClusterHelper.GetBucket(System.String)">
            <summary>
            Opens or gets an <see cref="T:Couchbase.Core.IBucket"/> instance from the <see cref="T:Couchbase.Core.ICluster"/> that this <see cref="T:Couchbase.ClusterHelper"/> is wrapping.
            The <see cref="T:Couchbase.Core.IBucket"/> will be cached and subsquent requests for a <see cref="T:Couchbase.Core.IBucket"/> of the same name will return the
            cached instance.
            </summary>
            <param name="bucketName">The name of the <see cref="T:Couchbase.Core.IBucket"/> to open or get.</param>
            <returns>An <see cref="T:Couchbase.Core.IBucket"/>instance</returns>
            <remarks>Before calling you must call <see cref="M:Couchbase.ClusterHelper.Initialize"/>.</remarks>
        </member>
        <member name="M:Couchbase.ClusterHelper.GetBucket(System.String,System.String)">
            <summary>
            Opens or gets <see cref="T:Couchbase.Core.IBucket"/> instance from the <see cref="T:Couchbase.Core.ICluster"/> that this <see cref="T:Couchbase.ClusterHelper"/> is wrapping.
            The <see cref="T:Couchbase.Core.IBucket"/> will be cached and subsquent requests for a <see cref="T:Couchbase.Core.IBucket"/> of the same name will return the
            cached instance.
            </summary>
            <param name="bucketName">The name of the <see cref="T:Couchbase.Core.IBucket"/> to open or get.</param>
            <param name="password">The password if required by the bucket instance.</param>
            <returns>An <see cref="T:Couchbase.Core.IBucket"/>instance</returns>
        </member>
        <member name="M:Couchbase.ClusterHelper.Initialize(System.Func{Couchbase.Cluster})">
            <summary>
            Initializes the Cluster instance using a given factory Func.
            </summary>
            <remarks>
            Call this on the Cluster object before calling Get() to return an instance. Note that
            this method should only be called during application or process startup or in certain
            scenarios where you explicitly want to reinitialize the current cluster instance.
            </remarks>
            <param name="factory">The factory Func that creates the instance.</param>
        </member>
        <member name="M:Couchbase.ClusterHelper.Initialize(Couchbase.Configuration.Client.ClientConfiguration,Couchbase.Core.IClusterController)">
            <summary>
            Initializes a new Cluster instance with a given ClientConfiguration and ClusterManager.
            This overload is primarily provided for testing given that it allows you to set the
            major dependencies of the Cluster class and it's scope is internal.
            </summary>
            <param name="configuration"></param>
            <param name="clusterManager"></param>
        </member>
        <member name="M:Couchbase.ClusterHelper.Initialize(Couchbase.Configuration.Client.ClientConfiguration)">
            <summary>
            Creates a Cluster instance.
            </summary>
            <param name="configuration">
            The ClientConfiguration to use when initialize the internal ClusterManager
            </param>
            <remarks>
            This is an heavy-weight object intended to be long-lived. Create one per process or App.Domain.
            </remarks>
        </member>
        <member name="M:Couchbase.ClusterHelper.Initialize">
            <summary>
            Creates a Cluster instance using the default configuration. This is overload is suitable
            for development only as it will use localhost (127.0.0.1) and the default Couchbase REST
            and Memcached ports.
            <see cref="!:http://docs.couchbase.com/couchbase-manual-2.5/cb-install/#network-ports"/>
            </summary>
        </member>
        <member name="M:Couchbase.ClusterHelper.Initialize(System.String)">
            <summary>
            Ctor for creating Cluster instance.
            </summary>
            <param name="configurationSectionName">The name of the configuration section to use.</param>
            <remarks>Note that <see cref="T:Couchbase.Configuration.Client.Providers.CouchbaseClientSection"/> needs include the sectionGroup name as well: "couchbaseSection/couchbase" </remarks>
        </member>
        <member name="M:Couchbase.ClusterHelper.Count">
            <summary>
            Returns the number of <see cref="T:Couchbase.Core.IBucket"/> instances internally cached by the <see cref="T:Couchbase.ClusterHelper"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.ClusterHelper.Close">
            <summary>
            Disposes the current <see cref="T:Couchbase.Cluster"/> instance and cleans up resources.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Client.Providers.BucketElement">
            <summary>
            Allows a Couchbase Server's Bucket to be configured.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.BucketElement.UseEnhancedDurability">
            <summary>
            Gets or sets a value indicating whether to use enhanced durability if the
            Couchbase server version supports it; if it's not supported the client will use
            Observe for Endure operations.
            </summary>
            <value>
            <c>true</c> to use enhanced durability; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.BucketElement.UseSsl">
            <summary>
            Set to true to use Secure Socket Layers (SSL) to encrypt traffic between the client and Couchbase server.
            </summary>
            <remarks>Requires the SSL certificate to be stored in the local Certificate Authority to enable SSL.</remarks>
            <remarks>This feature is only supported by Couchbase Cluster 3.0 and greater.</remarks>
            <remarks>If the parent <see cref="T:Couchbase.Configuration.Client.Providers.CouchbaseClientSection"/>'s UseSSL is false, setting this to true will override that configuration and enable the Bucket to use SSL./&gt;</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.BucketElement.Name">
            <summary>
            The name of the Bucket.
            </summary>
            <remarks>The name can be set within the Couchbase Management Console.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.BucketElement.Password">
            <summary>
            The password used to connect to the bucket. 
            </summary>
            <remarks>The password can be set within the Couchbase Management Console.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.BucketElement.ConnectionPool">
            <summary>
            Allows the default connection pool settings to be overridden. 
            </summary>
            <remarks>The default settings are: MinSize=1, MaxSize=2, WaitTimout=2500ms, ShutdownTimeout=10000ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.BucketElement.ObserveInterval">
            <summary>
            Gets or Sets the max time an observe operation will take before timing out.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.BucketElement.ObserveTimeout">
            <summary>
            Gets or Sets the interval between each observe attempt.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.BucketElement.OperationLifespan">
            <summary>
            Gets or sets the operation lifespan, maximum time in milliseconds allowed for an operation to run.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Client.Providers.ConnectionPoolElement">
            <summary>
            Provides configuration support for the Bucket's <see cref="T:Couchbase.IO.ConnectionPool`1"/> object, which is pool of TCP connections.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.Name">
            <summary>
            The name for the connection pool.
            </summary>
            <remarks>This is used internally and does not need to be set or customized.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.MaxSize">
            <summary>
            The maximum number of TCP connections that the client will allocate for a given Bucket.
            </summary>
            <remarks>The default is two TCP connections per bucket.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.MinSize">
            <summary>
            The minimum number of TCP connections that the client will allocate for a given bucket.
            </summary>
            <remarks>The default is one TCP connection per bucket.</remarks>
            <remarks>The connection pool will add TCP connections until <see cref="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.MaxSize"/> is reached.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.WaitTimeout">
            <summary>
            The amount of time a thread will wait for a <see cref="T:Couchbase.IO.IConnection"/> once the MaxSize of the pool has been reached and no TCP connections are available.
            </summary>
            <remarks>The default is 2500ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.ShutdownTimeout">
            <summary>
            Wait up to the <see cref="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.ShutdownTimeout"/> to send or recieve data before closing the <see cref="T:Couchbase.IO.IConnection"/>.
            </summary>
            <remarks>The default value is 10000ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.SendTimeout">
            <summary>
            Cancels a pending operation if it does not complete in the time given and marks the connection as dead.
            </summary>
            <remarks>The default value is 15000ms</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.UseSsl">
            <summary>
            Set to true to use Secure Socket Layers (SSL) to encrypt traffic between the client and Couchbase server.
            </summary>
            <remarks>Requires the SSL certificate to be stored in the local Certificate Authority to enable SSL.</remarks>
            <remarks>This feature is only supported by Couchbase Cluster 3.0 and greater.</remarks>
            <remarks>If the parent <see cref="T:Couchbase.Configuration.Client.Providers.CouchbaseClientSection"/>'s UseSSL is false, setting this to true will override that configuration and enable the Bucket to use SSL./&gt;</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.BufferSize">
            <summary>
            The size of each buffer to allocate per TCP connection for sending and recieving Memcached operations
            </summary>
            <remarks>The default is 16K</remarks>
            <remarks>The total buffer size is BufferSize * PoolConfiguration.MaxSize</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.ConnectTimeout">
            <summary>
            The amount time allotted for the client to establish a TCP connection with a server before failing
            </summary>
            <remarks>The default value is 10000ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.EnableTcpKeepAlives">
            <summary>
            Gets or sets a value indicating whether enable TCP keep alives.
            </summary>
            <value>
            <c>true</c> to enable TCP keep alives; otherwise, <c>false</c>.
            </value>
            <remarks>The default is true; TCP Keep Alives are enabled.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.TcpKeepAliveTime">
            <summary>
            Specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent.
            </summary>
            <value>
            The TCP keep alive time in milliseconds.
            </value>
            <remarks>The default is 2hrs.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.TcpKeepAliveInterval">
            <summary>
            Specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.
            </summary>
            <value>
            The TCP keep alive interval in milliseconds..
            </value>
            <remarks>The default is 1 second.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.MaxCloseAttempts">
            <summary>
            Gets or sets the maximum number of times the client will try to close a <see cref="T:Couchbase.IO.IConnection"/>
            if it's in use and <see cref="T:Couchbase.IO.IConnectionPool"/> has been disposed.
            </summary>
            <value>
            The maximum close attempts.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConnectionPoolElement.CloseAttemptInterval">
            <summary>
            Gets or sets the interval between close attempts on a <see cref="T:Couchbase.IO.IConnection"/>
            if it's in use and <see cref="T:Couchbase.IO.IConnectionPool"/> has been disposed.
            </summary>
            <value>
            The close attempt interval.
            </value>
        </member>
        <member name="T:Couchbase.Configuration.Client.Providers.CouchbaseClientSection">
            <summary>
            Allows the Client Configuration to be set through an App.config or a Web.config.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.UseSsl">
            <summary>
            Set to true to use Secure Socket Layers (SSL) to encrypt traffic between the client and Couchbase server.
            </summary>
            <remarks>Requires the SSL certificate to be stored in the local Certificate Authority to enable SSL.</remarks>
            <remarks>This feature is only supported by Couchbase Cluster 3.0 and greater.</remarks>
            <remarks>Set to true to require all buckets to use SSL.</remarks>
            <remarks>Set to false and then set UseSSL at the individual Bucket level to use SSL on specific buckets.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.Servers">
            <summary>
            Sets the Couchbase Server's list of bootstrap URI's. The client will use the list to connect to initially connect to the cluster.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.Buckets">
            <summary>
            Allows specific configurations of Bucket's to be defined, overriding the parent's settings.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.SslPort">
            <summary>
            Overrides the default and sets the SSL port to use for Key/Value operations using the Binary Memcached protocol.
            </summary>
            <remarks>The default and suggested port for SSL is 11207.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>Requires UseSSL to be true.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom SSL port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.ApiPort">
            <summary>
            Overrides the default and sets the Views REST API to use a custom port.
            </summary>
            <remarks>The default and suggested port for the Views REST API is 8092.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Views REST API port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.MgmtPort">
            <summary>
            Overrides the default and sets the Couchbase Management REST API to use a custom port.
            </summary>
            <remarks>The default and suggested port for the Views REST API is 8091.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Management REST API port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.DirectPort">
            <summary>
            Overrides the default and sets the direct port to use for Key/Value operations using the Binary Memcached protocol.
            </summary>
            <remarks>The default and suggested direct port is 11210.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom direct port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.HttpsMgmtPort">
            <summary>
            Overrides the default and sets the Couchbase Management REST API to use a custom SSL port.
            </summary>
            <remarks>The default and suggested port for SSL is 18091.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>Requires UseSSL to be true.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Couchbase Management REST API SSL port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.HttpsApiPort">
            <summary>
            Overrides the default and sets the Couchbase Views REST API to use a custom SSL port.
            </summary>
            <remarks>The default and suggested port for SSL is 18092.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>Requires UseSSL to be true.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Couchbase Views REST API SSL port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.ObserveInterval">
            <summary>
            Gets or Sets the max time an observe operation will take before timing out.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.ObserveTimeout">
            <summary>
            Gets or Sets the interval between each observe attempt.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.MaxViewRetries">
            <summary>
            The maximum number of times the client will retry a View operation if it has failed for a retriable reason.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.ViewHardTimeout">
            <summary>
            The maximum number of times the client will retry a View operation if it has failed for a retriable reason.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.HeartbeatConfigInterval">
            <summary>
            Sets the interval for configuration "heartbeat" checks, which check for changes in the configuration that are otherwise undetected by the client.
            </summary>
            <remarks>The default is 10000ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.EnableConfigHeartBeat">
            <summary>
            Enables configuration "heartbeat" checks.
            </summary>
            <remarks>The default is "enabled" or true.</remarks>
            <remarks>The interval of the configuration hearbeat check is controlled by the <see cref="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.HeartbeatConfigInterval"/> property.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.ViewRequestTimeout">
            <summary>
            Sets the timeout for each HTTP View request.
            </summary>
            <remarks>The default is 75000ms.</remarks>
            <remarks>The value must be greater than Zero.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.QueryRequestTimeout">
            <summary>
            Sets the timeout for each HTTP N1QL query request.
            </summary>
            <remarks>The default is 75000ms.</remarks>
            <remarks>The value must be greater than Zero.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.Expect100Continue">
            <summary>
            Gets or sets a Boolean value that determines whether 100-Continue behavior is used.
            </summary>
            <remarks>The default is false.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.EnableOperationTiming">
            <summary>
            Writes the elasped time for an operation to the log appender. Disabled by default.
            </summary>
            <remarks>When enabled will cause severe performance degradation.</remarks>
            <remarks>Requires a <see cref="T:Common.Logging.LogLevel"/>of DEBUG to be enabled as well.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.OperationLifespan">
            <summary>
            Gets or sets an uint value that determines the maximum lifespan of an operation before it is abandonned.
            </summary>
            <remarks>The default is 2500 (2.5 seconds).</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.EnableTcpKeepAlives">
            <summary>
            Gets or sets a value indicating whether enable TCP keep alives.
            </summary>
            <value>
            <c>true</c> to enable TCP keep alives; otherwise, <c>false</c>.
            </value>
            <remarks>The default is true; TCP Keep Alives are enabled.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.TcpKeepAliveTime">
            <summary>
            Specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent.
            </summary>
            <value>
            The TCP keep alive time in milliseconds.
            </value>
            <remarks>The default is 2hrs.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.TcpKeepAliveInterval">
            <summary>
            Specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.
            </summary>
            <value>
            The TCP keep alive interval in milliseconds..
            </value>
            <remarks>The default is 1 second.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.Transcoder">
            <summary>
            Gets or sets the transcoder.
            </summary>
            <value>
            The transcoder.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.Converter">
            <summary>
            Gets or sets the converter.
            </summary>
            <value>
            The converter.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.Serializer">
            <summary>
            Gets or sets the serializer.
            </summary>
            <value>
            The serializer.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.NodeAvailableCheckInterval">
            <summary>
            If the client detects that a node has gone offline it will check for connectivity at this interval.
            </summary>
            <remarks>The default is 1000ms.</remarks>
            <value>
            The node available check interval.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.ConnectionPool">
            <summary>
            Gets or sets the default connection pool settings.
            </summary>
            <value>
            The default connection pool settings.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.IOErrorThreshold">
            <summary>
            Gets or sets the count of IO errors within a specific interval defined by the value of <see cref="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.IOErrorCheckInterval"/>.
            If the threshold is reached within the interval for a particular node, all keys mapped to that node the SDK will fail
            with a <see cref="T:Couchbase.Core.NodeUnavailableException"/> in the <see cref="!:IOperationResult.Exception"/> field. The node will be flagged as "dead"
            and will try to reconnect, if connectivity is reached, the node will continue to process requests.
            </summary>
            <value>
            The io error count threshold.
            </value>
            <remarks>
            The purpose of this is to distinguish between a remote host being unreachable or temporay network glitch.
            </remarks>
            <remarks>The default is 10 errors.</remarks>
            <remarks>The lower limit is 0; the default will apply if this is exceeded.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.IOErrorCheckInterval">
            <summary>
            Gets or sets the interval that the <see cref="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.IOErrorThreshold"/> will be checked. If the threshold is reached within the interval for a
            particular node, all keys mapped to that node the SDK will fail with a <see cref="T:Couchbase.Core.NodeUnavailableException"/> in the
            <see cref="!:IOperationResult.Exception"/> field. The node will be flagged as "dead" and will try to reconnect, if connectivity
            is reached, the node will continue to process requests.
            </summary>
            <value>
            The io error check interval.
            </value>
            <remarks>The purpose of this is to distinguish between a remote host being unreachable or temporay network glitch.</remarks>
            <remarks>The default is 500ms; use milliseconds to override this: 1000 = 1 second.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.CouchbaseClientSection.QueryFailedThreshold">
            <summary>
            Gets or sets the query failed threshold for a <see cref="T:System.Uri"/> before it is flagged as "un-responsive".
            Once flagged as "un-responsive", no requests will be sent to that node until a server re-config has occurred
            and the <see cref="T:System.Uri"/> is added back into the pool. This is so the client will not send requests to
            a server node which is unresponsive.
            </summary>
            <remarks>The default is 2.</remarks>
            <value>
            The query failed threshold.
            </value>
        </member>
        <member name="T:Couchbase.Configuration.Client.Providers.ConverterElement">
            <summary>
            A configuration element for registering custom <see cref="T:Couchbase.IO.Converters.IByteConverter"/>s.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConverterElement.Name">
            <summary>
            Gets or sets the name of the custom <see cref="T:Couchbase.IO.Converters.IByteConverter"/>
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.ConverterElement.Type">
            <summary>
            Gets or sets the <see cref="P:Couchbase.Configuration.Client.Providers.ConverterElement.Type"/> of the custom <see cref="T:Couchbase.IO.Converters.IByteConverter"/>
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:Couchbase.Configuration.Client.Providers.SerializerElement">
            <summary>
            A configuration element for registering custom <see cref="T:Couchbase.Core.Serialization.ITypeSerializer"/>s.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.SerializerElement.Name">
            <summary>
            Gets or sets the name of the custom <see cref="T:Couchbase.Core.Serialization.ITypeSerializer"/>
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.SerializerElement.Type">
            <summary>
            Gets or sets the <see cref="P:Couchbase.Configuration.Client.Providers.SerializerElement.Type"/> of the custom <see cref="T:Couchbase.Core.Serialization.ITypeSerializer"/>
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:Couchbase.Configuration.Client.Providers.TranscoderElement">
            <summary>
            A configuration element for registering custom <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/>s.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.TranscoderElement.Name">
            <summary>
            Gets or sets the name of the custom <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/>
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.TranscoderElement.Type">
            <summary>
            Gets or sets the <see cref="P:Couchbase.Configuration.Client.Providers.TranscoderElement.Type"/> of the custom <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/>
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="T:Couchbase.Configuration.Client.Providers.UriElement">
            <summary>
            Allows a server to be added to the bootstrap list within an <see cref="T:Couchbase.Configuration.Client.Providers.CouchbaseClientSection"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.Providers.UriElement.Uri">
            <summary>
            The <see cref="P:Couchbase.Configuration.Client.Providers.UriElement.Uri"/> of the Couchbase server to connect to.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Client.Providers.UriElementCollection">
            <summary>
            Represents a collection of <see cref="T:System.Uri"/> for a Couchbase cluster. The client will use this list for bootstrapping and communicating with the cluster.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.CouchbaseBootstrapException">
            <summary>
            Thrown when the client cannot complete the bootstrapping phase of initialization.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.CouchbaseBootstrapException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Couchbase.Configuration.DefaultPorts">
            <summary>
            Represents the "default" ports that come pre-configured with Couchbase Server.
            </summary>
        </member>
        <member name="F:Couchbase.Configuration.DefaultPorts.MgmtApi">
            <summary>
            The Managment REST API port.
            </summary>
        </member>
        <member name="F:Couchbase.Configuration.DefaultPorts.CApi">
            <summary>
            The Views REST API port.
            </summary>
        </member>
        <member name="F:Couchbase.Configuration.DefaultPorts.Direct">
            <summary>
            The port used for Binary Memcached TCP operations.
            </summary>
        </member>
        <member name="F:Couchbase.Configuration.DefaultPorts.Proxy">
            <summary>
            Not used by the .NET client - reserved for Moxi.
            </summary>
        </member>
        <member name="F:Couchbase.Configuration.DefaultPorts.SslDirect">
            <summary>
            The SSL port used for Binary Memcached TCP operations.
            </summary>
        </member>
        <member name="F:Couchbase.Configuration.DefaultPorts.HttpsCApi">
            <summary>
            The SSL port used by View REST API.
            </summary>
        </member>
        <member name="F:Couchbase.Configuration.DefaultPorts.HttpsMgmt">
            <summary>
            The SSL port used by the Managment REST API's.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Server.Providers.IConfigProvider">
            <summary>
            A provider for <see cref="T:Couchbase.Configuration.IConfigInfo"/> objects which represent Couchbase Server configurations: mappings of VBuckets and keys to cluster nodes.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.ConfigProviderBase.GetOrCreateConfiguration(System.String)">
            <summary>
            Gets an <see cref="T:Couchbase.Configuration.Client.BucketConfiguration"/> from the <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/>. If one doesn't exist
            for a given bucket, a new one will be created and added to the configuration.
            </summary>
            <param name="bucketName">The <see cref="P:Couchbase.Core.IBucket.Name"/> to use for the lookup.</param>
            <returns>An <see cref="T:Couchbase.Configuration.Client.BucketConfiguration"/> instance.</returns>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.ConfigProviderBase.GetCached(System.String)">
            <summary>
            Gets the currently cached (and used) configuration.
            </summary>
            <param name="bucketName">The name of the Couchbase Bucket used to lookup the <see cref="T:Couchbase.Configuration.IConfigInfo"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.ConfigProviderBase.GetConfig(System.String)">
            <summary>
            Starts the HTTP streaming connection to the Couchbase Server and gets the latest configuration for a non-SASL authenticated Bucket.
            </summary>
            <param name="bucketName">The name of the Couchbase Bucket.</param>
            <returns>A <see cref="T:Couchbase.Configuration.IConfigInfo"/> object representing the latest configuration.</returns>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.ConfigProviderBase.ObserverExists(Couchbase.Configuration.Server.Providers.IConfigObserver)">
            <summary>
            Checks to see if an observer has been registered.
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Configuration.IConfigInfo">
            <summary>
            Provides an interface for implementing an object responsible for maintaining a
            list of nodes in cluster and the mapping between keys and nodes.
            </summary>
        </member>
        <member name="T:Couchbase.IQueryCacheInvalidator">
            <summary>
            Provides a method signature for invalidating and clearing a cache.
            </summary>
        </member>
        <member name="M:Couchbase.IQueryCacheInvalidator.InvalidateQueryCache">
            <summary>
            Invalidates and clears the query cache. This method can be used to explicitly clear the internal N1QL query cache. This cache will
            be filled with non-adhoc query statements (query plans) to speed up those subsequent executions. Triggering this method will wipe
            out the complete cache, which will not cause an interruption but rather all queries need to be re-prepared internally. This method
            is likely to be deprecated in the future once the server side query engine distributes its state throughout the cluster.
            </summary>
            <returns>An <see cref="T:System.Int32"/> representing the size of the cache before it was cleared.</returns>
        </member>
        <member name="M:Couchbase.Configuration.IConfigInfo.LoadConfig">
            <summary>
            Loads the most updated configuration creating any resources as needed. The <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/>
            used by this method is passed into the CTOR.
            </summary>
            <remarks>This method should be called immediately after creation.</remarks>
        </member>
        <member name="M:Couchbase.Configuration.IConfigInfo.LoadConfig(Couchbase.Configuration.Server.Serialization.IBucketConfig,System.Boolean)">
            <summary>
            Loads the most updated configuration creating any resources as needed based upon the passed in  <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/>.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.IConfigInfo.GetDataNode">
            <summary>
            Gets a data node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.IConfigInfo.GetQueryNode">
            <summary>
            Gets a query node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.IConfigInfo.GetIndexNode">
            <summary>
            Gets a index node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.IConfigInfo.GetViewNode">
            <summary>
            Gets a view node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.CreationTime">
            <summary>
            The time at which this configuration context has been created.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.ClientConfig">
            <summary>
            The client configuration used for bootstrapping.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.BucketConfig">
            <summary>
            The client configuration for a bucket.
            <remarks> See <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/> for details.</remarks>
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.BucketName">
            <summary>
            The name of the Bucket that this configuration represents.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.BucketType">
            <summary>
            The <see cref="T:Couchbase.Core.Buckets.BucketTypeEnum"/> that this configuration context is for.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.NodeLocator">
            <summary>
            The <see cref="T:Couchbase.Core.Buckets.NodeLocatorEnum"/> that this configuration is using.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.SslConfigured">
            <summary>
            Returns true if the bucket is configured to use SSL
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.IsQueryCapable">
            <summary>
            Gets or sets a value indicating whether this cluster is supports N1QL queries.
            </summary>
            <value>
            <c>true</c> if this instance is query capable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.IsViewCapable">
            <summary>
            Gets or sets a value indicating whether this cluster supports View requests.
            </summary>
            <value>
            <c>true</c> if this instance is view capable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.IsDataCapable">
            <summary>
            Gets or sets a value indicating whether this cluster supports K/V operations.
            </summary>
            <value>
            <c>true</c> if this instance is data capable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.SupportsEnhancedDurability">
            <summary>
            Gets a value indicating whether the server supports enhanced durability.
            </summary>
            <value>
            <c>true</c> if the server supports enhanced durability; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.IConfigInfo.IsIndexCapable">
            <summary>
            Gets or sets a value indicating whether this cluster is supports indexing
            </summary>
            <value>
            <c>true</c> if this cluster is index capable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.#ctor(Couchbase.Configuration.IConfigInfo,Couchbase.Core.Transcoders.ITypeTranscoder,System.Int32,System.UInt32)">
            <summary>
            Ctor for <see cref="T:Couchbase.Core.Buckets.KeyObserver"/>.
            </summary>
            <param name="configInfo">The <see cref="T:Couchbase.Configuration.IConfigInfo"/> object which represents the current cluster and client configuration.</param>
            <param name="transcoder"></param>
            <param name="interval">The interval to poll.</param>
            <param name="timeout">The max time to wait for the durability requirements to be met.</param>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.#ctor(Couchbase.Configuration.IConfigInfo,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Core.Buckets.KeyObserver"/> class.
            </summary>
            <param name="configInfo">The <see cref="T:Couchbase.Configuration.IConfigInfo"/> object which represents the current cluster and client configuration.</param>
            <param name="interval">The interval to poll.</param>
            <param name="timeout">The max time to wait for the durability requirements to be met.</param>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveAsync(Couchbase.Core.Buckets.MutationToken,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
             Performs an observe event on the durability requirements specified on a key asynchronously
            </summary>
            <param name="token">The <see cref="T:Couchbase.Core.Buckets.MutationToken"/> to compare against.</param>
            <param name="replicateTo">The number of replicas that the key must be replicated to to satisfy the durability constraint.</param>
            <param name="persistTo">The number of replicas that the key must be persisted to to satisfy the durability constraint.</param>
            <returns> A <see cref="!:Task&lt;bool&gt;"/> representing the aynchronous operation.</returns>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveEvery(System.Func{Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams,System.Threading.Tasks.Task{System.Boolean}},Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams,System.Int32,Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno,System.Threading.CancellationToken)">
            <summary>
            Observes a set of keys at a specified interval and timeout.
            </summary>
            <param name="observe">The func to call at the specific interval</param>
            <param name="observeParams">The parameters to pass in.</param>
            <param name="interval">The interval to check.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to use to terminate the observation at the specified timeout.</param>
            <returns>True if the durability requirements specified by <see cref="T:Couchbase.PersistTo"/> and <see cref="T:Couchbase.ReplicateTo"/> have been satisfied.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.Observe(Couchbase.Core.Buckets.MutationToken,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Observes the specified key using the Seqno.
            </summary>
            <param name="key">The key.</param>
            <param name="token">The token.</param>
            <param name="replicateTo">The replicate to.</param>
            <param name="persistTo">The persist to.</param>
            <returns>True if durability constraints were matched.</returns>
            <exception cref="T:Couchbase.Core.DocumentMutationLostException">Thrown if the observed document was lost during
            a hard failover because the document did not reach the replica in time.</exception>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.CheckReplicas(Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams,Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno)">
            <summary>
            Checks the replicas for durability constraints.
            </summary>
            <param name="observeParams">The observe parameters.</param>
            <param name="op">The op.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.CheckReplica(Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams,Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno,System.Int32)">
            <summary>
            Checks a replica for durability constraints.
            </summary>
            <param name="observeParams">The observe parameters.</param>
            <param name="op">The op.</param>
            <param name="replicaId">The replica identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams">
            <summary>
            Data structure for holding and passing arguments
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.IsDurabilityMet">
            <summary>
            Check to see if the durability constraint is met or exceeded
            </summary>
            <returns>True if the durability constraints specified by <see cref="P:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.ReplicateTo"/> and <see cref="P:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.PersistTo"/> have been met or exceeded.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.CheckPersisted(Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse)">
            <summary>
            Determines whether the specified response has persisted and if it has,
            increases the <see cref="F:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams._persistedToCount"/> by one.
            </summary>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.CheckReplicated(Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse)">
            <summary>
            Determines whether the specified response has replicated,
            increases the <see cref="F:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams._replicatedToCount"/> by one.
            </summary>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.CheckMutationLost(Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse)">
            <summary>
            Checks to see if The observed document was lost during a hard failover, because the document did not reach the replica in time.
            </summary>
            <param name="response">The <see cref="T:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno"/>response.</param>
            <exception cref="T:Couchbase.Core.DocumentMutationLostException">Thrown if the observed document was lost during
            a hard failover because the document did not reach the replica in time.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.MaxReplicas">
             <summary>
            Gets the maximum number of replicas to check.
             </summary>
             <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.GetReplicas">
            <summary>
            Gets the replica vBucket indexes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.CheckConfiguredReplicas">
            <summary>
            Checks that the number of configured replicas matches the <see cref="P:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.ReplicateTo"/> value.
            </summary>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeySeqnoObserver.ObserveParams.Reset">
            <summary>
            Resets the internal persistence and replication counters to zero.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Buckets.MutationToken">
            <summary>
            An object for tracking changes if enhanced durability is enabled.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Lifespan">
            <summary>
            Represents the lifetime of an operation from creation to timeout.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Lifespan._timedOut">
            <summary>
            True if the operation has timed out.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Lifespan.TimedOut">
            <summary>
            Checks if the operation has exceeded it's duration; if it has it is flagged as timedout.
            </summary>
            <returns>True if timed out</returns>
        </member>
        <member name="P:Couchbase.Core.Lifespan.CreationTime">
            <summary>
            Gets or sets the initial creation time of the operation.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:Couchbase.Core.Lifespan.Duration">
            <summary>
            Gets or sets the duration of operations lifespan; the interval between creation and timeout.
            </summary>
            <value>
            The duration.
            </value>
        </member>
        <member name="T:Couchbase.Core.NodeAdapterExtensions">
            <summary>
            Provides helper methods for workng with NodeAdapter's
            </summary>
        </member>
        <member name="M:Couchbase.Core.NodeAdapterExtensions.AreEqual(System.Collections.Generic.IList{Couchbase.Core.INodeAdapter},System.Collections.Generic.IList{Couchbase.Core.INodeAdapter})">
            <summary>
            Compares two <see cref="T:System.Collections.Generic.IList`1"/> instances for equality by comparing the <see cref="P:Couchbase.Core.INodeAdapter.Hostname"/> for each item in the list.
            </summary>
            <param name="nodes">The nodes to compare.</param>
            <param name="other">The other to nodes for comparison.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Configuration.Server.Serialization.NodeExt">
            <summary>
            Represents the nodesExt element of a server configuration; the
            extended set of services that a node is configured to have (data, query, index, etc)
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Server.Serialization.NodeExt.Services">
            <summary>
            Gets or sets the services that this node has available.
            </summary>
            <value>
            The services.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Server.Serialization.NodeExt.Hostname">
            <summary>
            Gets or sets the hostname or IP address of this node.
            </summary>
            <value>
            The hostname.
            </value>
        </member>
        <member name="T:Couchbase.Core.Buckets.CouchbaseRequestExecuter">
            <summary>
            An implementation of <see cref="T:Couchbase.Core.Buckets.IRequestExecuter"/> for executing Couchbase bucket operations (Memcached, Views, N1QL, etc)
            against a persistent, Couchbase Bucket on a Couchbase cluster.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Buckets.RequestExecuterBase">
            <summary>
            Provides virtual methods and base implementations for <see cref="T:Couchbase.Core.Buckets.IRequestExecuter"/>.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Buckets.IRequestExecuter">
            <summary>
            An interface for executing various operations (Memcached, View, N1QL, etc) with retry logic
            and hueristics against the Couchbase cluster.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetry(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation"/> to the Couchbase Server using the Memcached protocol.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to send.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the request.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetry``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to the Couchbase Server using the Memcached protocol.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the request.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetryAsync``1(Couchbase.IO.Operations.IOperation{``0},System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult{``0}},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <param name="tcs">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> the represents the task to await on.</param>
            <param name="cts">The <see cref="T:System.Threading.CancellationTokenSource"/> for cancellation.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> with the status of the request to be awaited on.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetryAsync(Couchbase.IO.Operations.IOperation,System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation"/> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to send.</param>
            <param name="tcs">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> the represents the task to await on.</param>
            <param name="cts">The <see cref="T:System.Threading.CancellationTokenSource"/> for cancellation.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> with the status of the request to be awaited on.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetry``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a View request to the server to be executed.
            </summary>
            <typeparam name="T">The Type of the body of the Views return value or row.</typeparam>
            <param name="query">An <see cref="T:Couchbase.Views.IViewQuery"/> to be executed.</param>
            <returns>The result of the View request as an <see cref="T:Couchbase.Views.IViewResult`1"/> where T is the Type of each row.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetryAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a View request to the server to be executed using async/await
            </summary>
            <typeparam name="T">The Type of the body of the Views return value or row.</typeparam>
            <param name="query">An <see cref="T:Couchbase.Views.IViewQuery"/> to be executed.</param>
            <returns>The result of the View request as an <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited on where T is the Type of each row.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetry``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a N1QL query to the server to be executed using the <see cref="T:Couchbase.N1QL.IQueryRequest"/> object.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="queryRequest">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> object to send to the server.</param>
            <returns>An <see cref="T:Couchbase.N1QL.IQueryResult`1"/> object that is the result of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithRetryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a N1QL query to the server to be executed using the <see cref="T:Couchbase.N1QL.IQueryRequest"/> object using async/await.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="queryRequest">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> object to send to the server.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> object to be awaited on that is the result of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithDurability``1(Couchbase.IO.Operations.IOperation{``0},System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements
            </summary>
            <typeparam name="T">The value for T.</typeparam>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:Couchbase.IOperationResult`1"/> with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithDurability(Couchbase.IO.Operations.IOperation,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements
            </summary>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:Couchbase.IOperationResult"/> with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithDurabilityAsync``1(Couchbase.IO.Operations.IOperation{``0},System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements using async/await
            </summary>
            <typeparam name="T">The value for T.</typeparam>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited on with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.SendWithDurabilityAsync(Couchbase.IO.Operations.IOperation,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements using async/await
            </summary>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited on with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.RetryOperationEveryAsync``1(System.Func{Couchbase.IO.Operations.IOperation{``0},Couchbase.Configuration.IConfigInfo,System.Threading.Tasks.Task{Couchbase.IOperationResult{``0}}},Couchbase.IO.Operations.IOperation{``0},Couchbase.Configuration.IConfigInfo,System.Threading.CancellationToken)">
            <summary>
             Executes an operation until it either succeeds, reaches a non-retriable state, or times out.
             </summary>
             <typeparam name="T">The Type of the <see cref="T:Couchbase.IO.Operations.IOperation"/>'s value.</typeparam>
             <param name="execute">A delegate that contains the send logic.</param>
             <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to execiute.</param>
             <param name="configInfo">The <see cref="T:Couchbase.Configuration.IConfigInfo"/> that represents the logical topology of the cluster.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for timing out the request.</param>
             An <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.RetryOperationEveryAsync(System.Func{Couchbase.IO.Operations.IOperation,Couchbase.Configuration.IConfigInfo,System.Threading.Tasks.Task{Couchbase.IOperationResult}},Couchbase.IO.Operations.IOperation,Couchbase.Configuration.IConfigInfo,System.Threading.CancellationToken)">
            <summary>
            Executes an operation until it either succeeds, reaches a non-retriable state, or times out.
            </summary>
            <param name="execute">A delegate that contains the send logic.</param>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to execiute.</param>
            <param name="configInfo">The <see cref="T:Couchbase.Configuration.IConfigInfo"/> that represents the logical topology of the cluster.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for timing out the request.</param>
            An <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchrobous operation.
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.ReadFromReplica``1(Couchbase.IO.Operations.ReplicaRead{``0})">
            <summary>
            Checks the primary node for the key, if a NMV is encountered, will retry on each replica.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to execiute.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.ReadFromReplicaAsync``1(Couchbase.IO.Operations.ReplicaRead{``0})">
            <summary>
            Checks the primary node for the key, if a NMV is encountered, will retry on each replica, asynchronously.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to execiute.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing asynchcronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.IRequestExecuter.UpdateConfig">
            <summary>
            Updates the configuration.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.RetryOperationEveryAsync``1(System.Func{Couchbase.IO.Operations.IOperation{``0},Couchbase.Configuration.IConfigInfo,System.Threading.Tasks.Task{Couchbase.IOperationResult{``0}}},Couchbase.IO.Operations.IOperation{``0},Couchbase.Configuration.IConfigInfo,System.Threading.CancellationToken)">
            <summary>
            Executes an operation until it either succeeds, reaches a non-retriable state, or times out.
            </summary>
            <typeparam name="T">The Type of the <see cref="T:Couchbase.IO.Operations.IOperation"/>'s value.</typeparam>
            <param name="execute">A delegate that contains the send logic.</param>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to execiute.</param>
            <param name="configInfo">The <see cref="T:Couchbase.Configuration.IConfigInfo"/> that represents the logical topology of the cluster.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> for timing out the request.</param>
            An <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchrobous operation.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Couchbase.Core.Buckets.RequestExecuterBase.RetryOperationEveryAsync(System.Func{Couchbase.IO.Operations.IOperation,Couchbase.Configuration.IConfigInfo,System.Threading.Tasks.Task{Couchbase.IOperationResult}},Couchbase.IO.Operations.IOperation,Couchbase.Configuration.IConfigInfo,System.Threading.CancellationToken)" -->
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetry``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to the Couchbase Server using the Memcached protocol.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult"/> with the status of the request.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetryAsync``1(Couchbase.IO.Operations.IOperation{``0},System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult{``0}},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <param name="tcs"></param>
            <param name="cts"></param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1"/> with the status of the request to be awaited on.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetry``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a View request to the server to be executed.
            </summary>
            <typeparam name="T">The Type of the body of the Views return value or row.</typeparam>
            <param name="query">An <see cref="T:Couchbase.Views.IViewQuery"/> to be executed.</param>
            <returns>
            The result of the View request as an <see cref="T:Couchbase.Views.IViewResult`1"/> where T is the Type of each row.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetryAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a View request to the server to be executed using async/await
            </summary>
            <typeparam name="T">The Type of the body of the Views return value or row.</typeparam>
            <param name="query">An <see cref="T:Couchbase.Views.IViewQuery"/> to be executed.</param>
            <returns>
            The result of the View request as an <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited on where T is the Type of each row.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetry``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a N1QL query to the server to be executed using the <see cref="T:Couchbase.N1QL.IQueryRequest"/> object.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="queryRequest">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> object to send to the server.</param>
            <returns>
            An <see cref="T:Couchbase.N1QL.IQueryResult`1"/> object that is the result of the query.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a N1QL query to the server to be executed using the <see cref="T:Couchbase.N1QL.IQueryRequest"/> object using async/await.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="queryRequest">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> object to send to the server.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1"/> object to be awaited on that is the result of the query.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithDurability``1(Couchbase.IO.Operations.IOperation{``0},System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements
            </summary>
            <typeparam name="T">The value for T.</typeparam>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:Couchbase.IOperationResult`1"/> with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithDurabilityAsync``1(Couchbase.IO.Operations.IOperation{``0},System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements using async/await
            </summary>
            <typeparam name="T">The value for T.</typeparam>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited on with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetry(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation"/> to the Couchbase Server using the Memcached protocol.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to send.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult"/> with the status of the request.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithRetryAsync(Couchbase.IO.Operations.IOperation,System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation"/> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to send.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1"/> with the status of the request to be awaited on.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithDurability(Couchbase.IO.Operations.IOperation,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements
            </summary>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:Couchbase.IOperationResult"/> with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.SendWithDurabilityAsync(Couchbase.IO.Operations.IOperation,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements using async/await
            </summary>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited on with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.ReadFromReplica``1(Couchbase.IO.Operations.ReplicaRead{``0})">
            <summary>
            Checks the primary node for the key, if a NMV is encountered, will retry on each replica.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to execiute.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.RequestExecuterBase.ReadFromReplicaAsync``1(Couchbase.IO.Operations.ReplicaRead{``0})">
            <summary>
            Checks the primary node for the key, if a NMV is encountered, will retry on each replica, asynchronously.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to execiute.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing asynchcronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.CanRetryOperation(Couchbase.IOperationResult,Couchbase.IO.Operations.IOperation)">
            <summary>
            Checks the <see cref="T:Couchbase.IO.Operations.IOperation"/> to see if it supports retries and then checks the <see cref="T:Couchbase.IOperationResult"/>
             to see if the error or server response supports retries.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operationResult">The <see cref="T:Couchbase.IOperationResult"/> to check from the server.</param>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to check to see if it supports retries. Not all operations support retries.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.CheckForConfigUpdates(Couchbase.IO.Operations.IOperation)">
            <summary>
            Updates the configuration if the <see cref="T:Couchbase.IO.Operations.IOperation"/> returns a <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/>
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> with the <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/> to check for.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.GetServer(System.String,Couchbase.Core.IVBucket@)">
            <summary>
            Gets the <see cref="T:Couchbase.Core.Server"/> or node that a key has been mapped to.
            </summary>
            <param name="key">The key to get or set.</param>
            <param name="vBucket">The VBucket the key belongs to.</param>
            <returns>The <see cref="T:Couchbase.Core.IServer"/> that the key is mapped to.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.RetryViewEveryAsync``1(System.Func{Couchbase.Views.IViewQueryable,Couchbase.Configuration.IConfigInfo,System.Threading.Tasks.Task{Couchbase.Views.IViewResult{``0}}},Couchbase.Views.IViewQueryable,Couchbase.Configuration.IConfigInfo,System.Threading.CancellationToken)">
            <summary>
            Executes an <see cref="T:Couchbase.Views.IViewQuery"/> asynchronously. If it fails, the response is checked and
             if certain criteria are met the request is retried until it times out.
            </summary>
            <typeparam name="T">The Type of View result body.</typeparam>
            <param name="execute">A delegate with the send logic that is executed on each attempt. </param>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> to execute.</param>
            <param name="configInfo">The <see cref="T:Couchbase.Configuration.IConfigInfo"/> that represents the logical topology of the cluster.</param>
            <param name="cancellationToken">For canceling the async operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithDurability``1(Couchbase.IO.Operations.IOperation{``0},System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements
            </summary>
            <typeparam name="T">The value for T.</typeparam>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:Couchbase.IOperationResult`1"/> with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.</returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support Data services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithDurability(Couchbase.IO.Operations.IOperation,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements
            </summary>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:Couchbase.IOperationResult"/> with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.</returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support Data services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithDurabilityAsync``1(Couchbase.IO.Operations.IOperation{``0},System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Sends an operation to the server while observing it's durability requirements using async/await
            </summary>
            <typeparam name="T">The value for T.</typeparam>
            <param name="operation">A binary memcached operation - must be a mutation operation.</param>
            <param name="deletion">True if mutation is a deletion.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited on with it's <see cref="T:Couchbase.IO.Operations.Durability"/> status.</returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support Data services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetry``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a View request with retry.
            </summary>
            <typeparam name="T">The Type T of the <see cref="T:Couchbase.Views.ViewRow`1"/> value.</typeparam>
            <param name="viewQuery">The view query.</param>
            <returns>A <see cref="T:Couchbase.Views.IViewResult`1"/> with the results of the query.</returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support View services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetry(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation"/> to the Couchbase Server using the Memcached protocol.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to send.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult"/> with the status of the request.
            </returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support Data services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetry``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to the Couchbase Server using the Memcached protocol.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult"/> with the status of the request.
            </returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support Data services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetryAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a View request to the server to be executed using async/await
            </summary>
            <typeparam name="T">The Type of the body of the Views return value or row.</typeparam>
            <param name="query">An <see cref="T:Couchbase.Views.IViewQuery"/> to be executed.</param>
            <returns>
            The result of the View request as an <see cref="T:System.Threading.Tasks.Task`1"/> to be awaited on where T is the Type of each row.
            </returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support View services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetryAsync``1(Couchbase.IO.Operations.IOperation{``0},System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult{``0}},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <param name="tcs">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> the represents the task to await on.</param>
            <param name="cts">The <see cref="T:System.Threading.CancellationTokenSource"/> for cancellation.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetryAsync(Couchbase.IO.Operations.IOperation,System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation"/> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to send.</param>
            <param name="tcs">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> the represents the task to await on.</param>
            <param name="cts">The <see cref="T:System.Threading.CancellationTokenSource"/> for cancellation.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetry``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a N1QL query to the server to be executed using the <see cref="T:Couchbase.N1QL.IQueryRequest"/> object.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="queryRequest">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> object to send to the server.</param>
            <returns>
            An <see cref="T:Couchbase.N1QL.IQueryResult`1"/> object that is the result of the query.
            </returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support Query services.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.CouchbaseRequestExecuter.SendWithRetryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a N1QL query to the server to be executed using the <see cref="T:Couchbase.N1QL.IQueryRequest"/> object using async/await.
            </summary>
            <typeparam name="T">The Type T of the body of each result row.</typeparam>
            <param name="queryRequest">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> object to send to the server.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> object to be awaited on that is the result of the query.</returns>
            <exception cref="T:Couchbase.Core.Services.ServiceNotSupportedException">The cluster does not support Query services.</exception>
        </member>
        <member name="T:Couchbase.Core.Buckets.KeyObserver">
            <summary>
            Performs and observe event on a key, terminating when the durability requirements are satisfied or the specified timeout has expired.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.#ctor(Couchbase.Configuration.IConfigInfo,Couchbase.Core.Transcoders.ITypeTranscoder,System.Int32,System.Int32)">
            <summary>
            Ctor for <see cref="T:Couchbase.Core.Buckets.KeyObserver"/>.
            </summary>
            <param name="configInfo">The <see cref="T:Couchbase.Configuration.IConfigInfo"/> object which represents the current cluster and client configuration.</param>
            <param name="transcoder"></param>
            <param name="interval">The interval to poll.</param>
            <param name="timeout">The max time to wait for the durability requirements to be met.</param>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.#ctor(Couchbase.Configuration.IConfigInfo,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.Core.Buckets.KeyObserver"/> class.
            </summary>
            <param name="configInfo">The <see cref="T:Couchbase.Configuration.IConfigInfo"/> object which represents the current cluster and client configuration.</param>
            <param name="interval">The interval to poll.</param>
            <param name="timeout">The max time to wait for the durability requirements to be met.</param>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveAdd(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Performs an observe event on the durability requirements specified on a key stored by an Add operation.
            </summary>
            <param name="key">The key to observe.</param>
            <param name="cas">The 'Check and Set' value of the key.</param>
            <param name="replicateTo">The number of replicas that the key must be replicated to to satisfy the durability constraint.</param>
            <param name="persistTo">The number of replicas that the key must be persisted to to satisfy the durability constraint.</param>
            <returns>True if the durability constraints have been satisfied.</returns>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveRemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Performs an observe event on the durability requirements specified on a key stored by an delete operation.
            </summary>
            <param name="key">The key to observe.</param>
            <param name="cas">The 'Check and Set' value of the key.</param>
            <param name="replicateTo">The number of replicas that the key must be replicated (deleted) to to satisfy the durability constraint.</param>
            <param name="persistTo">The number of replicas that the key must be persisted (deleted) to to satisfy the durability constraint.</param>
            <returns>True if the durability constraints have been satisfied.</returns>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveAddAsync(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Performs an observe event on the durability requirements specified on a key stored by an Add operation.
            </summary>
            <param name="key">The key to observe.</param>
            <param name="cas">The 'Check and Set' value of the key.</param>
            <param name="replicateTo">The number of replicas that the key must be replicated to to satisfy the durability constraint.</param>
            <param name="persistTo">The number of replicas that the key must be persisted to to satisfy the durability constraint.</param>
            <returns>True if the durability constraints have been satisfied.</returns>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveRemove(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Performs an observe event on the durability requirements specified on a key stored by an delete operation.
            </summary>
            <param name="key">The key to observe.</param>
            <param name="cas">The 'Check and Set' value of the key.</param>
            <param name="replicateTo">The number of replicas that the key must be replicated (deleted) to to satisfy the durability constraint.</param>
            <param name="persistTo">The number of replicas that the key must be persisted (deleted) to to satisfy the durability constraint.</param>
            <returns>True if the durability constraints have been satisfied.</returns>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveAsync(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
             Performs an observe event on the durability requirements specified on a key asynchronously
            </summary>
            <param name="key">The key to observe.</param>
            <param name="cas">The 'Check and Set' value of the key.</param>
            <param name="deletion">True if this is a delete operation.</param>
            <param name="replicateTo">The number of replicas that the key must be replicated to to satisfy the durability constraint.</param>
            <param name="persistTo">The number of replicas that the key must be persisted to to satisfy the durability constraint.</param>
            <returns> A <see cref="!:Task&lt;bool&gt;"/> representing the aynchronous operation.</returns>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.Observe(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
             Performs an observe event on the durability requirements specified on a key.
            </summary>
            <param name="key">The key to observe.</param>
            <param name="cas">The 'Check and Set' value of the key.</param>
            <param name="deletion">True if this is a delete operation.</param>
            <param name="replicateTo">The number of replicas that the key must be replicated to to satisfy the durability constraint.</param>
            <param name="persistTo">The number of replicas that the key must be persisted to to satisfy the durability constraint.</param>
            <returns>True if the durability constraints have been met.</returns>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.GetReplicas(Couchbase.Core.IVBucket,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Gets a list of replica indexes that is the larger of either the <see cref="T:Couchbase.PersistTo"/> or the <see cref="T:Couchbase.ReplicateTo"/> value.
            </summary>
            <param name="vBucket">The <see cref="T:Couchbase.Core.VBucket"/> containing the replica indexes.</param>
            <param name="replicateTo">The <see cref="T:Couchbase.ReplicateTo"/> value.</param>
            <param name="persistTo">The <see cref="T:Couchbase.PersistTo"/> value.</param>
            <returns>A list of replica indexes which is the larger of either the <see cref="T:Couchbase.PersistTo"/> or the <see cref="T:Couchbase.ReplicateTo"/> value</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.CheckReplicas(Couchbase.Core.Buckets.KeyObserver.ObserveParams,Couchbase.IO.Operations.Observe)">
            <summary>
            Checks the replicas to see if the key has met the durability constraints defined by the caller.
            </summary>
            <param name="observeParams">The observe parameters.</param>
            <param name="operation">The operation observe operation reference; will be cloned if reused.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.CheckReplica(Couchbase.Core.Buckets.KeyObserver.ObserveParams,Couchbase.IO.Operations.Observe,System.Int32)">
            <summary>
            Checks the replica at a given replicaIndex for the durability constraints.
            </summary>
            <param name="observeParams">The observe parameters - stateful - gather info with each request.</param>
            <param name="operation">The observe operation.</param>
            <param name="replicaIndex">Index of the replica.</param>
            <returns>True if the key has not mutated.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.CheckReplicaAsync(Couchbase.Core.Buckets.KeyObserver.ObserveParams,Couchbase.IO.Operations.Observe,System.Int32)">
            <summary>
            Asynchronously checks the replications status of a key.
            </summary>
            <param name="observeParams">The <see cref="T:Couchbase.Core.Buckets.KeyObserver.ObserveParams"/> object.</param>
            <param name="operation">The Observe operation.</param>
            <param name="replicaIndex">The replicaIndex of the replica within the <see cref="T:Couchbase.Core.IVBucket"/></param>
            <returns>True if the durability requirements specified by <see cref="T:Couchbase.PersistTo"/> and <see cref="T:Couchbase.ReplicateTo"/> have been satisfied.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveEvery(System.Func{Couchbase.Core.Buckets.KeyObserver.ObserveParams,System.Threading.Tasks.Task{System.Boolean}},Couchbase.Core.Buckets.KeyObserver.ObserveParams,Couchbase.IO.Operations.Observe,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Observes a set of keys at a specified interval and timeout.
            </summary>
            <param name="observe">The func to call at the specific interval</param>
            <param name="observeParams">The parameters to pass in.</param>
            <param name="op">The <see cref="M:Couchbase.Core.Buckets.KeyObserver.Observe(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)"/> operation.</param>
            <param name="interval">The interval to check.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to use to terminate the observation at the specified timeout.</param>
            <returns>True if the durability requirements specified by <see cref="T:Couchbase.PersistTo"/> and <see cref="T:Couchbase.ReplicateTo"/> have been satisfied.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.GetDurabilityCriteria(System.Boolean)">
            <summary>
            Gets the specified durability requirements for the key.
            </summary>
            <param name="remove">If true the durability requirements will be set as a deletion operation, otherwise as an Add operation.</param>
            <returns>The durability requirements that must be statisfied.</returns>
        </member>
        <member name="T:Couchbase.Core.Buckets.KeyObserver.DurabiltyCriteria">
            <summary>
            The durability requirements that must be met.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Buckets.KeyObserver.ObserveParams">
            <summary>
            Data structure for holding and passing arguments
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveParams.IsDurabilityMet">
            <summary>
            Check to see if the durability constraint is met or exceeded
            </summary>
            <returns>True if the durability constraints specified by <see cref="P:Couchbase.Core.Buckets.KeyObserver.ObserveParams.ReplicateTo"/> and <see cref="P:Couchbase.Core.Buckets.KeyObserver.ObserveParams.PersistTo"/> have been met or exceeded.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveParams.CheckConfiguredReplicas">
            <summary>
            Checks that the number of configured replicas matches the <see cref="P:Couchbase.Core.Buckets.KeyObserver.ObserveParams.ReplicateTo"/> value.
            </summary>
            <exception cref="T:Couchbase.Core.ReplicaNotConfiguredException">Thrown if the number of replicas requested
            in the ReplicateTo parameter does not match the # of replicas configured on the server.</exception>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveParams.GetReplicas">
            <summary>
            Gets a list of replica indexes that is the larger of either the <see cref="P:Couchbase.Core.Buckets.KeyObserver.ObserveParams.PersistTo"/> or the <see cref="P:Couchbase.Core.Buckets.KeyObserver.ObserveParams.ReplicateTo"/> value.
            </summary>
            <returns>A list of replica indexes which is the larger of either the <see cref="P:Couchbase.Core.Buckets.KeyObserver.ObserveParams.PersistTo"/> or the <see cref="P:Couchbase.Core.Buckets.KeyObserver.ObserveParams.ReplicateTo"/> value</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KeyObserver.ObserveParams.Reset">
            <summary>
            Resets the internal persistence and replication counters to zero.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Buckets.MemcachedRequestExecuter">
            <summary>
            An implementation of <see cref="T:Couchbase.Core.Buckets.IRequestExecuter"/> for executing memcached specific operations against an
            in-memory, Memcached Bucket in a Couchbase cluster.
            </summary>
            <remarks>Note that the only methods which Memcached buckets support are implemented.
            Methods that are not implemented may throw a <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="M:Couchbase.Core.Buckets.MemcachedRequestExecuter.GetServer(System.String)">
            <summary>
            Maps a key to a <see cref="T:Couchbase.Core.IServer"/> object.
            </summary>
            <param name="key">The key to map.</param>
            <returns>The <see cref="T:Couchbase.Core.IServer"/> where the key lives.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.MemcachedRequestExecuter.SendWithRetry``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to the Couchbase Server using the Memcached protocol.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the request.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.MemcachedRequestExecuter.SendWithRetry(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to the Couchbase Server using the Memcached protocol.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the request.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.MemcachedRequestExecuter.SendWithRetryAsync``1(Couchbase.IO.Operations.IOperation{``0},System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult{``0}},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <typeparam name="T">The Type of the body of the request.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <param name="tcs">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> the represents the task to await on.</param>
            <param name="cts">The <see cref="T:System.Threading.CancellationTokenSource"/> for cancellation.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.MemcachedRequestExecuter.SendWithRetryAsync(Couchbase.IO.Operations.IOperation,System.Threading.Tasks.TaskCompletionSource{Couchbase.IOperationResult},System.Threading.CancellationTokenSource)">
            <summary>
            Sends a <see cref="T:Couchbase.IO.Operations.IOperation"/> to the Couchbase Server using the Memcached protocol using async/await.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to send.</param>
             /// <param name="tcs">The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> the represents the task to await on.</param>
            <param name="cts">The <see cref="T:System.Threading.CancellationTokenSource"/> for cancellation.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="F:Couchbase.Core.Diagnostics.TimingLevel.None">
            <summary>
            Disabled - no timing information will be logged
            </summary>
        </member>
        <member name="M:Couchbase.Core.INodeAdapter.GetIPEndPoint">
            <summary>
            Gets the <see cref="T:System.Net.IPEndPoint"/> for the KV port for this node.
            </summary>
            <returns>An <see cref="T:System.Net.IPEndPoint"/> with the KV port.</returns>
        </member>
        <member name="M:Couchbase.Core.INodeAdapter.GetIPEndPoint(System.Boolean)">
            <summary>
            Gets the ip end point.
            </summary>
            <param name="useSsl">if set to <c>true</c> use SSL/TLS.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.INodeAdapter.GetIPEndPoint(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Net.IPEndPoint"/> for the KV port for this node.
            </summary>
            <param name="port">The port for the <see cref="T:System.Net.IPEndPoint"/></param>
            <returns>An <see cref="T:System.Net.IPEndPoint"/> with the port passed in.</returns>
        </member>
        <member name="M:Couchbase.Core.INodeAdapter.GetIPAddress">
            <summary>
            Gets the <see cref="T:System.Net.IPAddress"/> for this node.
            </summary>
            <returns>An <see cref="T:System.Net.IPAddress"/> for this node.</returns>
        </member>
        <member name="P:Couchbase.Core.INodeAdapter.IsDataNode">
            <summary>
            Gets a value indicating whether this instance is data node which supports K/V and Views.
            </summary>
            <value>
            	<c>true</c> if this instance is data node ; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.INodeAdapter.IsIndexNode">
            <summary>
            Gets a value indicating whether this instance is index node.
            </summary>
            <value>
            	<c>true</c> if this instance is index node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.INodeAdapter.IsQueryNode">
            <summary>
            Gets a value indicating whether this instance is query node supports N1QL.
            </summary>
            <value>
            	<c>true</c> if this instance is query node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.Core.NodeAdapter.GetIPEndPoint">
            <summary>
            Gets the <see cref="T:System.Net.IPEndPoint"/> for the KV port for this node.
            </summary>
            <returns>
            An <see cref="T:System.Net.IPEndPoint"/> with the KV port.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.Core.NodeAdapter.GetIPEndPoint(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Net.IPEndPoint"/> for the KV port for this node.
            </summary>
            <param name="port">The port for the <see cref="T:System.Net.IPEndPoint"/></param>
            <returns>
            An <see cref="T:System.Net.IPEndPoint"/> with the port passed in.
            </returns>
        </member>
        <member name="M:Couchbase.Core.NodeAdapter.GetIPAddress">
            <summary>
            Gets the <see cref="T:System.Net.IPAddress"/> for this node.
            </summary>
            <returns>
            An <see cref="T:System.Net.IPAddress"/> for this node.
            </returns>
        </member>
        <member name="M:Couchbase.Core.NodeAdapter.GetIPEndPoint(System.Boolean)">
            <summary>
            Gets the ip end point.
            </summary>
            <param name="useSsl">if set to <c>true</c> use SSL/TLS.</param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Core.NodeAdapter.IsDataNode">
            <summary>
            Gets a value indicating whether this instance is data node.
            </summary>
            <value>
            	<c>true</c> if this instance is data node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.NodeAdapter.IsIndexNode">
            <summary>
            Gets a value indicating whether this instance is index node.
            </summary>
            <value>
            	<c>true</c> if this instance is index node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.NodeAdapter.IsQueryNode">
            <summary>
            Gets a value indicating whether this instance is query node.
            </summary>
            <value>
            	<c>true</c> if this instance is query node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Couchbase.Core.NodeUnavailableException">
            <summary>
            Thrown if a node in the cluster is not online to service a pending request.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Serialization.DefaultSerializer">
            <summary>
            The default serializer for the Couchbase.NET SDK. Uses Newtonsoft.JSON as the the serializer.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Serialization.IExtendedTypeSerializer">
            <summary>
            Provides an interface for serialization and deserialization of K/V pairs, with support for more
            advanced deserialization features.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Serialization.ITypeSerializer">
            <summary>
            Provides an interface for serialization and deserialization of K/V pairs.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Serialization.ITypeSerializer.Deserialize``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deserializes the specified buffer into the <see cref="T:System.Type"/> T specified as a generic parameter.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> specified as the type of the value.</typeparam>
            <param name="buffer">The buffer to deserialize from.</param>
            <param name="offset">The offset of the buffer to start reading from.</param>
            <param name="length">The length of the buffer to read from.</param>
            <returns>The <see cref="T:System.Type"/> instance representing the value of the key.</returns>
        </member>
        <member name="M:Couchbase.Core.Serialization.ITypeSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes the specified stream into the <see cref="T:System.Type"/> T specified as a generic parameter.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> specified as the type of the value.</typeparam>
            <param name="stream">The stream.</param>
            <returns>The <see cref="T:System.Type"/> instance representing the value of the key.</returns>
        </member>
        <member name="M:Couchbase.Core.Serialization.ITypeSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object into a buffer.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>A <see cref="T:System.Byte"/> array that is the serialized value of the key.</returns>
        </member>
        <member name="M:Couchbase.Core.Serialization.IExtendedTypeSerializer.GetMemberName(System.Reflection.MemberInfo)">
            <summary>
            Get the name which will be used for a given member during serialization/deserialization.
            </summary>
            <param name="member">Returns the name of this member.</param>
            <returns>
            The name which will be used for a given member during serialization/deserialization,
            or null if if will not be serialized.
            </returns>
        </member>
        <member name="P:Couchbase.Core.Serialization.IExtendedTypeSerializer.SupportedDeserializationOptions">
            <summary>
            Informs consumers what deserialization options this <see cref="T:Couchbase.Core.Serialization.IExtendedTypeSerializer"/> supports.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Serialization.IExtendedTypeSerializer.DeserializationOptions">
            <summary>
            Provides custom deserialization options.  Options not listed in <see cref="P:Couchbase.Core.Serialization.IExtendedTypeSerializer.SupportedDeserializationOptions"/>
            will be ignored.  If null, then defaults will be used.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Serialization.DefaultSerializer.Deserialize``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deserializes the specified buffer into the <see cref="T:System.Type"/> T specified as a generic parameter.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> specified as the type of the value.</typeparam>
            <param name="buffer">The buffer to deserialize from.</param>
            <param name="offset">The offset of the buffer to start reading from.</param>
            <param name="length">The length of the buffer to read from.</param>
            <returns>The <see cref="T:System.Type"/> instance representing the value of the key.</returns>
        </member>
        <member name="M:Couchbase.Core.Serialization.DefaultSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object into a buffer.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>A <see cref="T:System.Byte"/> array that is the serialized value of the key.</returns>
        </member>
        <member name="M:Couchbase.Core.Serialization.DefaultSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes the specified stream into the <see cref="T:System.Type"/> T specified as a generic parameter.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> specified as the type of the value.</typeparam>
            <param name="stream">The stream.</param>
            <returns>The <see cref="T:System.Type"/> instance representing the value of the key.</returns>
        </member>
        <member name="M:Couchbase.Core.Serialization.DefaultSerializer.GetMemberName(System.Reflection.MemberInfo)">
            <summary>
            Get the name which will be used for a given member during serialization/deserialization.
            </summary>
            <param name="member">Returns the name of this member.</param>
            <returns>
            The name which will be used for a given member during serialization/deserialization,
            or null if if will not be serialized.
            </returns>
            <remarks>
            DefaultSerializer uses <see cref="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver"/> from <see cref="P:Couchbase.Core.Serialization.DefaultSerializer.SerializerSettings"/>
            to determine the member name.
            </remarks>
        </member>
        <member name="P:Couchbase.Core.Serialization.DefaultSerializer.SupportedDeserializationOptions">
            <summary>
            Informs consumers what deserialization options this <see cref="T:Couchbase.Core.Serialization.IExtendedTypeSerializer"/> supports.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Serialization.DefaultSerializer.SerializerSettings">
            <summary>
            Gets the outgoing serializer settings; controls the format of the JSON you are storing in Couchbase.
            </summary>
            <value>
            The outgoing serializer settings; controls the format of the JSON you are storing in Couchbase.
            </value>
        </member>
        <member name="P:Couchbase.Core.Serialization.DefaultSerializer.DeserializationSettings">
            <summary>
            Gets the incoming de-serializer settings; controls the format of the incoming JSON for de-serialization into POCOs.
            </summary>
            <value>
            The incoming serializer settings.
            </value>
        </member>
        <member name="P:Couchbase.Core.Serialization.DefaultSerializer.DeserializationOptions">
            <summary>
            Provides custom deserialization options.  Options not listed in <see cref="P:Couchbase.Core.Serialization.IExtendedTypeSerializer.SupportedDeserializationOptions"/>
            will be ignored.  If null, then defaults will be used.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Serialization.ICustomObjectCreator">
            <summary>
            Used to control type creation during deserialization.  For example, it can be used to create object proxies.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Serialization.ICustomObjectCreator.CanCreateObject(System.Type)">
            <summary>
            Determine if this creator can create a particular type.
            </summary>
            <param name="type">Type to test.</param>
            <returns>True if this creator can create a particular type.</returns>
            <remarks>Results of this method should be consistent for every call so that they can be cached.</remarks>
        </member>
        <member name="M:Couchbase.Core.Serialization.ICustomObjectCreator.CreateObject(System.Type)">
            <summary>
            Create an instance of a particular type with default values, ready to be populated by the deserializer.
            </summary>
            <param name="type">Type to create.</param>
            <returns>New instance of the type with default values, ready to be populated by the deserializer.</returns>
        </member>
        <member name="T:Couchbase.Core.Serialization.JsonNetCustomObjectCreatorWrapper">
            <summary>
            <see cref="T:Newtonsoft.Json.JsonConverter"/> that wraps an <see cref="T:Couchbase.Core.Serialization.ICustomObjectCreator"/> to support Json.Net deserialization.
            </summary>
            <remarks>
            Used by <see cref="T:Couchbase.Core.Serialization.DefaultSerializer"/> if an <see cref="T:Couchbase.Core.Serialization.ICustomObjectCreator"/> is supplied.
            </remarks>
        </member>
        <member name="T:Couchbase.Core.Serialization.SerializerFactory">
            <summary>
            A factory for creating <see cref="T:System.Func`1"/> factories.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Serialization.SerializerFactory.GetSerializer">
            <summary>
            Gets the <see cref="T:Couchbase.Core.Serialization.DefaultSerializer"/> serializer.
            </summary>
            <returns>A <see cref="T:System.Func`1"/> factory for creating <see cref="T:Couchbase.Core.Serialization.ITypeSerializer"/> objects.</returns>
        </member>
        <member name="M:Couchbase.Core.Serialization.SerializerFactory.GetSerializer(Couchbase.Configuration.Client.ClientConfiguration,Couchbase.Configuration.Client.Providers.SerializerElement)">
            <summary>
            Gets the serializer.
            </summary>
            <param name="config">The current <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/> instance.</param>
            <param name="element">The <see cref="T:Couchbase.Configuration.Client.Providers.SerializerElement"/> that is defined in the App.Config.</param>
            <returns>A <see cref="T:System.Func`1"/> factory for creating <see cref="T:Couchbase.Core.Serialization.ITypeSerializer"/> objects.</returns>
        </member>
        <member name="T:Couchbase.Core.Serialization.SupportedDeserializationOptions">
            <summary>
            Supplied by <see cref="T:Couchbase.Core.Serialization.IExtendedTypeSerializer"/> to define which deserialization options it supports.
            </summary>
            <remarks>Intended to help support backwards compatibility as new deserialization options are added in the future.</remarks>
        </member>
        <member name="P:Couchbase.Core.Serialization.SupportedDeserializationOptions.CustomObjectCreator">
            <summary>
            If true, the <see cref="T:Couchbase.Core.Serialization.IExtendedTypeSerializer"/> supports <see cref="P:Couchbase.Core.Serialization.DeserializationOptions.CustomObjectCreator"/>.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Serialization.DeserializationOptions">
            <summary>
            Options to control deserialization process in an <see cref="T:Couchbase.Core.Serialization.IExtendedTypeSerializer"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Serialization.DeserializationOptions.HasSettings">
            <summary>
            Returns true if any custom options are set
            </summary>
        </member>
        <member name="P:Couchbase.Core.Serialization.DeserializationOptions.CustomObjectCreator">
            <summary>
            <see cref="T:Couchbase.Core.Serialization.ICustomObjectCreator"/> to use when creating objects during deserialization.
            Null will uses the <see cref="T:Couchbase.Core.Serialization.IExtendedTypeSerializer"/> defaults for type creation.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Transcoders.ITypeTranscoder">
            <summary>
            An interface for providing transcoder implementations.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Transcoders.ITypeTranscoder.GetFormat``1(``0)">
            <summary>
            Get data formatting based on the generic type and/or the actual value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to be formatted.</param>
            <returns>Flags used to format value written to operation payload.</returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.ITypeTranscoder.Encode``1(``0,Couchbase.IO.Operations.Flags,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Encodes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value of the key to encode.</param>
            <param name="flags">The flags used for decoding the response.</param>
            <param name="opcode"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.ITypeTranscoder.Decode``1(System.ArraySegment{System.Byte},System.Int32,System.Int32,Couchbase.IO.Operations.Flags,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Decodes the specified buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer representing the value of the key to decode.</param>
            <param name="offset">The offset to start reading at.</param>
            <param name="length">The length to read from the buffer.</param>
            <param name="flags">The flags used to encode the payload.</param>
            <param name="opcode"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.ITypeTranscoder.Decode``1(System.Byte[],System.Int32,System.Int32,Couchbase.IO.Operations.Flags,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Decodes the specified buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <param name="flags">The flags used for decoding the payload.</param>
            <param name="opcode"></param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Core.Transcoders.ITypeTranscoder.Serializer">
            <summary>
            Gets or sets the serializer used by the <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/> implementation.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Transcoders.ITypeTranscoder.Converter">
            <summary>
            Gets or sets the byte converter used by used by the <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/> implementation.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Transcoders.DefaultTranscoder">
            <summary>
            Provides the default implementation for <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/> interface.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.Encode``1(``0,Couchbase.IO.Operations.Flags,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Encodes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value of the key to encode.</param>
            <param name="flags">The flags used for decoding the response.</param>
            <param name="opcode"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.Encode``1(``0,System.TypeCode,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Encodes the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="typeCode">Type to use for encoding</param>
            <param name="opcode"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.Decode``1(System.Byte[],System.Int32,System.Int32,Couchbase.IO.Operations.Flags,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Decodes the specified buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <param name="flags">The flags used for decoding the payload.</param>
            <param name="opcode"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.Decode``1(System.Byte[],System.Int32,System.Int32,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Decodes the specified buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.DeserializeAsJson``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deserializes as json.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.Decode``1(System.ArraySegment{System.Byte},System.Int32,System.Int32,Couchbase.IO.Operations.Flags,Couchbase.IO.Operations.OperationCode)">
            <summary>
            Decodes the specified buffer.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer">The buffer representing the value of the key to decode.</param>
            <param name="offset">The offset to start reading at.</param>
            <param name="length">The length to read from the buffer.</param>
            <param name="flags">The flags used to encode the payload.</param>
            <param name="opcode"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.SerializeAsJson(System.Object)">
            <summary>
            Serializes as json.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.DecodeString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes the specified buffer as string.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.DecodeChar(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes the specified buffer as char.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.DefaultTranscoder.DecodeBinary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes the binary.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Core.Transcoders.DefaultTranscoder.Serializer">
            <summary>
            Gets or sets the serializer used by the <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/> implementation.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Transcoders.DefaultTranscoder.Converter">
            <summary>
            Gets or sets the byte converter used by used by the <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/> implementation.
            </summary>
        </member>
        <member name="T:Couchbase.Cluster">
            <summary>
            The client interface to a Couchbase Server Cluster.
            </summary>
        </member>
        <member name="T:Couchbase.Core.ICluster">
            <summary>
            The client interface to a Couchbase Server Cluster.
            </summary>
        </member>
        <member name="M:Couchbase.Core.ICluster.OpenBucket">
            <summary>
            Opens a Couchbase Bucket instance.
            </summary>
            <returns>The default bucket for a Couchbase Cluster.</returns>
        </member>
        <member name="M:Couchbase.Core.ICluster.OpenBucket(System.String,System.String)">
            <summary>
            Opens a Couchbase Bucket instance.
            </summary>
            <param name="bucketname">The name of the bucket to open.</param>
            <param name="password">The password to use if it's a SASL authenticated bucket.</param>
            <returns>A object that implements IBucket.</returns>
        </member>
        <member name="M:Couchbase.Core.ICluster.OpenBucket(System.String)">
            <summary>
            Opens a Couchbase Bucket instance.
            </summary>
            <param name="bucketname">The name of the bucket to open.</param>
            <returns>A object that implements IBucket.</returns>
        </member>
        <member name="M:Couchbase.Core.ICluster.CloseBucket(Couchbase.Core.IBucket)">
            <summary>
            Closes a Couchbase Bucket Instance.
            </summary>
            <param name="bucket">The object that implements IBucket that will be closed.</param>
        </member>
        <member name="M:Couchbase.Core.ICluster.CreateManager(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Couchbase.Management.IClusterManager"/> object that uses the current <see cref="T:Couchbase.Core.ICluster"/> configuration settings.
            </summary>
            <returns>A <see cref="T:Couchbase.Management.IClusterManager"/> instance that uses the current <see cref="T:Couchbase.Core.ICluster"/> configuration settings. </returns>
        </member>
        <member name="M:Couchbase.Core.ICluster.IsOpen(System.String)">
            <summary>
            Returns a response indicating whether or not the <see cref="T:Couchbase.Core.IBucket"/> instance has been opened and this <see cref="T:Couchbase.Cluster"/> instance is observing it.
            </summary>
            <param name="bucketName">The name of the bucket to check.</param>
            <returns>True if the <see cref="T:Couchbase.Core.IBucket"/> has been opened and the cluster is registered as an observer.</returns>
        </member>
        <member name="P:Couchbase.Core.ICluster.Info">
            <summary>
            Returns an object which implements IClusterInfo. This object contains various server
            stats and information.
            </summary>
        </member>
        <member name="M:Couchbase.Cluster.#ctor">
            <summary>
            Ctor for creating Cluster instance using the default settings.
            </summary>
            <remarks>
            This is the default configuration and will attempt to bootstrap off of localhost.
            </remarks>
        </member>
        <member name="M:Couchbase.Cluster.#ctor(System.String)">
            <summary>
            Ctor for creating Cluster instance using an App.Config or Web.config.
            </summary>
            <param name="configurationSectionName">The name of the configuration section to use.</param>
            <remarks>Note that <see cref="T:Couchbase.Configuration.Client.Providers.CouchbaseClientSection"/> needs include the sectionGroup name as well: "couchbaseSection/couchbase" </remarks>
        </member>
        <member name="M:Couchbase.Cluster.#ctor(Couchbase.Configuration.Client.ClientConfiguration)">
            <summary>
            Ctor for creating Cluster instance with a custom <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/> configuration.
            </summary>
            <param name="configuration">The ClientCOnfiguration to use for initialization.</param>
        </member>
        <member name="M:Couchbase.Cluster.#ctor(Couchbase.Configuration.Client.ClientConfiguration,Couchbase.Core.IClusterController)">
            <summary>
            Ctor for creating Cluster instance.
            </summary>
            <param name="configuration">The ClientCOnfiguration to use for initialization.</param>
            <param name="clusterController">The ClusterManager instance use.</param>
            <remarks>
            This overload is primarly added for testing.
            </remarks>
        </member>
        <member name="M:Couchbase.Cluster.OpenBucket">
            <summary>
            Opens the default bucket associated with a Couchbase Cluster.
            </summary>
            <returns>An instance which implements the IBucket interface with the
            default buckets configuration.</returns>
            <remarks>Use Cluster.CloseBucket(bucket) to release resources associated with a Bucket.</remarks>
        </member>
        <member name="M:Couchbase.Cluster.OpenBucket(System.String,System.String)">
            <summary>
            Creates a connection to a specific SASL authenticated Couchbase Bucket.
            </summary>
            <param name="bucketname">The Couchbase Bucket to connect to.</param>
            <param name="password">The SASL password to use.</param>
            <returns>An instance which implements the IBucket interface.</returns>
            <remarks>Use Cluster.CloseBucket(bucket) to release resources associated with a Bucket.</remarks>
        </member>
        <member name="M:Couchbase.Cluster.OpenBucket(System.String)">
            <summary>
            Creates a connection to a non-SASL Couchbase bucket.
            </summary>
            <param name="bucketname">The Couchbase Bucket to connect to.</param>
            <returns>An instance which implements the IBucket interface.</returns>
            <remarks>
            Use Cluster.CloseBucket(bucket) to release resources associated with a Bucket.
            </remarks>
        </member>
        <member name="M:Couchbase.Cluster.CloseBucket(Couchbase.Core.IBucket)">
            <summary>
            Closes and releases all resources associated with a Couchbase bucket.
            </summary>
            <param name="bucket">The Bucket to close.</param>
        </member>
        <member name="M:Couchbase.Cluster.CreateManager(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Couchbase.Management.IClusterManager"/> object that uses the current <see cref="T:Couchbase.Core.ICluster"/> configuration settings.
            </summary>
            <returns>A <see cref="T:Couchbase.Management.IClusterManager"/> instance that uses the current <see cref="T:Couchbase.Core.ICluster"/> configuration settings. </returns>
        </member>
        <member name="M:Couchbase.Cluster.IsOpen(System.String)">
            <summary>
            Returns a response indicating whether or not the <see cref="T:Couchbase.Core.IBucket"/> instance has been opened and this <see cref="T:Couchbase.Cluster"/> instance is observing it.
            </summary>
            <param name="bucketName">The name of the bucket to check.</param>
            <returns>True if the <see cref="T:Couchbase.Core.IBucket"/> has been opened and the cluster is registered as an observer.</returns>
        </member>
        <member name="M:Couchbase.Cluster.Dispose">
            <summary>
            Closes and releases all internal resources.
            </summary>
        </member>
        <member name="M:Couchbase.Cluster.Dispose(System.Boolean)">
            <summary>
            Disposes the Cluster object, calling GC.SuppressFinalize(this) if it's not called on the finalization thread.
            </summary>
            <param name="disposing">True if called by an explicit call to Dispose by the consuming application; false if called via finalization.</param>
        </member>
        <member name="P:Couchbase.Cluster.Info">
            <summary>
            Returns an object representing cluster status information.
            </summary>
        </member>
        <member name="P:Couchbase.Cluster.Configuration">
            <summary>
            The current client configuration being used by the <see cref="T:Couchbase.Cluster"/> object.
            Set this by passing in a <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/> object into <see cref="!:Initialize(ClientConfiguration)"/> or by
            providing a <see cref="T:Couchbase.Configuration.Client.Providers.CouchbaseClientSection"/> in your App.config or Web.config and calling <see cref="!:Initialize(string)"/>
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Client.BucketConfiguration">
            <summary>
            The configuration setttings for a Bucket.
            </summary>
            <remarks>The default setting use 127.0.0.1 and port 11210.</remarks>
        </member>
        <member name="M:Couchbase.Configuration.Client.BucketConfiguration.#ctor">
            <summary>
            Default CTOR for localhost.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.Client.BucketConfiguration.UpdateOperationLifespanDefault(System.UInt32)">
            <summary>
            Conditionally change the DefaultOperationLifespan property value, if and only if it wasn't already changed
            from its default value.
            <remarks>Calling this method doesn't count as a changed from default value. That is, calling it twice will return true both times.</remarks>
            </summary>
            <param name="newDefault">The new value to be affected to DefaultOperationLifespan if it hasn't been changed since construction.</param>
            <returns>true if the value was applied, false otherwise (denoting that a custom value had already been applied)</returns>
        </member>
        <member name="M:Couchbase.Configuration.Client.BucketConfiguration.GetEndPoint">
            <summary>
            Gets a random <see cref="T:System.Net.IPEndPoint"/> from the Servers list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.UseEnhancedDurability">
            <summary>
            Gets or sets a value indicating whether to use enhanced durability if the
            Couchbase server version supports it; if it's not supported the client will use
            Observe for Endure operations.
            </summary>
            <value>
            <c>true</c> to use enhanced durability; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.UseSsl">
            <summary>
            Set to true to enable Secure Socket Layer (SSL) encryption of all traffic between the client and the server.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.Servers">
            <summary>
            A list of IP's to bootstrap off of.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.Port">
            <summary>
            The Memcached port to use.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.BucketName">
            <summary>
            The name of the Bucket to connect to.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.Password">
            <summary>
            The password to use if it's a SASL authenticated Bucket.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.Username">
            <summary>
            The username for connecting to a Bucket.
            </summary>
            <remarks>The <see cref="P:Couchbase.Configuration.Client.BucketConfiguration.BucketName"/> is used for as the username for connecting to Buckets.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.PoolConfiguration">
            <summary>
            The <see cref="P:Couchbase.Configuration.Client.BucketConfiguration.PoolConfiguration"/> used to create the <see cref="T:Couchbase.IO.IConnectionPool"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.ObserveTimeout">
            <summary>
            Gets or Sets the max time an observe operation will take before timing out.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.ObserveInterval">
            <summary>
            Gets or Sets the interval between each observe attempt.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.BucketConfiguration.DefaultOperationLifespan">
            <summary>
            The maximum time allowed for an operation to live, in milliseconds, for this specific bucket.
            <remarks>Default value is 2500 (2.5 seconds)</remarks>
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Client.ClientConfiguration">
            <summary>
            Represents the configuration of a <see cref="T:Couchbase.Cluster"/> object. The <see cref="T:Couchbase.Cluster"/> object
            will use this class to construct it's internals.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.Client.ClientConfiguration.#ctor(Couchbase.Configuration.Client.Providers.CouchbaseClientSection)">
            <summary>
            For synchronization with App.config or Web.configs.
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:Couchbase.Configuration.Client.ClientConfiguration.UpdateBootstrapList(Couchbase.Configuration.Server.Serialization.IBucketConfig)">
            <summary>
            Updates the internal bootstrap url with the new list from a server configuration.
            </summary>
            <param name="bucketConfig">A new server configuration</param>
        </member>
        <member name="M:Couchbase.Configuration.Client.ClientConfiguration.HasServersChanged">
            <summary>
            Checks for mutations of the Server collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.QueryFailedThreshold">
            <summary>
            Gets or sets the query failed threshold for a <see cref="T:System.Uri"/> before it is flagged as "un-responsive".
            Once flagged as "un-responsive", no requests will be sent to that node until a server re-config has occurred
            and the <see cref="T:System.Uri"/> is added back into the pool. This is so the client will not send requests to
            a server node which is unresponsive.
            </summary>
            <remarks>The default is 2.</remarks>
            <value>
            The query failed threshold.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.QueryRequestTimeout">
            <summary>
            Gets or sets the timeout for a N1QL query request; this correlates to the client-side timeout.
            Server-side timeouts are configured per request using the <see cref="M:Couchbase.N1QL.QueryRequest.Timeout(System.TimeSpan)"/> method.
            </summary>
            <value>
            The query request timeout.
            </value>
            <remarks>The value must be positive.</remarks>
            <remarks>The default client-side value is 75 seconds.</remarks>
            <remarks>The default server-side timeout is zero; this is an infinite timeout.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.NodeAvailableCheckInterval">
            <summary>
            If the client detects that a node has gone offline it will check for connectivity at this interval.
            </summary>
            <remarks>The default is 1000ms.</remarks>
            <value>
            The node available check interval.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.EnableTcpKeepAlives">
            <summary>
            Gets or sets a value indicating whether enable TCP keep alives.
            </summary>
            <value>
            <c>true</c> to enable TCP keep alives; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.TcpKeepAliveTime">
            <summary>
            Specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent.
            </summary>
            <value>
            The TCP keep alive time in milliseconds.
            </value>
            <remarks>The default is 2hrs.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.TcpKeepAliveInterval">
            <summary>
            Specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.
            </summary>
            <value>
            The TCP keep alive interval in milliseconds..
            </value>
            <remarks>The default is 1 second.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.IOErrorThreshold">
            <summary>
            Gets or sets the count of IO errors within a specific interval defined by the value of <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.IOErrorCheckInterval"/>.
            If the threshold is reached within the interval for a particular node, all keys mapped to that node the SDK will fail
            with a <see cref="T:Couchbase.Core.NodeUnavailableException"/> in the <see cref="!:IOperationResult.Exception"/> field.. The node will be flagged as "dead"
            and will try to reconnect, if connectivity is reached, the node will continue to process requests.
            </summary>
            <value>
            The io error count threshold.
            </value>
            <remarks>
            The purpose of this is to distinguish between a remote host being unreachable or temporay network glitch.
            </remarks>
            <remarks>The default is 10 errors.</remarks>
            <remarks>The lower limit is 0; the default will apply if this is exceeded.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.IOErrorCheckInterval">
            <summary>
            Gets or sets the interval that the <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.IOErrorThreshold"/> will be checked. If the threshold is reached
            within the interval for a particular node, all keys mapped to that node the SDK will fail with a <see cref="T:Couchbase.Core.NodeUnavailableException"/>
            in the <see cref="!:IOperationResult.Exception"/> field. The node will be flagged as "dead" and will try to reconnect,
            if connectivity is reached, the node will continue to process requests.
            </summary>
            <value>
            The io error check interval.
            </value>
            <remarks>The purpose of this is to distinguish between a remote host being unreachable or temporay network glitch.</remarks>
            <remarks>The default is 500ms; use milliseconds to override this: 1000 = 1 second.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.Transcoder">
            <summary>
            Gets or sets the transcoder factory.
            </summary>
            <value>
            The transcoder factory.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.Converter">
            <summary>
            Gets or sets the converter.
            </summary>
            <value>
            The converter.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.Serializer">
            <summary>
            Gets or sets the serializer.
            </summary>
            <value>
            The serializer.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.Timer">
            <summary>
            A factory for creating <see cref="T:Couchbase.Core.Diagnostics.IOperationTimer"/>'s.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.UseSsl">
            <summary>
            Set to true to use Secure Socket Layers (SSL) to encrypt traffic between the client and Couchbase server.
            </summary>
            <remarks>Requires the SSL certificate to be stored in the local Certificate Authority to enable SSL.</remarks>
            <remarks>This feature is only supported by Couchbase Cluster 3.0 and greater.</remarks>
            <remarks>Set to true to require all buckets to use SSL.</remarks>
            <remarks>Set to false and then set UseSSL at the individual Bucket level to use SSL on specific buckets.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.SslPort">
            <summary>
            Overrides the default and sets the SSL port to use for Key/Value operations using the Binary Memcached protocol.
            </summary>
            <remarks>The default and suggested port for SSL is 11207.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>Requires UseSSL to be true.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom SSL port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.ApiPort">
            <summary>
            Overrides the default and sets the Views REST API to use a custom port.
            </summary>
            <remarks>The default and suggested port for the Views REST API is 8092.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Views REST API port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.MgmtPort">
            <summary>
            Overrides the default and sets the Couchbase Management REST API to use a custom port.
            </summary>
            <remarks>The default and suggested port for the Views REST API is 8091.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Management REST API port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.DirectPort">
            <summary>
            Overrides the default and sets the direct port to use for Key/Value operations using the Binary Memcached protocol.
            </summary>
            <remarks>The default and suggested direct port is 11210.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom direct port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.HttpsMgmtPort">
            <summary>
            Overrides the default and sets the Couchbase Management REST API to use a custom SSL port.
            </summary>
            <remarks>The default and suggested port for SSL is 18091.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>Requires UseSSL to be true.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Couchbase Management REST API SSL port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.HttpsApiPort">
            <summary>
            Overrides the default and sets the Couchbase Views REST API to use a custom SSL port.
            </summary>
            <remarks>The default and suggested port for SSL is 18092.</remarks>
            <remarks>Only set if you wish to override the default behavior.</remarks>
            <remarks>Requires UseSSL to be true.</remarks>
            <remarks>The Couchbase Server/Cluster needs to be configured to use a custom Couchbase Views REST API SSL port.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.ObserveTimeout">
            <summary>
            Gets or Sets the max time an observe operation will take before timing out.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.ObserveInterval">
            <summary>
            Gets or Sets the interval between each observe attempt.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.MaxViewRetries">
            <summary>
            The upper limit for the number of times a View request that has failed will be retried.
            </summary>
            <remarks>Note that not all failures are re-tried</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.ViewHardTimeout">
            <summary>
            The maximum amount of time that a View will request take before timing out. Note this includes time for retries, etc.
            </summary>
            <remarks>Default is 30000ms</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.Servers">
            <summary>
            A list of hosts used to bootstrap from.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.SerializationSettings">
            <summary>
            The incoming serializer settings for the JSON serializer.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.DeserializationSettings">
            <summary>
            The outgoing serializer settings for the JSON serializer.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.BucketConfigs">
            <summary>
            A map of <see cref="T:Couchbase.Configuration.Client.BucketConfiguration"/>s and their names.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.PoolConfiguration">
            <summary>
            The configuration used for creating the <see cref="T:Couchbase.IO.IConnectionPool"/> for each <see cref="T:Couchbase.Core.IBucket"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.HeartbeatConfigInterval">
            <summary>
            Sets the interval for configuration "heartbeat" checks, which check for changes in the configuration that are otherwise undetected by the client.
            </summary>
            <remarks>The default is 10000ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.ViewRequestTimeout">
            <summary>
            Sets the timeout for each HTTP View request.
            </summary>
            <remarks>The default is 75000ms.</remarks>
            <remarks>The value must be greater than Zero.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.DefaultConnectionLimit">
            <summary>
            Gets or sets the maximum number of concurrent connections allowed by a ServicePoint object used for making View and N1QL requests.
            </summary>
            <remarks>http://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.defaultconnectionlimit.aspx</remarks>
            <remarks>The default is set to 5 connections.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.MaxServicePointIdleTime">
            <summary>
            Gets or sets the maximum idle time of a ServicePoint object used for making View and N1QL requests.
            </summary>
            <remarks>http://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.maxservicepointidletime.aspx</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.Expect100Continue">
            <summary>
            Gets or sets a Boolean value that determines whether 100-Continue behavior is used.
            </summary>
            <remarks>The default is false, which overrides the <see cref="T:System.Net.ServicePointManager"/>'s default of true.</remarks>
            <remarks>http://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.expect100continue%28v=vs.110%29.aspx</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.EnableConfigHeartBeat">
            <summary>
            Enables configuration "heartbeat" checks.
            </summary>
            <remarks>The default is "enabled" or true.</remarks>
            <remarks>The interval of the configuration hearbeat check is controlled by the <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.HeartbeatConfigInterval"/> property.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.EnableOperationTiming">
            <summary>
            Writes the elasped time for an operation to the log appender Disabled by default.
            </summary>
            <remarks>When enabled will cause severe performance degradation.</remarks>
            <remarks>Requires a <see cref="T:Common.Logging.LogLevel"/>of DEBUG to be enabled as well.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.BufferSize">
            <summary>
            The size of each buffer to allocate per TCP connection for sending and recieving Memcached operations
            </summary>
            <remarks>The default is 16K</remarks>
            <remarks>The total buffer size is BufferSize * PoolConfiguration.MaxSize</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.ClientConfiguration.DefaultOperationLifespan">
            <summary>
            The maximum time allowed for an operation to live, in milliseconds. This servers as the default
            for buckets where the lifespan is not explicitely specified.
            </summary>
            <remarks>The default is 2500 (2.5 seconds)</remarks>
            <remarks>When getting the value, prefer looking in <see cref="P:Couchbase.Configuration.Client.BucketConfiguration.DefaultOperationLifespan"/>
            since it will inherit and possibly overwrite this value.</remarks>
        </member>
        <member name="T:Couchbase.Configuration.Client.PoolConfiguration">
            <summary>
            Represents a object used to construct the internal <see cref="T:Couchbase.IO.IConnectionPool"/> object for a <see cref="T:Couchbase.Core.IBucket"/> instance.
            </summary>
            <remarks>Default configuration:
            MaxSize = 2;
            MinSize = 1;
            WaitTimeout = 2500;
            ReceiveTimeout = 2500;
            ShutdownTimeout = 10000;
            OperationTimeout = 2500;
            MaxConnectionAcquireCount = 5;
            SendTimeout = 15000;
            ConnectTimeout = 10000;
            </remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.UseEnhancedDurability">
            <summary>
            Gets or sets a value indicating whether to use enhanced durability if the
            Couchbase server version supports it; if it's not supported the client will use
            Observe for Endure operations.
            </summary>
            <value>
            <c>true</c> to use enhanced durability; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.EnableTcpKeepAlives">
            <summary>
            Gets or sets a value indicating whether enable TCP keep alives.
            </summary>
            <value>
            <c>true</c> to enable TCP keep alives; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.TcpKeepAliveTime">
            <summary>
            Specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent.
            </summary>
            <value>
            The TCP keep alive time in milliseconds.
            </value>
            <remarks>The default is 2hrs.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.TcpKeepAliveInterval">
            <summary>
            Specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.
            </summary>
            <value>
            The TCP keep alive interval in milliseconds..
            </value>
            <remarks>The default is 1 second.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.MaxSize">
            <summary>
            The maximum number of connections to create.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.MinSize">
            <summary>
            The minimum number of connection to create.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.WaitTimeout">
            <summary>
            The amount of time a thread will wait for a <see cref="T:Couchbase.IO.IConnection"/> once the MaxSize of the pool has been reached.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.MaxAcquireIterationCount">
            <summary>
            The maximum number of iterations that a thread will wait for an available connection before throwing a <see cref="T:Couchbase.IO.ConnectionUnavailableException"/>.
            </summary>
            <remarks>The default is 5 iterations.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.ShutdownTimeout">
            <summary>
            Wait up to the <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.ShutdownTimeout"/> to send or recieve data before closing the <see cref="T:Couchbase.IO.IConnection"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.OperationTimeout">
            <summary>
            The amount of time to wait for a pending operation to complete before timing out.
            </summary>
            <remarks>Default is 2500ms</remarks>
            <remarks>Operations exceeding this timeout will return the following message: "Timed out"</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.UseSsl">
            <summary>
            Set to true to enable Secure Socket Layer (SSL) encryption of all traffic between the client and the server.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.SendTimeout">
            <summary>
            Cancels a pending operation if it does not complete in the time given and marks the connection as dead.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.ConnectTimeout">
            <summary>
            The amount time allotted for the client to establish a TCP connection with a server before failing
            </summary>
            <remarks>The default is 10000ms</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.MaxCloseAttempts">
            <summary>
            Gets or sets the maximum number of times the client will try to close a <see cref="T:Couchbase.IO.IConnection"/>
            if it's in use and <see cref="T:Couchbase.IO.IConnectionPool"/> has been disposed.
            </summary>
            <value>
            The maximum close attempts.
            </value>
            <remarks>The default is 5 attempts.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.CloseAttemptInterval">
            <summary>
            Gets or sets the interval between close attempts on a <see cref="T:Couchbase.IO.IConnection"/>
            if it's in use and <see cref="T:Couchbase.IO.IConnectionPool"/> has been disposed.
            </summary>
            <value>
            The close attempt interval.
            </value>
            <remarks>The default is 100ms.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.ClientConfiguration">
            <summary>
            References the top level <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.ClientConfiguration"/> object.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.EnableOperationTiming">
            <summary>
            Writes the elasped time for an operation to the log appender Disabled by default.
            </summary>
            <remarks>When enabled will cause severe performance degradation.</remarks>
            <remarks>Requires a <see cref="T:Common.Logging.LogLevel"/>of DEBUG to be enabled as well.</remarks>
        </member>
        <member name="P:Couchbase.Configuration.Client.PoolConfiguration.BufferSize">
            <summary>
            The size of each buffer to allocate per TCP connection for sending and recieving Memcached operations
            </summary>
            <remarks>The default is 16K</remarks>
            <remarks>The total buffer size is BufferSize * PoolConfiguration.MaxSize</remarks>
        </member>
        <member name="T:Couchbase.Configuration.CouchbaseConfigContext">
            <summary>
            Represents a configuration context for a Couchbase Bucket.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.ConfigContextBase">
            <summary>
            Base class for configuration contexts. The configuration context is a class which maintains the internal
            state of the cluster and communicats with configuration providers to ensure that the state is up-to-date.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.LoadConfig(Couchbase.Configuration.Server.Serialization.IBucketConfig,System.Boolean)">
            <summary>
            Loads the most updated configuration creating any resources as needed.
            </summary>
            <param name="bucketConfig">The latest <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/>
            that will drive the recreation if the configuration context.</param>
            <param name="force">True to force the reconfiguration.</param>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.LoadConfig">
            <summary>
            Loads the most updated configuration creating any resources as needed. The <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/>
            used by this method is passed into the CTOR.
            </summary>
            <remarks>This method should be called immediately after creation.</remarks>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.GetKeyMapper">
            <summary>
            Gets the <see cref="T:Couchbase.Core.IKeyMapper"/> instance associated with this <see cref="T:Couchbase.Configuration.IConfigInfo"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.GetServer">
            <summary>
            Gets a random server instance from the underlying <see cref="T:Couchbase.Core.IServer"/> collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.Dispose">
            <summary>
            Reclaims all resources and suppresses finalization.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.Dispose(System.Boolean)">
            <summary>
            Reclams all resources and optionally suppresses finalization.
            </summary>
            <param name="disposing">True to suppress finalization.</param>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.GetDataNode">
            <summary>
            Gets a data node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.GetQueryNode">
            <summary>
            Gets a query node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.GetIndexNode">
            <summary>
            Gets a index node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.GetViewNode">
            <summary>
            Gets a view node from the Servers collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.ConfigContextBase.InvalidateQueryCache">
            <summary>
            Invalidates and clears the query cache. This method can be used to explicitly clear the internal N1QL query cache. This cache will
            be filled with non-adhoc query statements (query plans) to speed up those subsequent executions. Triggering this method will wipe
            out the complete cache, which will not cause an interruption but rather all queries need to be re-prepared internally. This method
            is likely to be deprecated in the future once the server side query engine distributes its state throughout the cluster.
            </summary>
            <returns>
            An <see cref="T:System.Int32"/> representing the size of the cache before it was cleared.
            </returns>
        </member>
        <member name="P:Couchbase.Configuration.ConfigContextBase.SupportsEnhancedDurability">
            <summary>
            Gets a value indicating whether the server supports enhanced durability.
            </summary>
            <value>
            <c>true</c> if the server supports enhanced durability; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Configuration.ConfigContextBase.CreationTime">
            <summary>
            The time at which this configuration context has been created.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.ConfigContextBase.BucketConfig">
            <summary>
            The client configuration for a bucket.
            <remarks> See <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/> for details.</remarks>
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.ConfigContextBase.BucketName">
            <summary>
            The name of the Bucket that this configuration represents.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.ConfigContextBase.ClientConfig">
            <summary>
            The client configuration.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.ConfigContextBase.BucketType">
            <summary>
            The <see cref="T:Couchbase.Core.Buckets.BucketTypeEnum"/> that this configuration context is for.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.ConfigContextBase.NodeLocator">
            <summary>
            The <see cref="T:Couchbase.Core.Buckets.NodeLocatorEnum"/> that this configuration is using.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.CouchbaseConfigContext.LoadConfig(Couchbase.Configuration.Server.Serialization.IBucketConfig,System.Boolean)">
            <summary>
            Loads the most updated configuration creating any resources as needed.
            </summary>
            <param name="bucketConfig">The latest <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/>
            that will drive the recreation if the configuration context.</param>
            <param name="force">True to force the reconfiguration.</param>
        </member>
        <member name="M:Couchbase.Configuration.CouchbaseConfigContext.LoadConfig(Couchbase.IO.IOStrategy)">
            <exception cref="T:Couchbase.Configuration.CouchbaseBootstrapException">Condition.</exception>
        </member>
        <member name="M:Couchbase.Configuration.CouchbaseConfigContext.LoadConfig">
            <exception cref="T:Couchbase.Configuration.CouchbaseBootstrapException">Condition.</exception>
        </member>
        <member name="M:Couchbase.Configuration.CouchbaseConfigContext.UpdateServices(System.Collections.Generic.Dictionary{System.Net.IPAddress,Couchbase.Core.IServer})">
            <summary>
            Checks the server's list and identfies what services the node supports. Separate
            lists are created for each service type.
            </summary>
            <param name="servers">The servers.</param>
            <exception cref="T:Couchbase.Configuration.CouchbaseBootstrapException"></exception>
        </member>
        <member name="P:Couchbase.Configuration.CouchbaseConfigContext.QueryCache">
            <summary>
            Gets the query cache for the current instance. Each <see cref="T:Couchbase.Core.IBucket"/> implementation instance has it's own for caching query plans.
            </summary>
            <value>
            The query cache.
            </value>
        </member>
        <member name="T:Couchbase.Configuration.ConfigException">
            <summary>
            Generic exception thrown when a configuration cannot be bootstrapped or is the wrong type for the given bucket.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.ConfigObserverNotFoundException">
            <summary>
            Thrown when an observer for a given configuration cannot be found.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.ConfigNotFoundException">
            <summary>
            Thrown when a configuration does not exist within the provider.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Server.Providers.IConfigObserver">
            <summary>
            An interface for implementing classes which observe changes from configuration providers.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.IConfigObserver.NotifyConfigChanged(Couchbase.Configuration.IConfigInfo)">
            <summary>
            Notifies the observer that a configuration change has occured and it's internal state must be updated.
            </summary>
            <param name="configInfo"></param>
        </member>
        <member name="P:Couchbase.Configuration.Server.Providers.IConfigObserver.Name">
            <summary>
            The name of the observer - the Bucket's name.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Server.Providers.Streaming.AuthenticatingWebClient">
            <summary>
            Represents a WebClient capable of supporting SASL authentication.
            </summary>
        </member>
        <member name="P:Couchbase.Configuration.Server.Providers.Streaming.AuthenticatingWebClient.BucketName">
            <summary>
            The name of the Couchbase Bucket to authenticate against.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Server.Providers.Streaming.ConfigThreadState">
            <summary>
            Represents a long-lived comet style connection to an HTTP service.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.ConfigThreadState.GetSurrogateHost(System.Uri)">
            <summary>
                This is to support $HOST variable in the URI in _some_ cases
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.ConfigThreadState.ListenForConfigChanges">
            <summary>
            Starts the streaming connection to couchbase server that will
            listen for configuration changes and then update the client as needed.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Server.Providers.Streaming.HttpServerConfig">
            <summary>
            A configuration info class for supporting HTTP streaming provider.
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.Server.Providers.Streaming.HttpStreamingProvider">
            <summary>
            A comet style streaming HTTP connection provider for Couchbase configurations.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.HttpStreamingProvider.GetConfig(System.String,System.String)">
            <summary>
            Starts the HTTP streaming connection to the Couchbase Server and gets the latest configuration for a SASL authenticated Bucket.
            </summary>
            <param name="bucketName">The name of the Couchbase Bucket.</param>
            <param name="password">The SASL password used to connect to the Bucket.</param>
            <returns>A <see cref="T:Couchbase.Configuration.IConfigInfo"/> object representing the latest configuration.</returns>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.HttpStreamingProvider.RegisterObserver(Couchbase.Configuration.Server.Providers.IConfigObserver)">
            <summary>
            Registers an <see cref="T:Couchbase.Configuration.Server.Providers.IConfigObserver"/> object, which is notified when a configuration changes.
            </summary>
            <param name="observer">The <see cref="T:Couchbase.Configuration.Server.Providers.IConfigObserver"/> that will be notified when a configuration
            update occurs. These are Memcached and Couchbase Buckets.</param>
            <returns>True if the observer was registered without failure.</returns>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.HttpStreamingProvider.ConfigChangedHandler(Couchbase.Configuration.Server.Serialization.IBucketConfig)">
            <summary>
            Raised when a configuration update has occurred. All observers will be notified of the changes.
            </summary>
            <param name="bucketConfig">The new configuration.</param>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.HttpStreamingProvider.CreateConfigInfo(Couchbase.Configuration.Server.Serialization.IBucketConfig)">
            <summary>
            Creates a Bucket specific <see cref="T:Couchbase.Configuration.IConfigInfo"/> instance.
            </summary>
            <param name="bucketConfig">The <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/> to use for client configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.HttpStreamingProvider.StartProvider(System.String,System.String)">
            <summary>
            Starts the HTTP streaming connection.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:Couchbase.Configuration.Server.Providers.Streaming.HttpStreamingProvider.UnRegisterObserver(Couchbase.Configuration.Server.Providers.IConfigObserver)">
            <summary>
            Un-registers an observer, which is either a Couchbase or Memcached Bucket, from the Provider.
            </summary>
            <param name="observer"></param>
        </member>
        <member name="T:Couchbase.Configuration.Server.Providers.IConfigPublisher">
            <summary>
            Represents an interface for publishing configuration changes in a push manner.
            <remarks>Used for CCCP based configuration updates.</remarks>
            </summary>
        </member>
        <member name="T:Couchbase.Configuration.MemcachedConfigContext">
            <summary>
            Represents a configuration context for a Memcached Bucket.
            </summary>
        </member>
        <member name="M:Couchbase.Configuration.MemcachedConfigContext.GetEndPoint(Couchbase.Configuration.Server.Serialization.Node,Couchbase.Configuration.Server.Serialization.IBucketConfig)">
            <summary>
            Gets an <see cref="T:System.Net.IPEndPoint"/> instance for a given Node and <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig"/>
            </summary>
            <param name="node"></param>
            <param name="bucketConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Configuration.MemcachedConfigContext.LoadConfig(Couchbase.Configuration.Server.Serialization.IBucketConfig,System.Boolean)">
            <summary>
            Loads the current configuration setting the internal state of this configuration context.
            </summary>
            <param name="bucketConfig"></param>
            <param name="force">True to force a reconfiguration.</param>
            <exception cref="T:Couchbase.Configuration.CouchbaseBootstrapException">Condition.</exception>
        </member>
        <member name="M:Couchbase.Configuration.MemcachedConfigContext.LoadConfig">
            <exception cref="T:Couchbase.Configuration.CouchbaseBootstrapException">Condition.</exception>
        </member>
        <member name="T:Couchbase.Core.Buckets.BucketTypeEnum">
            <summary>
            Represents the Bucket types supported by Couchbase Server
            </summary>
        </member>
        <member name="F:Couchbase.Core.Buckets.BucketTypeEnum.Couchbase">
            <summary>
            A persistent Bucket supporting replication and rebalancing.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Buckets.BucketTypeEnum.Memcached">
            <summary>
            A Bucket supporting in-memory Key/Value operations.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Transcoders.TranscoderFactory">
            <summary>
            A factory for creating <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/> functories.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Transcoders.TranscoderFactory.GetTranscoder(Couchbase.Configuration.Client.ClientConfiguration)">
            <summary>
            Gets a Func for creating <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/> transcoders.
            </summary>
            <param name="config">The current <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/>.</param>
            <returns>A <see cref="T:System.Func`1"/> for creating <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/>s.</returns>
        </member>
        <member name="M:Couchbase.Core.Transcoders.TranscoderFactory.GetTranscoder(Couchbase.Configuration.Client.ClientConfiguration,Couchbase.Configuration.Client.Providers.TranscoderElement)">
            <summary>
            Gets a Func for creating <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/> transcoders.
            </summary>
            <param name="config">The current <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/>.</param>
            <param name="element">The <see cref="T:Couchbase.Configuration.Client.Providers.TranscoderElement"/> from the App.Config or Web.Config.</param>
            <returns>A <see cref="T:System.Func`1"/> for creating <see cref="T:Couchbase.Core.Transcoders.ITypeTranscoder"/>s.</returns>
        </member>
        <member name="T:Couchbase.CouchbaseBucket">
            <summary>
            Represents a persistent Couchbase Bucket and can be used for performing CRUD operations on documents,
            querying Views and executing N1QL queries.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IBucket">
            <summary>
            Represents a Couchbase Bucket object for performing CRUD operations on Documents and Key/Value pairs, View
            queries, and executing N1QL queries.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IBucket.Exists(System.String)">
            <summary>
            Checks for the existance of a given key.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key exists.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ExistsAsync(System.String)">
            <summary>
            Checks for the existance of a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to check.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ObserveAsync(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Performs 'observe' on a given key to ensure that it's durability requirements with respect to persistence and replication are satisfied asynchronously.
            </summary>
            <param name="key">The key to 'observe'.</param>
            <param name="cas">The 'Check and Set' or CAS value for the key.</param>
            <param name="deletion">True if the operation performed is a 'remove' operation.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> value indicating if the durability requirement were or were not met.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Observe(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Performs 'observe' on a given key to ensure that it's durability requirements with respect to persistence and replication are satisfied.
            </summary>
            <param name="key">The key to 'observe'.</param>
            <param name="cas">The 'Check and Set' or CAS value for the key.</param>
            <param name="deletion">True if the operation performed is a 'remove' operation.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An <see cref="T:Couchbase.IO.Operations.ObserveResponse"/> value indicating if the durability requirement were or were not met.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo"></param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.UInt64)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.UInt64)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(Couchbase.IDocument{``0})">
            <summary>
            Replaces a document if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Replaces a document if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Replaces a document if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Replaces a document if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt64)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt64)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(System.String,``0)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Insert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.InsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove``1(Couchbase.IDocument{``0})">
            <summary>
            Removes a document from the database.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Removes a document from the database.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document from the database.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.String)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync(System.String)">
            <summary>
            Asynchronously removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.String,System.UInt64)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync(System.String,System.UInt64)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.String,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync(System.String,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.Collections.Generic.IList{System.String})">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Touch(System.String,System.TimeSpan)">
            <summary>
            Updates the expiration a key without modifying or returning it's value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with no value.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.TouchAsync(System.String,System.TimeSpan)">
            <summary>
            Updates the expiration a key without modifying or returning it's value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetAndTouch``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a value by key and additionally updates the expiry with a new value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> with the key's value.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetAndTouchAsync``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a value by key and additionally updates the expiry with a new value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetAndTouchDocument``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a document by key and additionally updates the expiry with a new value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IDocumentResult`1"/> with the key's document.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetAndTouchDocumentAsync``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a document by key and additionally updates the expiry with a new value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetDocument``1(System.String)">
            <summary>
            Gets a document by it's given id.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="id">The documents primary key.</param>
            <returns>An <see cref="T:Couchbase.IDocumentResult`1"/> object containing the document if it's found and any other operation specific info.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetDocumentAsync``1(System.String)">
            <summary>
            Gets a document by it's given id as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="id">The documents primary key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Get``1(System.String)">
            <summary>
            Gets value for a given key
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="key">The key to use as a lookup.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetAsync``1(System.String)">
            <summary>
            Gets a Task that can be awaited on for a given Key and value as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value object to be retrieved.</typeparam>
            <param name="key">The unique Key to use to lookup the value.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetFromReplica``1(System.String)">
            <summary>
            Returns a value for a
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetFromReplicaAsync``1(System.String)">
            <summary>
            Gets a value for key and checks it's replicas as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Get``1(System.Collections.Generic.IList{System.String})">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetWithLock``1(System.String,System.UInt32)">
            <summary>
            Gets a document and locks it for a specified time period.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> with the value.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetWithLockAsync``1(System.String,System.UInt32)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetWithLock``1(System.String,System.TimeSpan)">
            <summary>
            Gets a document and locks it for a specified time period.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> with the value.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.GetWithLockAsync``1(System.String,System.TimeSpan)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Unlock(System.String,System.UInt64)">
            <summary>
            Unlocks a key that was locked with <see cref="M:Couchbase.Core.IBucket.GetWithLock``1(System.String,System.UInt32)"/>.
            </summary>
            <param name="key">The key of the document to unlock.</param>
            <param name="cas">The 'check and set' value to use as a comparison</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.UnlockAsync(System.String,System.UInt64)">
            <summary>
            Unlocks a key that was locked with <see cref="M:Couchbase.Core.IBucket.GetWithLock``1(System.String,System.UInt32)"/> as an asynchronous operation.
            </summary>
            <param name="key">The key of the document to unlock.</param>
            <param name="cas">The 'check and set' value to use as a comparison</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Increment(System.String)">
            <summary>
            Increments the value of a key by one. If the key doesn't exist, it will be created
            and seeded with 1.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.IncrementAsync(System.String)">
            <summary>
            Increments the value of a key by one as an asynchronous operation. If the key doesn't exist, it will be created.
            and seeded with 1.
            </summary>
            <param name="key"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>/// <returns></returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Increment(System.String,System.UInt64)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.IncrementAsync(System.String,System.UInt64)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Increment(System.String,System.UInt64,System.UInt64)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.IncrementAsync(System.String,System.UInt64,System.UInt64)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Increment(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>&gt;
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Increment(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Decrement(System.String)">
            <summary>
            Decrements the value of a key by one. If the key doesn't exist, it will be created
            and seeded with 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.DecrementAsync(System.String)">
            <summary>
            Decrements the value of a key by one as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Decrement(System.String,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.DecrementAsync(System.String,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Decrement(System.String,System.UInt64,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.DecrementAsync(System.String,System.UInt64,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Decrement(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Decrement(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Append(System.String,System.String)">
            <summary>
            Appends a value to a give key.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.AppendAsync(System.String,System.String)">
            <summary>
            Appends a value to a give key as an asynchronous operation.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Append(System.String,System.Byte[])">
            <summary>
            Appends a value to a give key.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.AppendAsync(System.String,System.Byte[])">
            <summary>
            Appends a value to a give key as an asynchronous operation.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Prepend(System.String,System.String)">
            <summary>
            Prepends a value to a give key.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.PrependAsync(System.String,System.String)">
            <summary>
            Prepends a value to a give key as an asynchronous operation.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Prepend(System.String,System.Byte[])">
            <summary>
            Prepends a value to a give key.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.PrependAsync(System.String,System.Byte[])">
            <summary>
            Prepends a value to a give key as an asynchronous operation.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.Query``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Executes a View query and returns the result.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> used to generate the results.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.Views.IViewResult{T}"/> Type with the results of the query.</returns>
            <remarks>Use one of the IBucket.CreateQuery overloads to generate the query.</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.QueryAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Asynchronously Executes a View query and returns the result.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> used to generate the results.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> with the T a <see cref="T:Couchbase.Views.IViewResult`1"/> instance.</returns>
            <remarks>Note this implementation is experimental and subject to change in future release!</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Query``1(System.String)">
            <summary>
            Executes a N1QL query against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">An ad-hoc N1QL query.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.QueryAsync``1(System.String)">
            <summary>
            Asynchronously executes a N1QL query against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">An ad-hoc N1QL query.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> with the T a <see cref="T:Couchbase.N1QL.IQueryResult`1"/> instance.</returns>
            <remarks>Note this implementation is uncommitted/experimental and subject to change in future release!</remarks>
        </member>
        <member name="M:Couchbase.Core.IBucket.Query``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Executes a N1QL statement or prepared statement via a <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="queryRequest">An <see cref="T:Couchbase.N1QL.IQueryRequest"/> object that contains a statement or a prepared statement and the appropriate properties.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.QueryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Asynchronously executes a N1QL statement or prepared statement via a <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="queryRequest">An <see cref="T:Couchbase.N1QL.IQueryRequest"/> object that contains a statement or a prepared statement and the appropriate properties.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.CreateQuery(System.String,System.String)">
            <summary>
            Creates an instance of an object that implements <see cref="T:Couchbase.Views.IViewQuery"/>, which targets a given bucket, design document and a published view.
            </summary>
            <param name="designDoc"></param>
            <param name="view"></param>
            <returns>An <see cref="T:Couchbase.Views.IViewQuery"/> which can have more filters and options applied to it.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.CreateQuery(System.String,System.String,System.Boolean)">
            <summary>
            Creates an instance of an object that implements <see cref="T:Couchbase.Views.IViewQuery"/>, which targets a given bucket and design document.
            </summary>
            <param name="designdoc">The design document that the View belongs to.</param>
            <param name="view">The View to query.</param>
            <param name="development">True will execute on the development dataset.</param>
            <returns>An <see cref="T:Couchbase.Views.ViewQuery"/> which can have more filters and options applied to it.</returns>
        </member>
        <member name="M:Couchbase.Core.IBucket.CreateManager(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Couchbase.Management.IBucketManager"/> instance for managing buckets.
            </summary>
            <param name="username">The administrators username</param>
            <param name="password">The administrators username</param>
            <returns>A <see cref="T:Couchbase.Management.IBucketManager"/> instance.</returns>
        </member>
        <member name="P:Couchbase.Core.IBucket.Name">
            <summary>
            The name of the Couchbase Bucket. This is visible from the Couchbase Server Management Console.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IBucket.BucketType">
            <summary>
            Returns type of the bucket (either Couchbase or Memcached)
            </summary>
        </member>
        <member name="P:Couchbase.Core.IBucket.IsSecure">
            <summary>
            Returns true if bucket is using SSL encryption between the client and the server.
            </summary>
            <remarks>If the server is not available (<see cref="T:Couchbase.ServerUnavailableException"/>), will default to false.</remarks>
        </member>
        <member name="P:Couchbase.Core.IBucket.SupportsEnhancedDurability">
            <summary>
            Gets a value indicating whether enhanced durability is enabled.
            </summary>
            <value>
            <c>true</c> if the server supports enhanced durability and it is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IBucket.Configuration">
            <summary>
            Gets the configuration for the bucket
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="M:Couchbase.IRefCountable.AddRef">
            <summary>
            Increments the reference counter for this <see cref="T:Couchbase.Core.IBucket"/> instance.
            </summary>
            <returns>The current count of all <see cref="T:Couchbase.Core.IBucket"/> references.</returns>
        </member>
        <member name="M:Couchbase.IRefCountable.Release">
            <summary>
            Decrements the reference counter and calls <see cref="M:System.IDisposable.Dispose"/> if the count is zero.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Couchbase.CouchbaseBucket.RefCounts">
            <summary>
            Used for reference counting instances so that <see cref="M:System.IDisposable.Dispose"/> is only called by the last instance.
            </summary>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.#ctor(Couchbase.Core.Buckets.IRequestExecuter,Couchbase.IO.Converters.IByteConverter,Couchbase.Core.Transcoders.ITypeTranscoder)">
            <summary>
            For unit testing purposes only
            </summary>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Couchbase#Configuration#Server#Providers#IConfigObserver#NotifyConfigChanged(Couchbase.Configuration.IConfigInfo)">
            <summary>
            Called when a configuration update has occurred from the server.
            </summary>
            <param name="configInfo">The new configuration</param>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Append(System.String,System.String)">
            <summary>
            Appends a value to a give key.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Exists(System.String)">
            <summary>
            Checks for the existance of a given key.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key exists.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket._Exists(System.String)">
            <summary>
             Check for existence of a given key
            </summary>
            <param name="key">The key to check.</param>
            <returns> Returns the <see cref="T:Couchbase.IOperationResult"/> object containing Value as true if the key exists</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ExistsAsync(System.String)">
            <summary>
            Checks for the existance of a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to check.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Couchbase.CouchbaseBucket._ExistsAsync(System.String)" -->
        <member name="M:Couchbase.CouchbaseBucket.Append(System.String,System.Byte[])">
            <summary>
            Appends a value to a give key.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.AppendAsync(System.String,System.String)">
            <summary>
            Appends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to append to.</param>
            <param name="value">The value to append to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.AppendAsync(System.String,System.Byte[])">
            <summary>
            Appends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to append to.</param>
            <param name="value">The value to append to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Touch(System.String,System.TimeSpan)">
            <summary>
            Updates the expiration a key without modifying or returning it's value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with no value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.TouchAsync(System.String,System.TimeSpan)">
            <summary>
            Updates the expiration a key without modifying or returning it's value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.CreateQuery(System.String,System.String)">
            <summary>
            Creates an instance of an object that implements <see cref="T:Couchbase.Views.IViewQuery"/>, which targets a given bucket, design document and view.
            </summary>
            <param name="designDoc"></param>
            <param name="view"></param>
            <returns>An <see cref="T:Couchbase.Views.IViewQuery"/> which can have more filters and options applied to it.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.CreateQuery(System.String,System.String,System.Boolean)">
            <summary>
            Creates an instance of an object that implements <see cref="T:Couchbase.Views.IViewQuery"/>, which targets a given bucket and design document.
            </summary>
            <param name="designdoc">The design document that the View belongs to.</param>
            <param name="viewname"></param>
            <param name="development">True will execute on the development dataset.</param>
            &gt;
            <returns>An <see cref="T:Couchbase.Views.IViewQuery"/> which can have more filters and options applied to it.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Decrement(System.String)">
            <summary>
            Decrements the value of a key by one. If the key doesn't exist, it will be created
            and seeded with 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Decrement(System.String,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Decrement(System.String,System.UInt64,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Decrement(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Decrement(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <returns>
            If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.DecrementAsync(System.String)">
            <summary>
            Decrements the value of a key by one as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.DecrementAsync(System.String,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.DecrementAsync(System.String,System.UInt64,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Dispose">
            <summary>
            Closes this <see cref="T:Couchbase.CouchbaseBucket"/> instance, shutting down and releasing all resources,
            removing it from it's <see cref="T:Couchbase.Core.ClusterController"/> instance.
            </summary>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Equals(System.Object)">
            <summary>
            Compares for equality which is the Name of the Bucket and it's <see cref="T:Couchbase.Core.ClusterController"/> instance.
            </summary>
            <param name="obj">The other <see cref="T:Couchbase.CouchbaseBucket"/> reference to compare against.</param>
            <returns>True if they have the same name and <see cref="T:Couchbase.Core.ClusterController"/> instance.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Get``1(System.String)">
            <summary>
            Gets a value for a given key.
            </summary>
            <typeparam name="T">The Type of the value object to be retrieved.</typeparam>
            <param name="key">The unique Key to use to lookup the value.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Get``1(System.Collections.Generic.IList{System.String})">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <param name="options"></param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <param name="options"></param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetAsync``1(System.String)">
            <summary>
             Gets a value for a given key as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="key">The documents primary key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetDocument``1(System.String)">
            <summary>
            Gets a document by it's given id.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="id">The documents primary key.</param>
            <returns>An <see cref="T:Couchbase.IResult`1"/> object containing the document if it's found and any other operation specific info.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetDocumentAsync``1(System.String)">
            <summary>
            Gets a document by it's given id asynchronously.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="id">The documents primary key.</param>
            <returns>An <see cref="T:Couchbase.IDocumentResult`1"/> object containing the document if it's found and any other operation specific info.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetFromReplica``1(System.String)">
            <summary>
            Gets a value for a key by checking each replica.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value being retrieved.</typeparam>
            <param name="key">The key of the value to retrieve.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the results of the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetFromReplicaAsync``1(System.String)">
            <summary>
            Gets a value for a key by checking each replica asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the value being retrieved.</typeparam>
            <param name="key">The key of the value to retrieve.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetHashCode">
            <summary>
            Gets the hashcode for the CouchbaseBucket instance.
            </summary>
            <returns>The hashcode of the instance</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetWithLock``1(System.String,System.UInt32)">
            <summary>
            Gets a document and locks it for a specified time period.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> with the value.</returns>
            <remarks>Expirations exceeding 30 seconds will be defaulted to 15 seconds.</remarks>
            <remarks>An expiration of 0 is treated as an infinite.</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetWithLock``1(System.String,System.TimeSpan)">
            <summary>
            Gets a document and locks it for a specified time period.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult`1"/> with the value.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetWithLockAsync``1(System.String,System.UInt32)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetWithLockAsync``1(System.String,System.TimeSpan)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Increment(System.String)">
            <summary>
            Increments the value of a key by one. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Increment(System.String,System.UInt64)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Increment(System.String,System.UInt64,System.UInt64)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Increment(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Increment(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <returns>
            If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.IncrementAsync(System.String)">
            <summary>
            Increments the value of a key by one as an asynchronous operation. If the key doesn't exist, it will be created.
            and seeded with 1.
            </summary>
            <param name="key"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>/// <returns></returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.IncrementAsync(System.String,System.UInt64)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.IncrementAsync(System.String,System.UInt64,System.UInt64)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>&gt;
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(System.String,``0)">
            <summary>
            Inserts a document into the database using a given key, failing if the key exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts a document into the database using a given key, failing if the key exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database using a given key, failing if the key exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Insert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns>A Task that can be awaited on for it's <see cref="T:Couchbase.IOperationResult`1"/> value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo"></param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Couchbase#IRefCountable#AddRef">
            <summary>
            Increments the reference counter for this <see cref="T:Couchbase.Core.IBucket"/> instance.
            </summary>
            <returns>The current count of all <see cref="T:Couchbase.Core.IBucket"/> references.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Couchbase#IRefCountable#Release">
            <summary>
            Decrements the reference counter and calls <see cref="M:System.IDisposable.Dispose"/> if the count is zero.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Observe(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Performs 'observe' on a given key to ensure that it's durability requirements with respect to persistence and replication are satisfied.
            </summary>
            <param name="key">The key to 'observe'.</param>
            <param name="cas">The 'Check and Set' or CAS value for the key.</param>
            <param name="deletion">True if the operation performed is a 'remove' operation.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>A <see cref="T:Couchbase.IO.Operations.ObserveResponse"/> value indicating if the durability requirement were or were not met.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ObserveAsync(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Performs 'observe' on a given key to ensure that it's durability requirements with respect to persistence and replication are satisfied asynchronously.
            </summary>
            <param name="key">The key to 'observe'.</param>
            <param name="cas">The 'Check and Set' or CAS value for the key.</param>
            <param name="deletion">True if the operation performed is a 'remove' operation.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1"/> value indicating if the durability requirement were or were not met.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Prepend(System.String,System.String)">
            <summary>
            Prepends a value to a give key.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetAndTouch``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a value by key and additionally updates the expiry with a new value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> with the key's value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetAndTouchAsync``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a value by key and additionally updates the expiry with a new value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetAndTouchDocument``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a document by key and additionally updates the expiry with a new value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IDocumentResult`1"/> with the key's document.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.GetAndTouchDocumentAsync``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a document by key and additionally updates the expiry with a new value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Prepend(System.String,System.Byte[])">
            <summary>
            Prepends a value to a give key.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.PrependAsync(System.String,System.String)">
            <summary>
            Prepends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to Prepend to.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.PrependAsync(System.String,System.Byte[])">
            <summary>
            Prepends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to Prepend to.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Query``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Executes a View query and returns the result.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> used to generate the results.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.Views.IViewResult{T}"/> Type with the results of the query.</returns>
            <remarks>Use one of the IBucket.CreateQuery overloads to generate the query.</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Query``1(System.String)">
            <summary>
            Executes a N1QL query against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">An ad-hoc N1QL query.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Query``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Executes a N1QL statement or prepared statement via a <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="queryRequest">An <see cref="T:Couchbase.N1QL.IQueryRequest"/> object that contains a statement or a prepared statement and the appropriate properties.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.QueryAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Asynchronously Executes a View query and returns the result.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> used to generate the results.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task`1"/> with the T a <see cref="T:Couchbase.Views.IViewResult`1"/> instance.</returns>
            <remarks>Note this implementation is experimental and subject to change in future release!</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.QueryAsync``1(System.String)">
            <summary>
            Asynchronously executes a N1QL query against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="query">An ad-hoc N1QL query.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
            <remarks>Note this implementation is uncommitted/experimental and subject to change in future release!</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.QueryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Asynchronously executes a N1QL statement or prepared statement via a <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase Cluster.
            </summary>
            <typeparam name="T">The Type to deserialze the results to. The dynamic Type works well.</typeparam>
            <param name="queryRequest">An <see cref="T:Couchbase.N1QL.IQueryRequest"/> object that contains a statement or a prepared statement and the appropriate properties.</param>
            <returns>An instance of an object that implements the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface; the results of the query.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove``1(Couchbase.IDocument{``0})">
            <summary>
            Removes a document from the database.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.String)">
            <summary>
            For a given key, removes a document from the database.
            </summary>
            <param name="key">The unique key for indexing.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.String,System.UInt64)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Removes a document from the database.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.String,Couchbase.ReplicateTo)">
            <summary>
            For a given key, removes a document from the database.
            </summary>
            <param name="key">The unique key for indexing.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            For a given key, removes a document from the database.
            </summary>
            <param name="key">The unique key for indexing.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document from the database.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            For a given key, removes a document from the database.
            </summary>
            <param name="key">The unique key for indexing.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.Collections.Generic.IList{System.String})">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.
            </returns>
            <remarks>
            Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.
            </returns>
            <remarks>
            Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync(System.String)">
            <summary>
            Asynchronously removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync(System.String,System.UInt64)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync(System.String,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(Couchbase.IDocument{``0})">
            <summary>
            Replaces a document if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0)">
            <summary>
            Replaces a value for a key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt64)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Replaces a document if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Replaces a value for a key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Replaces a value for a key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas"></param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a value for a key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Replaces a document if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Replaces a document if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt64)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Unlock(System.String,System.UInt64)">
            <summary>
            Unlocks a key that was locked with <see cref="M:Couchbase.CouchbaseBucket.GetWithLock``1(System.String,System.UInt32)"/>.
            </summary>
            <param name="key">The key of the document to unlock.</param>
            <param name="cas">The 'check and set' value to use as a comparison</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UnlockAsync(System.String,System.UInt64)">
            <summary>
            Unlocks a key that was locked with <see cref="M:Couchbase.CouchbaseBucket.GetWithLock``1(System.String,System.UInt32)"/> as an asynchronous operation.
            </summary>
            <param name="key">The key of the document to unlock.</param>
            <param name="cas">The 'check and set' value to use as a comparison</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.UInt64)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Couchbase.CouchbaseBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)" -->
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing <see cref="T:Couchbase.IResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo"></param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <param name="replicateTo"></param>
            <param name="persistTo"></param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.UInt64)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.InvalidateQueryCache">
            <summary>
            Invalidates and clears the query cache. This method can be used to explicitly clear the internal N1QL query cache. This cache will
            be filled with non-adhoc query statements (query plans) to speed up those subsequent executions. Triggering this method will wipe
            out the complete cache, which will not cause an interruption but rather all queries need to be re-prepared internally. This method
            is likely to be deprecated in the future once the server side query engine distributes its state throughout the cluster.
            </summary>
            <returns>
            An <see cref="T:System.Int32"/> representing the size of the cache before it was cleared.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.CheckForConfigUpdates``1(Couchbase.IOperationResult{``0},Couchbase.IO.Operations.IOperation)">
            <summary>
            Performs a CCCP request for the latest server configuration if the passed in operationResult
            results in a NMV response.
            </summary>
            <typeparam name="T">The Type parameter of the passed in operation.</typeparam>
            <param name="operationResult">The <see cref="T:Couchbase.IOperationResult`1"/> to check.</param>
            <param name="operation"></param>
            <returns>True if the operation should be retried again with the new config.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Dispose(System.Boolean)">
            <summary>
            Closes this <see cref="T:Couchbase.CouchbaseBucket"/> instance, shutting down and releasing all resources,
            removing it from it's <see cref="T:Couchbase.Core.ClusterController"/> instance.
            </summary>
            <param name="disposing">If true suppresses finalization.</param>
        </member>
        <member name="M:Couchbase.CouchbaseBucket.Equals(Couchbase.CouchbaseBucket)">
            <summary>
            Compares for equality which is the Name of the Bucket and it's <see cref="T:Couchbase.Core.ClusterController"/> instance.
            </summary>
            <param name="other">The other <see cref="T:Couchbase.CouchbaseBucket"/> reference to compare against.</param>
            <returns>True if they have the same name and <see cref="T:Couchbase.Core.ClusterController"/> instance.</returns>
        </member>
        <member name="P:Couchbase.CouchbaseBucket.BucketType">
            <summary>
            Returns type of the bucket. In this implementation the value is constant: Couchbase.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseBucket.Name">
            <summary>
            The Bucket's name. You can view this from the Couchbase Management Console.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseBucket.IsSecure">
            <summary>
            Returns true if bucket is using SSL encryption between the client and the server.
            </summary>
            <remarks>If the server is not available (<see cref="T:Couchbase.ServerUnavailableException"/>), will default to false.</remarks>
        </member>
        <member name="P:Couchbase.CouchbaseBucket.Couchbase#Core#IBucket#Configuration">
            <summary>
            Gets the configuration for the bucket
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:Couchbase.CouchbaseBucket.SupportsEnhancedDurability">
            <summary>
            Gets a value indicating whether enhanced durability is enabled.
            </summary>
            <value>
            <c>true</c> if the server supports enhanced durability and it is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Couchbase.Core.Buckets.KetamaKeyMapper">
            <summary>
            Provides a means of consistent hashing for keys used by Memcached Buckets.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.KetamaKeyMapper.MapKey(System.String)">
            <summary>
            Maps a Key to a node in the cluster.
            </summary>
            <param name="key">The key to map.</param>
            <returns>An object representing the node that the key was mapped to, which implements <see cref="T:Couchbase.Core.IMappedNode"/></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KetamaKeyMapper.FindIndex(System.Int64)">
            <summary>
            Finds the index of a node for a given key.
            </summary>
            <param name="key">The Key that the index belongs to.</param>
            <returns>The index of key - which is the location of the node that the key maps to.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KetamaKeyMapper.GetHash(System.String)">
            <summary>
            Creates a hash for a given Key.
            </summary>
            <param name="key">The Key to hash.</param>
            <returns>A hash of the Key.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.KetamaKeyMapper.Initialize">
            <summary>
            Initializes the mapping of hashes to nodes.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Buckets.KetamaNode">
            <summary>
            A cluster node mapped to a given Key.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.KetamaNode.LocatePrimary">
            <summary>
            Gets the primary node for a key.
            </summary>
            <returns>An object implementing the <see cref="T:Couchbase.Core.IServer"/> interface,
            which is the node that a key is mapped to within a cluster.</returns>
        </member>
        <member name="T:Couchbase.ClusterInfo">
            <summary>
            Client interface for getting information about the cluster. Since each version of the server can return a different
            range of data, for now this is only retrieved as plain JSON and it is up to the user to check what kind of data is
            available.
            </summary>
        </member>
        <member name="T:Couchbase.Core.IClusterInfo">
            <summary>
            Client interface for getting information about the cluster.
            </summary>
        </member>
        <member name="M:Couchbase.ClusterInfo.Pools">
            <summary>
            Returns the configuration of the <see cref="M:Couchbase.ClusterInfo.Pools">pools</see> in this cluster.
            The Pools should only be used in a readonly fashion!
            </summary>
            <returns>The pools configuration.</returns>
        </member>
        <member name="M:Couchbase.ClusterInfo.BucketConfigs">
            <summary>
            Returns the configuration of the <see cref="T:Couchbase.Configuration.Server.Serialization.IBucketConfig">buckets</see> in this cluster.
            The list can be modified but each IBucketConfiguration should only be used in a readonly fashion!
            </summary>
            <returns>The list of bucket configurations.</returns>
        </member>
        <member name="T:Couchbase.IDocumentResult">
            <summary>
            The return type for "document" centric operation requests that do not return documents - e.g. remove
            </summary>
        </member>
        <member name="T:Couchbase.IResult">
            <summary>
            Default interface for all operation return types.
            </summary>
        </member>
        <member name="M:Couchbase.IResult.ShouldRetry">
            <summary>
            If the response indicates the request is retryable, returns true.
            </summary>
            <returns></returns>
            <remarks>Intended for internal use only.</remarks>
        </member>
        <member name="P:Couchbase.IResult.Success">
            <summary>
            Returns true if the operation was succesful.
            </summary>
            <remarks>If Success is false, use the Message property to help determine the reason.</remarks>
        </member>
        <member name="P:Couchbase.IResult.Message">
            <summary>
            If the operation wasn't succesful, a message indicating why it was not succesful.
            </summary>
        </member>
        <member name="P:Couchbase.IResult.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="P:Couchbase.IDocumentResult.Status">
            <summary>
            The response status returned by the server when fulfilling the request.
            </summary>
        </member>
        <member name="T:Couchbase.IO.BufferAllocator">
            <summary>
            A buffer allocator for <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instances.
            </summary>
            <remarks>Used to reduce memory fragmentation do to pinning.</remarks>
            <remarks>Near identical to implementation found in MSDN documentation: http://msdn.microsoft.com/en-us/library/bb517542%28v=vs.110%29.aspx</remarks>
        </member>
        <member name="M:Couchbase.IO.BufferAllocator.SetBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Sets the buffer for a <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> object.
            </summary>
            <param name="eventArgs">The SAEA whose buffer will be set</param>
            <returns>True if the bucket was set.</returns>
        </member>
        <member name="M:Couchbase.IO.BufferAllocator.ReleaseBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Releases the buffer allocate to a <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instance.
            </summary>
            <param name="eventArgs">The SAEA instance the buffer will be released from.</param>
        </member>
        <member name="T:Couchbase.IO.IConnection">
            <summary>
            Represents a TCP connection to a Couchbase Server instance.
            </summary>
        </member>
        <member name="M:Couchbase.IO.IConnection.SendAsync(System.Byte[],System.Func{Couchbase.IO.SocketAsyncState,System.Threading.Tasks.Task})">
            <summary>
            Sends a request packet as an asynchronous operation.
            </summary>
            <param name="buffer">A memcached request buffer.</param>
            <param name="callback">The callback that will be fired after the operation is completed.</param>
        </member>
        <member name="M:Couchbase.IO.IConnection.Send(System.Byte[])">
            <summary>
            Sends a request packet as an asynchronous operation; waiting for the reponse.
            </summary>
            <param name="request">A memcached request buffer.</param>
            <returns>A memcached response packet.</returns>
        </member>
        <member name="M:Couchbase.IO.IConnection.MarkUsed(System.Boolean)">
            <summary>
            Marks this <see cref="T:Couchbase.IO.Connection"/> as used; meaning it cannot be disposed unless <see cref="P:Couchbase.IO.IConnection.InUse"/>
            is <c>false</c> or the <see cref="P:Couchbase.IO.IConnection.MaxCloseAttempts"/> has been reached.
            </summary>
            <param name="isUsed">if set to <c>true</c> [is used].</param>
        </member>
        <member name="M:Couchbase.IO.IConnection.CountdownToClose(System.UInt32)">
            <summary>
            Disposes this <see cref="T:Couchbase.IO.Connection"/> if <see cref="P:Couchbase.IO.IConnection.InUse"/> is <c>false</c>; otherwise
            it will wait for the interval and attempt again up until the <see cref="P:Couchbase.IO.IConnection.MaxCloseAttempts"/>
            threshold is met or <see cref="P:Couchbase.IO.IConnection.InUse"/> is <c>false</c>.
            </summary>
            <param name="interval">The interval to wait between close attempts.</param>
        </member>
        <member name="M:Couchbase.IO.IConnection.Authenticate">
            <summary>
            Authenticates this instance.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnection.Socket">
            <summary>
            The Socket used for IO.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnection.Identity">
            <summary>
            Unique identifier for this connection.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnection.IsAuthenticated">
            <summary>
            True if the connection has been SASL authenticated.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnection.IsSecure">
            <summary>
            True if connection is using SSL
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnection.EndPoint">
            <summary>
            Gets the remove hosts <see cref="P:Couchbase.IO.IConnection.EndPoint"/> that this <see cref="T:Couchbase.IO.Connection"/> is connected to.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Couchbase.IO.IConnection.IsDead">
            <summary>
            Gets or sets a value indicating whether this instance is dead.
            </summary>
            <value>
              <c>true</c> if this instance is dead; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.IConnection.InUse">
            <summary>
             Checks whether this <see cref="T:Couchbase.IO.Connection"/> is currently being used to execute a request.
            </summary>
            <value>
              <c>true</c> if if this <see cref="T:Couchbase.IO.Connection"/> is in use; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.IConnection.MaxCloseAttempts">
            <summary>
            Gets or sets the maximum times that the client will check the <see cref="P:Couchbase.IO.IConnection.InUse"/>
            property before closing the connection.
            </summary>
            <value>
            The maximum close attempts.
            </value>
        </member>
        <member name="P:Couchbase.IO.IConnection.CloseAttempts">
            <summary>
            Gets the number of close attempts that this <see cref="T:Couchbase.IO.Connection"/> has attemped.
            </summary>
            <value>
            The close attempts.
            </value>
        </member>
        <member name="P:Couchbase.IO.IConnection.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.IConnection.HasShutdown">
            <summary>
            Gets a value indicating whether this instance is shutting down.
            </summary>
            <value>
            <c>true</c> if this instance has shutdown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.IO.ConnectionBase.MarkUsed(System.Boolean)">
            <summary>
            Marks this <see cref="T:Couchbase.IO.Connection"/> as used; meaning it cannot be disposed unless <see cref="P:Couchbase.IO.ConnectionBase.InUse"/>
            is <c>false</c> or the <see cref="P:Couchbase.IO.ConnectionBase.MaxCloseAttempts"/> has been reached.
            </summary>
            <param name="isUsed">if set to <c>true</c> [is used].</param>
        </member>
        <member name="M:Couchbase.IO.ConnectionBase.CountdownToClose(System.UInt32)">
            <summary>
            Disposes this <see cref="T:Couchbase.IO.Connection"/> if <see cref="P:Couchbase.IO.ConnectionBase.InUse"/> is <c>false</c>; otherwise
            it will wait for the interval and attempt again up until the <see cref="P:Couchbase.IO.ConnectionBase.MaxCloseAttempts"/>
            threshold is met or <see cref="P:Couchbase.IO.ConnectionBase.InUse"/> is <c>false</c>.
            </summary>
            <param name="interval">The interval to wait between close attempts.</param>
        </member>
        <member name="M:Couchbase.IO.ConnectionBase.Dispose">
            <summary>
            Disposes the <see cref="T:System.Threading.Timer"/> used for checking whether or not the connection
            is in use and can be Disposed; <see cref="P:Couchbase.IO.ConnectionBase.InUse"/> will be set to <c>false</c>.
            </summary>
        </member>
        <member name="M:Couchbase.IO.ConnectionBase.Authenticate">
            <summary>
            Authenticates this instance.
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.Socket">
            <summary>
            The Socket used for IO.
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.Identity">
            <summary>
            Unique identifier for this connection.
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.IsAuthenticated">
            <summary>
            True if the connection has been SASL authenticated.
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.WriteBuffer">
            <summary>
            Gets or sets the write buffer.
            </summary>
            <value>
            The write buffer for building the request packet.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.IsSecure">
            <summary>
            True if connection is using SSL
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.EndPoint">
            <summary>
            Gets the remote hosts <see cref="P:Couchbase.IO.ConnectionBase.EndPoint"/> that this <see cref="T:Couchbase.IO.Connection"/> is connected to.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.IsDead">
            <summary>
            Gets or sets a value indicating whether this instance is dead.
            </summary>
            <value>
              <c>true</c> if this instance is dead; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.MaxCloseAttempts">
            <summary>
            Gets or sets the maximum times that the client will check the <see cref="P:Couchbase.IO.ConnectionBase.InUse"/>
            property before closing the connection.
            </summary>
            <value>
            The maximum close attempts.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.InUse">
            <summary>
             Checks whether this <see cref="T:Couchbase.IO.Connection"/> is currently being used to execute a request.
            </summary>
            <value>
              <c>true</c> if if this <see cref="T:Couchbase.IO.Connection"/> is in use; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.CloseAttempts">
            <summary>
            Gets the number of close attempts that this <see cref="T:Couchbase.IO.Connection"/> has attemped.
            </summary>
            <value>
            The close attempts.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.HasShutdown">
            <summary>
            Gets a value indicating whether this instance is shutting down.
            </summary>
            <value>
            <c>true</c> if this instance has shutdown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionBase.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.IO.Connection.Send(System.Byte[])">
            <summary>
            Sends a memcached operation as a buffer to a the server.
            </summary>
            <param name="buffer">A memcached request buffer</param>
            <returns>A memcached response buffer.</returns>
        </member>
        <member name="M:Couchbase.IO.Connection.OnCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Raised when an asynchronous operation is completed
            </summary>
            <param name="sender">The <see cref="T:System.Net.Sockets.Socket"/> which the asynchronous operation is associated with.</param>
            <param name="args"></param>
        </member>
        <member name="M:Couchbase.IO.Connection.Send(System.Net.Sockets.Socket,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Receives an asynchronous send operation
            </summary>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/> which the asynchronous operation is associated with.</param>
            <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> that is being used for the operation.</param>
        </member>
        <member name="M:Couchbase.IO.Connection.Receive(System.Net.Sockets.Socket,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Recieves an asynchronous recieve operation and loops until the response body has been read.
            </summary>
            <param name="socket">The <see cref="T:System.Net.Sockets.Socket"/> which the asynchronous operation is associated with.</param>
            <param name="e">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> that is being used for the operation.</param>
        </member>
        <member name="M:Couchbase.IO.Connection.Dispose">
            <summary>
            Disposes the underlying socket and other objects used by this instance.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Converters.ConverterFactory">
            <summary>
            A factory for creating <see cref="T:Couchbase.IO.Converters.IByteConverter"/> functories.
            </summary>
        </member>
        <member name="M:Couchbase.IO.Converters.ConverterFactory.GetConverter">
            <summary>
            Gets a <see cref="T:System.Func`1"/> factory for the default converter: <see cref="T:Couchbase.IO.Converters.DefaultConverter"/>
            </summary>
            <returns>A func for creating <see cref="T:Couchbase.IO.Converters.DefaultConverter"/> instances.</returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ConverterFactory.GetConverter(Couchbase.Configuration.Client.Providers.ConverterElement)">
            <summary>
            Gets a <see cref="T:System.Func`1"/> factory for custom <see cref="T:Couchbase.IO.Converters.IByteConverter"/>s conifgured in the App.Config.
            </summary>
            <param name="element">The <see cref="T:Couchbase.Configuration.Client.Providers.ConverterElement"/> from the App.Config.</param>
            <returns>A func for creating custom <see cref="T:Couchbase.IO.Converters.IByteConverter"/> instances.</returns>
        </member>
        <member name="T:Couchbase.Core.DocumentMutationLostException">
            <summary>
             The observed document was lost during a hard failover, because the document did not reach the replica in time.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse">
            <summary>
            Represents values sufficient to determine if a mutation has occurred and
            been mutated to a specific node, replicated to one or more replicas or has
            been persisted in one or more of the replicas.
            </summary>
        </member>
        <member name="M:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.Format">
            <summary>
            Gets or sets the format of the response. 1 indicates a failover, in which
            case the <see cref="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.OldVBucketUUID"/> and <see cref="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.LastSeqnoReceived"/> will
            be set.
            </summary>
            <value>
            The format of the response
            </value>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.VBucketId">
            <summary>
            Gets or sets the VBucketId identifier.
            </summary>
            <value>
            The VBucket identifier.
            </value>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.VBucketUUID">
            <summary>
            Gets or sets the VBucketUUID.
            </summary>
            <value>
            The vbucket UUID.
            </value>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.LastPersistedSeqno">
            <summary>
            Gets or sets the last persisted seqno.
            </summary>
            <value>
            The last persisted seqno.
            </value>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.CurrentSeqno">
            <summary>
            Gets or sets the current seqno.
            </summary>
            <value>
            The current seqno.
            </value>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.OldVBucketUUID">
            <summary>
            Gets or sets the vbucket uuid for this vbucket prior to the failover and is
            the same as the vbucket uuid passed in by the client in the observe_seqno request.
            </summary>
            <value>
            The old v bucket UUID.
            </value>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.LastSeqnoReceived">
            <summary>
            Gets or sets the last sequence number received in the old vbucket uuid.
            </summary>
            <value>
            The last seqno received.
            </value>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse.IsHardFailover">
            <summary>
            Gets or sets a value indicating whether a hard failover has occurred.
            </summary>
            <value>
            <c>true</c> if a hard failover has occurred; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Couchbase.IO.Operations.ServerFeatures">
            <summary>
            Features that they client negotiate on a per connection basis.
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.ServerFeatures.Datatype">
            <summary>
            For custom data types
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.ServerFeatures.TcpNoDelay">
            <summary>
            Enable TCP nodelay
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.ServerFeatures.MutationSeqno">
            <summary>
             Return the sequence number with every mutation
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.ServerFeatures.TcpDelay">
            <summary>
            Disable TCP nodelay
            </summary>
        </member>
        <member name="T:Couchbase.IO.Operations.MutationOperationBase">
            <summary>
            Represents an abstract base class for mutation operations (PROTOCOL_BINARY_CMD_SET, DELETE,REPLACE, ADD,
            APPEND, PREPEND, INCR, DECR, SET_WITH_META, DEL_WITH_META) and supports <see cref="!:OperationBase&lt;&gt;.MutationToken"/>'s.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Couchbase.IO.Operations.MutationOperationBase.ReadExtras(System.Byte[])">
            <summary>
            Reads the VBucketUUID and Sequence Number from  the extras if the instance has a <see cref="T:Couchbase.Core.VBucket"/> -
            only persistent Couchbase buckets that use VBucket Hashing support mutation tokens.
            </summary>
            <param name="buffer">The memcached response buffer.</param>
        </member>
        <member name="T:Couchbase.IO.Operations.MutationOperationBase`1">
            <summary>
            Represents an abstract base class for mutation operations (PROTOCOL_BINARY_CMD_SET, DELETE,REPLACE, ADD,
            APPEND, PREPEND, INCR, DECR, SET_WITH_META, DEL_WITH_META) and supports <see cref="!:OperationBase&lt;&gt;.MutationToken"/>'s.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Couchbase.IO.Operations.MutationOperationBase`1.ReadExtras(System.Byte[])">
            <summary>
            Reads the VBucketUUID and Sequence Number from  the extras if the instance has a <see cref="T:Couchbase.Core.VBucket"/> -
            only persistent Couchbase buckets that use VBucket Hashing support mutation tokens.
            </summary>
            <param name="buffer">The memcached response buffer.</param>
        </member>
        <member name="M:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno.Write">
            <summary>
            Writes this instance into a memcached packet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno.GetValue">
            <summary>
            Gets the value of the memecached response packet and converts it to a <see cref="T:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqnoResponse"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno.OperationCode">
            <summary>
            Gets the operation code for <see cref="P:Couchbase.IO.Operations.EnhancedDurability.ObserveSeqno.OperationCode"/>
            </summary>
            <value>
            The operation code.
            </value>
        </member>
        <member name="T:Couchbase.Core.ReplicaNotConfiguredException">
            <summary>
            This exception is thrown when the given operation targeting a specific replica is not fulfillable because the
            replica is not configured (for example replica 2 is asked for, but only 1 is configured).
            </summary>
        </member>
        <member name="P:Couchbase.IO.SocketAsyncState.Status">
            <summary>
            Represents a response status that has originated in within the client.
            The purpose is to handle client side errors
            </summary>
        </member>
        <member name="T:Couchbase.Management.BucketSettings">
            <summary>
            Consolidates the setting for configuring a Bucket on a Couchbase server.
            <remarks>Defaults are equivalent to the defaults of Couchbase Management Console when creating a Bucket.</remarks>
            </summary>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.Name">
            <summary>
            Gets or sets the name of the bucket
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.RamQuota">
            <summary>
            Gets or sets the RAM quota in megabytes. The default is 100.
            </summary>
            <value>
            The ram quota.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.BucketType">
            <summary>
            Gets or sets the type of bucket to be created. “Memcached” configures as Memcached bucket. “Couchbase” configures as Couchbase bucket
            </summary>
            <value>
            The type of the bucket.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.ReplicaNumber">
            <summary>
            Gets or sets the number of replicas of each document: minimum 0, maximum 3.
            </summary>
            <value>
            The replica number.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.AuthType">
            <summary>
            Gets or sets the type of the authentication to use.
            </summary>
            <value>
            The type of the authentication.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.IndexReplicas">
            <summary>
            Gets or sets a value indicating whether to index the replicas.
            </summary>
            <value>
              <c>true</c> if replicas are indexed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.FlushEnabled">
            <summary>
            Gets or sets a value indicating whether flush is enabled for the specified bucket.
            </summary>
            <value>
              <c>true</c> if flush is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.ParallelDbAndViewCompaction">
            <summary>
            Gets or sets a value indicating whether database and view files on disk can be compacted simultaneously.
            </summary>
            <value>
            <c>true</c> if true then database and view compaction will be parallelized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.SaslPassword">
            <summary>
            Gets or sets the password for SASL authentication. Required if SASL authentication has been enabled.
            </summary>
            <value>
            The sasl password.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.ThreadNumber">
            <summary>
            Gets or sets the number of concurrent readers and writers for the data bucket.
            </summary>
            <value>
            The thread number.
            </value>
        </member>
        <member name="P:Couchbase.Management.BucketSettings.Services">
            <summary>
            Gets or sets the services that will be enabled on the host.
            </summary>
            <value>
            The services: kv, query and/or data.
            </value>
        </member>
        <member name="T:Couchbase.Management.ClusterProvisioner">
            <summary>
            A convenience class for configuring a cluster from a set of provisioned Couchbase nodes.
            </summary>
            <remarks>This class is **EXPERIMENTAL** and subject to change in future releases.</remarks>
        </member>
        <member name="M:Couchbase.Management.ClusterProvisioner.ProvisionNodeAsync(System.String,Couchbase.Management.CouchbaseService[])">
            <summary>
            Provisions a Couchbase server node, adding it to an existing cluster.
            </summary>
            <param name="hostname">The hostname.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterProvisioner.ProvisionNodesAsync(Couchbase.Management.CouchbaseService[])">
            <summary>
            Provisions the nodes defined in the ClientConfiguration.Servers list, skipping
            the first node which is the entry point (EP).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterProvisioner.ProvisionEntryPointAsync(System.String,Couchbase.Management.BucketSettings,System.UInt32,System.UInt32)">
            <summary>
            Provisions the entry point Couchbase server node.
            </summary>
            <param name="hostname">The hostname.</param>
            <param name="defaultSettings">The default settings.</param>
            <param name="dataRamQuota">The data ram quota.</param>
            <param name="indexRamQuota">The index ram quota.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterProvisioner.ProvisionSampleBucketAsync(System.String,System.String)">
            <summary>
            Provisions a sample bucket: beer-sample, travel-sample or game-sim.
            </summary>
            <param name="bucketName">Name of the bucket.</param>
            <param name="hostname">The hostname.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterProvisioner.ProvisionBucketAsync(Couchbase.Management.BucketSettings,System.String)">
            <summary>
            Provisions a bucket adding it to a CouchbaseCluster
            </summary>
            <param name="bucketSettings">The bucket settings.</param>
            <param name="hostname">The hostname</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.MemcachedBucket">
            <summary>
            Represents an in-memory bucket for storing Key/Value pairs. Most often used as a distributed cache.
            </summary>
        </member>
        <member name="F:Couchbase.MemcachedBucket.RefCounts">
            <summary>
            Used for reference counting instances so that <see cref="M:System.IDisposable.Dispose"/> is only called by the last instance.
            </summary>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Couchbase#Configuration#Server#Providers#IConfigObserver#NotifyConfigChanged(Couchbase.Configuration.IConfigInfo)">
            <summary>
            Called when a configuration update has occurred from the server.
            </summary>
            <param name="configInfo">The new configuration</param>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Exists(System.String)">
            <summary>
            Checks for the existance of a given key.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if the key exists.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ExistsAsync(System.String)">
            <summary>
            Checks for the existance of a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to check.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Touch(System.String,System.TimeSpan)">
            <summary>
            Updates the expiration a key without modifying or returning it's value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with no value.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.TouchAsync(System.String,System.TimeSpan)">
            <summary>
            Updates the expiration a key without modifying or returning it's value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into a Memcached Bucket on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds. See <see cref="T:Couchbase.Core.IBucket"/> doc section on TTL.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.String,``0,System.UInt64)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds. See <see cref="T:Couchbase.Core.IBucket"/> doc section on TTL.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Inserts or replaces a range of items into Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="items">A <see cref="T:System.Collections.Generic.IDictionary`2"/> of items to be stored in Couchbase.</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:Couchbase.IOperationResult"/> which for which each is the result of the individual operation.</returns>
            <remarks>An item is <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where K is a <see cref="T:System.String"/> and V is the <see cref="T:System.Type"/>of the value use wish to store.</remarks>
            <remarks>Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.</remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(Couchbase.IDocument{``0})">
            <summary>
            Replaces a document if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(System.String,``0,System.UInt64)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(System.String,``0)">
            <summary>
            Replaces a value for a key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(System.String,``0,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds. See <see cref="T:Couchbase.Core.IBucket"/> doc section on TTL.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Insert``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Insert``1(System.String,``0)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Insert``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds. See <see cref="T:Couchbase.Core.IBucket"/> doc section on TTL.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Insert``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Remove``1(Couchbase.IDocument{``0})">
            <summary>
            Removes a document from the database.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <returns>An object implementing <see cref="T:Couchbase.IDocumentResult`1"/> with information regarding the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Remove(System.String)">
            <summary>
            For a given key, removes a document from the database.
            </summary>
            <param name="key">The unique key for indexing.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Remove(System.String,System.UInt64)">
            <summary>
            Removes a document for a given key from the database.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Remove(System.Collections.Generic.IList{System.String})">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.
            </returns>
            <remarks>
            Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.
            </remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Removes a range of documents for a given set of keys
            </summary>
            <param name="keys">The keys to remove</param>
            <param name="options">A <see cref="T:System.Threading.Tasks.ParallelOptions"/> instance with the options for the given operation.</param>
            <param name="rangeSize">The size of each subrange</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.
            </returns>
            <remarks>
            Use the <see cref="T:System.Threading.Tasks.ParallelOptions"/> parameter to control the level of parallelism to use and/or to associate a <see cref="T:System.Threading.CancellationToken"/> with the operation.
            </remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetDocument``1(System.String)">
            <summary>
            Gets a document by it's given id.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="id">The documents primary key.</param>
            <returns>An <see cref="T:Couchbase.IDocumentResult`1"/> object containing the document if it's found and any other operation specific info.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Get``1(System.String)">
            <summary>
            Gets a value for a given key from a Memcached Bucket on a Couchbase Server.
            </summary>
            <typeparam name="T">The Type of the value object to be retrieved.</typeparam>
            <param name="key">The unique Key to use to lookup the value.</param>
            <returns>An object implementing the <see cref="T:Couchbase.IOperationResult`1"/>interface.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetAndTouch``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a value by key and additionally updates the expiry with a new value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> with the key's value.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetAndTouchAsync``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a value by key and additionally updates the expiry with a new value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetAndTouchDocument``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a document by key and additionally updates the expiry with a new value.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:Couchbase.IDocumentResult`1"/> with the key's document.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetAndTouchDocumentAsync``1(System.String,System.TimeSpan)">
            <summary>
            Retrieves a document by key and additionally updates the expiry with a new value as an asynchronous operation.
            </summary>
            <param name="key">The key to "touch".</param>
            <param name="expiration">The expiration to extend.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/>object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Get``1(System.Collections.Generic.IList{System.String})">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <param name="options"></param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Gets a range of values for a given set of keys
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned</typeparam>
            <param name="keys">The keys to get</param>
            <param name="options"></param>
            <param name="rangeSize"></param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the keys sent and the <see cref="T:Couchbase.IOperationResult`1"/> result.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Increment(System.String)">
            <summary>
            Increments the value of a key by one. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Increment(System.String,System.UInt64)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Increment(System.String,System.UInt64,System.UInt64)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Increment(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds. See <see cref="T:Couchbase.Core.IBucket"/> doc section on TTL.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Increment(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Increments the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <returns>
            If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Decrement(System.String)">
            <summary>
            Decrements the value of a key by one. If the key doesn't exist, it will be created
            and seeded with 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Decrement(System.String,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Decrement(System.String,System.UInt64,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Decrement(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds. See <see cref="T:Couchbase.Core.IBucket"/> doc section on TTL.</param>
            <returns>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Decrement(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Decrements the value of a key by the delta. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <returns>
            If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Append(System.String,System.String)">
            <summary>
            Appends a value to a give key.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Append(System.String,System.Byte[])">
            <summary>
            Appends a value to a give key.
            </summary>
            <param name="key">The key to append too.</param>
            <param name="value">The value to append to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Prepend(System.String,System.String)">
            <summary>
            Prepends a value to a give key.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Prepend(System.String,System.Byte[])">
            <summary>
            Prepends a value to a give key.
            </summary>
            <param name="key">The key to Prepend too.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts or replaces an existing JSON document into <see cref="T:Couchbase.Core.IBucket"/> on a Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be updated or inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(System.String,``0)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(System.String,``0,System.UInt64)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Inserts or replaces an existing document into Couchbase Server as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Replaces a document if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(System.String,``0)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(System.String,``0,System.UInt64)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces a document for a given key if it exists, otherwise fails as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.InsertAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Inserts a JSON document into the <see cref="T:Couchbase.Core.IBucket"/>failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type T value of the document to be inserted.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> JSON document to add to the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.InsertAsync``1(System.String,``0,System.UInt32)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key in seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <remarks>
            Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
        </member>
        <member name="M:Couchbase.MemcachedBucket.InsertAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            Inserts a document into the database for a given key, failing if it exists as an asynchronous operation.
            </summary>
            <typeparam name="T">The Type of the value to be inserted.</typeparam>
            <param name="key">The unique key for indexing.</param>
            <param name="value">The value for the key.</param>
            <param name="expiration">The time-to-live (ttl) for the key.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync``1(Couchbase.IDocument{``0})">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document from the database as an asynchronous operation.
            </summary>
            <typeparam name="T">The type T of the object.</typeparam>
            <param name="document">The <see cref="T:Couchbase.IDocument`1"/> to remove from the database.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync(System.String,System.UInt64)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync(System.String,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document for a given key from the database as an asynchronous operation.
            </summary>
            <param name="key">The key to remove from the database</param>
            <param name="cas">The CAS (Check and Set) value for optimistic concurrency.</param>
            <param name="replicateTo">The durability requirement for replication.</param>
            <param name="persistTo">The durability requirement for persistence.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetDocumentAsync``1(System.String)">
            <summary>
                Gets a document by it's given id asynchronously.
            </summary>
            <typeparam name="T">The type T to convert the value to.</typeparam>
            <param name="id">The documents primary key.</param>
            <returns>
             An <see cref="T:Couchbase.IDocumentResult`1"/> object containing the document if it's found and any other operation specific info.
            </returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetWithLockAsync``1(System.String,System.UInt32)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.GetWithLockAsync``1(System.String,System.TimeSpan)">
            <summary>
            Gets a document and locks it for a specified time period as an asynchronous operation.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values to be returned.</typeparam>
            <param name="key">The key of the document to retrieve.</param>
            <param name="expiration">The seconds until the document is unlocked. The default is 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.UnlockAsync(System.String,System.UInt64)">
            <summary>
            Unlocks a key that was locked with <see cref="M:Couchbase.MemcachedBucket.GetWithLock``1(System.String,System.UInt32)"/> as an asynchronous operation.
            </summary>
            <param name="key">The key of the document to unlock.</param>
            <param name="cas">The 'check and set' value to use as a comparison</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
            <exception cref="T:System.NotSupportedException">This method is only supported on Couchbase Bucket (persistent) types.</exception>
        </member>
        <member name="M:Couchbase.MemcachedBucket.IncrementAsync(System.String)">
            <summary>
            Increments the value of a key by one as an asynchronous operation. If the key doesn't exist, it will be created.
            and seeded with 1.
            </summary>
            <param name="key"></param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>/// <returns></returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.IncrementAsync(System.String,System.UInt64)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.IncrementAsync(System.String,System.UInt64,System.UInt64)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>&gt;
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Increments the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the incremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.DecrementAsync(System.String)">
            <summary>
            Decrements the value of a key by one as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.DecrementAsync(System.String,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.DecrementAsync(System.String,System.UInt64,System.UInt64)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter in seconds.</param>
            <remarks>Expirations over 30 * 24 * 60 * 60 (the amount of seconds in 30 days) are interpreted as a UNIX timestamp of the date at which the document expires.
            see <see href="http://docs.couchbase.com/couchbase-devguide-2.5/#about-document-expiration">documentation section about expiration</see>.
            </remarks>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Decrements the value of a key by the delta as an asynchronous operation. If the key doesn't exist, it will be created
            and seeded with the defaut initial value 1.
            </summary>
            <param name="key">The key to us for the counter.</param>
            <param name="delta">The number to increment the key by.</param>
            <param name="initial">The initial value to use. If the key doesn't exist, this value will returned.</param>
            <param name="expiration">The time-to-live (ttl) for the counter.</param>
            <remarks>If the key doesn't exist, the server will respond with the initial value. If not the decremented value will be returned.</remarks>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.AppendAsync(System.String,System.String)">
            <summary>
            Appends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to append to.</param>
            <param name="value">The value to append to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.AppendAsync(System.String,System.Byte[])">
            <summary>
            Appends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to append to.</param>
            <param name="value">The value to append to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.PrependAsync(System.String,System.String)">
            <summary>
            Prepends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to Prepend to.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.PrependAsync(System.String,System.Byte[])">
            <summary>
            Prepends a value to a given key as an asynchronous operation.
            </summary>
            <param name="key">The key to Prepend to.</param>
            <param name="value">The value to prepend to the key.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.AddRef">
            <summary>
            Increments the reference counter for this <see cref="T:Couchbase.Core.IBucket"/> instance.
            </summary>
            <returns>The current count of all <see cref="T:Couchbase.Core.IBucket"/> references.</returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Release">
            <summary>
            Decrements the reference counter and calls <see cref="M:System.IDisposable.Dispose"/> if the count is zero.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Dispose">
            <summary>
            Closes this <see cref="T:Couchbase.MemcachedBucket"/> instance, shutting down and releasing all resources,
            removing it from it's <see cref="T:Couchbase.Core.ClusterController"/> instance.
            </summary>
        </member>
        <member name="M:Couchbase.MemcachedBucket.Dispose(System.Boolean)">
            <summary>
            Closes this <see cref="T:Couchbase.MemcachedBucket"/> instance, shutting down and releasing all resources,
            removing it from it's <see cref="T:Couchbase.Core.ClusterController"/> instance.
            </summary>
            <param name="disposing">If true suppresses finalization.</param>
        </member>
        <member name="P:Couchbase.MemcachedBucket.Name">
            <summary>
            The Bucket's name. You can view this from the Couchbase Management Console.
            </summary>
        </member>
        <member name="P:Couchbase.MemcachedBucket.BucketType">
            <summary>
            Returns type of the bucket. In this implementation the value is constant: Memcached.
            </summary>
        </member>
        <member name="P:Couchbase.MemcachedBucket.IsSecure">
            <summary>
            Returns true if bucket is using SSL encryption between the client and the server.
            </summary>
            <remarks>If the server is not available (<see cref="T:Couchbase.ServerUnavailableException"/>), will default to false.</remarks>
        </member>
        <member name="P:Couchbase.MemcachedBucket.Couchbase#Core#IBucket#Configuration">
            <summary>
            Gets the configuration for the bucket
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:Couchbase.MemcachedBucket.SupportsEnhancedDurability">
            <summary>
            Gets a value indicating whether enhanced durability is enabled.
            </summary>
            <value>
            <c>true</c> if the server supports enhanced durability and it is enabled; otherwise, <c>false</c>.
            </value>
            <remarks>Note this will always be false for Memcached buckets.</remarks>
        </member>
        <member name="T:Couchbase.Core.Buckets.NodeLocatorEnum">
            <summary>
            Specifies the type of NodeLocator that a Couchbase Bucket uses.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Buckets.NodeLocatorEnum.VBucket">
            <summary>
            Used for persistent Couchbase Buckets.
            </summary>
        </member>
        <member name="F:Couchbase.Core.Buckets.NodeLocatorEnum.Ketama">
            <summary>
            Used for in-memory Memcached Buckets.
            </summary>
        </member>
        <member name="T:Couchbase.Core.Buckets.VBucketKeyMapper">
            <summary>
            Provides a means of mapping keys to nodes within a Couchbase Server and a Couchbase Bucket.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Buckets.VBucketKeyMapper.MapKey(System.String)">
            <summary>
            Maps a given Key to it's node in a Couchbase Cluster.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.VBucketKeyMapper.CreateVBucketMap">
            <summary>
            Creates a mapping of VBuckets to nodes.
            </summary>
            <returns>A mapping of indexes and Vbuckets.</returns>
        </member>
        <member name="M:Couchbase.Core.Buckets.VBucketKeyMapper.CreateVBucketMapForwards">
            <summary>
            Creates a mapping of VBuckets to nodes.
            </summary>
            <returns>A mapping of indexes and Vbuckets.</returns>
        </member>
        <member name="P:Couchbase.Core.Buckets.VBucketKeyMapper.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Couchbase.Core.IVBucket"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:Couchbase.Core.IVBucket"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.ClusterController.Info">
            <summary>
            Retrieve Information for this cluster, see <see cref="P:Couchbase.Core.ICluster.Info">ICluster.Info</see>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.ClusterController.IsObserving(System.String)">
            <summary>
            Returns a boolean indicating whether or not the bucket has been opened with this cluster instance.
            </summary>
            <param name="bucketName">The name of the bucket.</param>
            <returns>True if the bucket exists</returns>
        </member>
        <member name="T:Couchbase.Core.InitializationException">
            <summary>
            Thrown if Couchbase.Cluster.Initialize() is not called before calling Couchbase.Cluster.Get() 
            </summary>
        </member>
        <member name="T:Couchbase.DefaultResult`1">
            <summary>
            Basic operation return value
            </summary>
        </member>
        <member name="T:Couchbase.DefaultResult">
            <summary>
            Basic operation return value
            </summary>
        </member>
        <member name="P:Couchbase.DefaultResult.Success">
            <summary>
            Returns true if the operation was succesful.
            </summary>
            <remarks>If Success is false, use the Message property to help determine the reason.</remarks>
        </member>
        <member name="P:Couchbase.DefaultResult.Message">
            <summary>
            If the operation wasn't succesful, a message indicating why it was not succesful.
            </summary>
        </member>
        <member name="P:Couchbase.DefaultResult.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="T:Couchbase.IResult`1">
            <summary>
            Default interface for all operation return types.
            </summary>
        </member>
        <member name="P:Couchbase.IResult`1.Value">
            <summary>
            The value returned by the operation
            </summary>
        </member>
        <member name="T:Couchbase.Document`1">
            <summary>
            Provides an interface for interacting with documents within Couchbase Server
            </summary>
            <typeparam name="T">The type of document.</typeparam>
        </member>
        <member name="T:Couchbase.IDocument`1">
            <summary>
            Provides an interface for interacting with documents within Couchbase Server
            </summary>
            <typeparam name="T">The type of document.</typeparam>
        </member>
        <member name="P:Couchbase.IDocument`1.Id">
            <summary>
            The unique identifier for the document
            </summary>
        </member>
        <member name="P:Couchbase.IDocument`1.Cas">
            <summary>
            The "Check and Set" value for enforcing optimistic concurrency
            </summary>
        </member>
        <member name="P:Couchbase.IDocument`1.Expiry">
            <summary>
            The time-to-live or TTL for the document before it's evicted from disk in milliseconds.
            </summary>
            <remarks>Setting this to zero or less will give the document infinite lifetime</remarks>
        </member>
        <member name="P:Couchbase.IDocument`1.Content">
            <summary>
            The value representing the document itself
            </summary>
        </member>
        <member name="P:Couchbase.IDocument`1.Token">
            <summary>
            Gets the mutation token for the operation if enhanced durability is enabled.
            </summary>
            <value>
            The mutation token.
            </value>
            <remarks>Note: this is used internally for enhanced durability if supported by
            the Couchbase server version and enabled by configuration.</remarks>
        </member>
        <member name="P:Couchbase.Document`1.Id">
            <summary>
            The unique identifier for the document
            </summary>
        </member>
        <member name="P:Couchbase.Document`1.Cas">
            <summary>
            The "Check and Set" value for enforcing optimistic concurrency
            </summary>
        </member>
        <member name="P:Couchbase.Document`1.Expiry">
            <summary>
            The time-to-live or TTL for the document before it's evicted from disk in milliseconds.
            </summary>
            <remarks>Setting this to zero or less will give the document infinite lifetime</remarks>
        </member>
        <member name="P:Couchbase.Document`1.Content">
            <summary>
            The value representing the document itself
            </summary>
        </member>
        <member name="P:Couchbase.Document`1.Token">
            <summary>
            Gets the mutation token for the operation if enhanced durability is enabled.
            </summary>
            <value>
            The mutation token.
            </value>
            <remarks>Note: this is used internally for enhanced durability if supported by
            the Couchbase server version and enabled by configuration.</remarks>
        </member>
        <member name="T:Couchbase.DocumentResult`1">
            <summary>
            The return type for "document" centric operation requests.
            </summary>
            <typeparam name="T">The type the value of the document will be.</typeparam>
        </member>
        <member name="T:Couchbase.IDocumentResult`1">
            <summary>
            The return type for "document" centric operation requests.
            </summary>
            <typeparam name="T">The type the value of the document will be.</typeparam>
        </member>
        <member name="P:Couchbase.IDocumentResult`1.Document">
            <summary>
            The Document object
            </summary>
        </member>
        <member name="P:Couchbase.IDocumentResult`1.Content">
            <summary>
            The actual value stored within Couchbase
            </summary>
        </member>
        <member name="P:Couchbase.DocumentResult`1.Success">
            <summary>
            Returns true if the operation was succesful
            </summary>
        </member>
        <member name="P:Couchbase.DocumentResult`1.Message">
            <summary>
            If the Success is false, a message indicating the reason why
            </summary>
        </member>
        <member name="P:Couchbase.DocumentResult`1.Document">
            <summary>
            The Document object
            </summary>
        </member>
        <member name="P:Couchbase.DocumentResult`1.Status">
            <summary>
            The response status returned by the server when fulfilling the request.
            </summary>
        </member>
        <member name="P:Couchbase.DocumentResult`1.Content">
            <summary>
            The actual value stored within Couchbase
            </summary>
        </member>
        <member name="P:Couchbase.DocumentResult`1.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="T:Couchbase.IOperationResult`1">
            <summary>
            The primary return type for binary Memcached operations which return a value
            </summary>
            <typeparam name="T">The value returned by the operation.</typeparam>
        </member>
        <member name="T:Couchbase.IOperationResult">
            <summary>
            The primary return type for binary Memcached operations
            </summary>
        </member>
        <member name="M:Couchbase.IOperationResult.IsNmv">
            <summary>
            Checks if the server responded with a Not My Vbucket.
            </summary>
            <returns>Returns true if <see cref="T:Couchbase.IO.ResponseStatus"/> is a VBucketBelongsToAnotherServer.</returns>
        </member>
        <member name="P:Couchbase.IOperationResult.Token">
            <summary>
            Gets the mutation token for the operation if enhanced durability is enabled.
            </summary>
            <value>
            The mutation token.
            </value>
            <remarks>Note: this is used internally for enhanced durability if supported by
            the Couchbase server version and enabled by configuration.</remarks>
        </member>
        <member name="P:Couchbase.IOperationResult.Cas">
            <summary>
            The 'Check and Set' or 'CAS' value for enforcing optimistic concurrency.
            </summary>
        </member>
        <member name="P:Couchbase.IOperationResult.Status">
            <summary>
            The server's response status for the operation.
            </summary>
        </member>
        <member name="P:Couchbase.IOperationResult.Durability">
            <summary>
            The level of durability that the operation achieved
            </summary>
        </member>
        <member name="P:Couchbase.IOperationResult`1.Value">
            <summary>
            The value returned by the operation.
            </summary>
        </member>
        <member name="T:Couchbase.IO.ConnectionUnavailableException">
            <summary>
            Thrown when an available <see cref="T:Couchbase.IO.IConnection"/> cannot be obtained from the <see cref="T:Couchbase.IO.IConnectionPool"/> after n number of tries.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Operations.Compression">
            <summary>
            Specifies the compression type the current operation is using.
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.Compression.None">
            <summary>
            No compression is being used.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Operations.DataFormat">
            <summary>
            Specifies the formatting of data across all SDKs
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.DataFormat.Reserved">
            <summary>
            Reserved bit position to avoid zeroing out upper 8 bits
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.DataFormat.Private">
            <summary>
            Used for SDK specific encodings
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.DataFormat.Json">
            <summary>
            Encode as Json
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.DataFormat.Binary">
            <summary>
            Store as raw binary format
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.DataFormat.String">
            <summary>
            Store as a UTF8 string
            </summary>
        </member>
        <member name="T:Couchbase.Management.BucketManager">
            <summary>
            An intermediate class for doing management operations on a Bucket.
            </summary>
        </member>
        <member name="T:Couchbase.Management.IBucketManager">
            <summary>
            An intermediate class for doing management operations on a Bucket.
            </summary>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.InsertDesignDocument(System.String,System.String)">
            <summary>
            Inserts a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.InsertDesignDocumentAsync(System.String,System.String)">
            <summary>
            Inserts a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.UpdateDesignDocument(System.String,System.String)">
            <summary>
            Updates a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.UpdateDesignDocumentAsync(System.String,System.String)">
            <summary>
            Updates a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.GetDesignDocument(System.String)">
            <summary>
            Retrieves the contents of a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A design document object.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.GetDesignDocumentAsync(System.String)">
            <summary>
            Retrieves the contents of a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A design document object.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.RemoveDesignDocument(System.String)">
            <summary>
            Removes a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.RemoveDesignDocumentAsync(System.String)">
            <summary>
            Removes a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.GetDesignDocuments(System.Boolean)">
            <summary>
            Lists all existing design documents.
            </summary>
            <param name="includeDevelopment">Whether or not to show development design documents in the results.</param>
            <returns>The design document as a string.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.GetDesignDocumentsAsync(System.Boolean)">
            <summary>
            Lists all existing design documents.
            </summary>
            <param name="includeDevelopment">Whether or not to show development design documents in the results.</param>
            <returns>The design document as a string.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.Flush">
            <summary>
            Destroys all documents stored within a bucket.  This functionality must also be enabled within the server-side bucket settings for safety reasons.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating success.</returns>
        </member>
        <member name="M:Couchbase.Management.IBucketManager.FlushAsync">
            <summary>
            Destroys all documents stored within a bucket.  This functionality must also be enabled within the server-side bucket settings for safety reasons.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating success.</returns>
        </member>
        <member name="P:Couchbase.Management.IBucketManager.BucketName">
            <summary>
            The name of the Bucket.
            </summary>
        </member>
        <member name="M:Couchbase.Management.BucketManager.InsertDesignDocument(System.String,System.String)">
            <summary>
            Inserts a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.InsertDesignDocumentAsync(System.String,System.String)">
            <summary>
            Inserts a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.UpdateDesignDocument(System.String,System.String)">
            <summary>
            Updates a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.UpdateDesignDocumentAsync(System.String,System.String)">
            <summary>
            Updates a design document containing a number of views.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <param name="designDoc">A design document JSON string.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.GetDesignDocument(System.String)">
            <summary>
            Retrieves the contents of a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A design document object.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.GetDesignDocumentAsync(System.String)">
            <summary>
            Retrieves the contents of a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A design document object.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.RemoveDesignDocument(System.String)">
            <summary>
            Removes a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.RemoveDesignDocumentAsync(System.String)">
            <summary>
            Removes a design document.
            </summary>
            <param name="designDocName">The name of the design document.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.GetDesignDocuments(System.Boolean)">
            <summary>
            Lists all existing design documents.
            </summary>
            <param name="includeDevelopment">Whether or not to show development design documents in the results.</param>
            <returns>The design document as a string.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.GetDesignDocumentsAsync(System.Boolean)">
            <summary>
            Lists all existing design documents.
            </summary>
            <param name="includeDevelopment">Whether or not to show development design documents in the results.</param>
            <returns>The design document as a string.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.Flush">
            <summary>
            Destroys all documents stored within a bucket.  This functionality must also be enabled within the server-side bucket settings for safety reasons.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating success.</returns>
        </member>
        <member name="M:Couchbase.Management.BucketManager.FlushAsync">
            <summary>
            Destroys all documents stored within a bucket.  This functionality must also be enabled within the server-side bucket settings for safety reasons.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> indicating success.</returns>
        </member>
        <member name="P:Couchbase.Management.BucketManager.BucketName">
            <summary>
            The name of the Bucket.
            </summary>
        </member>
        <member name="T:Couchbase.Management.ClusterManager">
            <summary>
            An intermediate class for doing management operations on a Cluster.
            </summary>
        </member>
        <member name="T:Couchbase.Management.IClusterManager">
            <summary>
            An intermediate class for doing management operations on a Cluster.
            </summary>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.AddNode(System.String)">
            <summary>
            Adds a node to the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.AddNodeAsync(System.String)">
            <summary>
            Adds a node to the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.RemoveNode(System.String)">
            <summary>
            Removes a failed over node from the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
            <remarks>The node must have been failed over before removing or else this operation will fail.</remarks>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.RemoveNodeAsync(System.String)">
            <summary>
            Removes a failed over node from the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
            <remarks>The node must have been failed over before removing or else this operation will fail.</remarks>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.Rebalance">
            <summary>
            Initiates a rebalance across the cluster.
            </summary>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.RebalanceAsync">
            <summary>
            Initiates a rebalance across the cluster.
            </summary>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.ClusterInfo">
            <summary>
            Returns the current state of the cluster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.ClusterInfoAsync">
            <summary>
            Returns the current state of the cluster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.ListBuckets">
            <summary>
            List all current buckets in this cluster.
            </summary>
            <returns>A list of buckets and their properties.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.ListBucketsAsync">
            <summary>
            List all current buckets in this cluster.
            </summary>
            <returns>A list of buckets and their properties.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.CreateBucket(System.String,System.UInt32,Couchbase.Core.Buckets.BucketTypeEnum,Couchbase.Management.ReplicaNumber,Couchbase.Authentication.AuthType,System.Boolean,System.Boolean,System.Boolean,System.String,Couchbase.Management.ThreadNumber)">
            <summary>
            Creates a new bucket on the cluster
            </summary>
            <param name="name">Required parameter. Name for new bucket.</param>
            <param name="ramQuota">The RAM quota in megabytes. The default is 100.</param>
            <param name="bucketType">Required parameter. Type of bucket to be created. “Memcached” configures as Memcached bucket. “Couchbase” configures as Couchbase bucket</param>
            <param name="replicaNumber">The number of replicas of each document: minimum 0, maximum 3.</param>
            <param name="authType">The authentication type.</param>
            <param name="indexReplicas">Disable or enable indexes for bucket replicas.</param>
            <param name="flushEnabled">Enables the flush functionality on the specified bucket.</param>
            <param name="parallelDbAndViewCompaction">Indicates whether database and view files on disk can be compacted simultaneously.</param>
            <param name="saslPassword">Optional Parameter. String. Password for SASL authentication. Required if SASL authentication has been enabled.</param>
            <param name="threadNumber">Optional Parameter. Integer from 2 to 8. Change the number of concurrent readers and writers for the data bucket. </param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.CreateBucketAsync(System.String,System.UInt32,Couchbase.Core.Buckets.BucketTypeEnum,Couchbase.Management.ReplicaNumber,Couchbase.Authentication.AuthType,System.Boolean,System.Boolean,System.Boolean,System.String,Couchbase.Management.ThreadNumber)">
            <summary>
            Creates a new bucket on the cluster
            </summary>
            <param name="name">Required parameter. Name for new bucket.</param>
            <param name="ramQuota">The RAM quota in megabytes. The default is 100.</param>
            <param name="bucketType">Required parameter. Type of bucket to be created. “Memcached” configures as Memcached bucket. “Couchbase” configures as Couchbase bucket</param>
            <param name="replicaNumber">The number of replicas of each document: minimum 0, maximum 3.</param>
            <param name="authType">The authentication type.</param>
            <param name="indexReplicas">Disable or enable indexes for bucket replicas.</param>
            <param name="flushEnabled">Enables the flush functionality on the specified bucket.</param>
            <param name="parallelDbAndViewCompaction">Indicates whether database and view files on disk can be compacted simultaneously.</param>
            <param name="saslPassword">Optional Parameter. String. Password for SASL authentication. Required if SASL authentication has been enabled.</param>
            <param name="threadNumber">Optional Parameter. Integer from 2 to 8. Change the number of concurrent readers and writers for the data bucket. </param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.CreateBucketAsync(Couchbase.Management.BucketSettings)">
            <summary>
            Creates a new bucket on the cluster
            </summary>
            <param name="settings">The settings for the bucket.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.RemoveBucket(System.String)">
            <summary>
            Removes a bucket from the cluster permamently.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.RemoveBucketAsync(System.String)">
            <summary>
            Removes a bucket from the cluster permamently.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.FailoverNode(System.String)">
            <summary>
            Fails over a given node
            </summary>
            <param name="hostname">The name of the node to remove.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.FailoverNodeAsync(System.String)">
            <summary>
            Fails over a given node
            </summary>
            <param name="hostname">The name of the node to remove.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.InitializeClusterAsync(System.String,System.String,System.String)">
            <summary>
            Initializes the entry point (EP) node of the cluster; similar to using the Management Console to setup a cluster.
            </summary>
            <param name="hostName"></param>
            <param name="path">The path to the data file. The default is "/opt/couchbase/var/lib/couchbase/data".</param>
            <param name="indexPath">The index path to data file. The default is "/opt/couchbase/var/lib/couchbase/data".</param>
            <remarks>See: <a href="http://docs.couchbase.com/admin/admin/Misc/admin-datafiles.html"/></remarks>
            <returns>An <see cref="T:Couchbase.IResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.RenameNodeAsync(System.String)">
            <summary>
            Renames the name of a node from it's default.
            </summary>
            <param name="hostName">Name of the host.</param>
            In most cases this should just be the IP or hostname of node.
            <returns>An <see cref="T:Couchbase.IResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.SetupServicesAsync(System.String,System.Collections.Generic.List{Couchbase.Management.CouchbaseService})">
            <summary>
            Sets up the services that are available on a given node.
            </summary>
            <param name="hostName">The hostname or IP of the node.</param>
            <param name="services">The services - e.g. query, kv, and/or index</param>
            <returns>An <see cref="T:Couchbase.IResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.SetupServicesAsync(System.String,Couchbase.Management.CouchbaseService[])">
            <summary>
            Sets up the services that are available on a given node.
            </summary>
            <param name="hostName">The hostname or IP of the node.</param>
            <param name="services">The services - e.g. query, kv, and/or index</param>
            <returns>An <see cref="T:Couchbase.IResult"/> with the status of the operation.</returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.ConfigureMemoryAsync(System.String,System.UInt32,System.UInt32)">
            <summary>
            Provisions the memory for an EP node.
            </summary>
            <param name="hostName">Name of the host.</param>
            <param name="dataMemQuota">The data memory quota.</param>
            <param name="indexMemQuota"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.ConfigureAdminAsync(System.String)">
            <summary>
            Provisions the administartor account for an EP node.
            </summary>
            <param name="hostName">Name of the host.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.AddSampleBucketAsync(System.String,System.String)">
            <summary>
            Adds the sample bucket.
            </summary>
            <param name="hostname">The hostname.</param>
            <param name="sampleBucketName">Name of the sample bucket.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.IClusterManager.AddNodeAsync(System.String,Couchbase.Management.CouchbaseService[])">
            <summary>
            Adds a node to the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <param name="services">The services.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.AddNode(System.String)">
            <summary>
            Adds a node to the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.AddNodeAsync(System.String)">
            <summary>
            Adds a node to the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.RemoveNode(System.String)">
            <summary>
            Removes a failed over node from the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
            <remarks>The node must have been failed over before removing or else this operation will fail.</remarks>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.RemoveNodeAsync(System.String)">
            <summary>
            Removes a failed over node from the cluster.
            </summary>
            <param name="ipAddress">The IPAddress of the node.</param>
            <returns>A boolean value indicating the result.</returns>
            <remarks>The node must have been failed over before removing or else this operation will fail.</remarks>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.FailoverNode(System.String)">
            <summary>
            Fails over a given node
            </summary>
            <param name="hostname">The name of the node to remove.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.FailoverNodeAsync(System.String)">
            <summary>
            Fails over a given node
            </summary>
            <param name="hostname">The name of the node to remove.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.Rebalance">
            <summary>
            Initiates a rebalance across the cluster.
            </summary>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.RebalanceAsync">
            <summary>
            Initiates a rebalance across the cluster.
            </summary>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.ListBuckets">
            <summary>
            List all current buckets in this cluster.
            </summary>
            <returns>A list of buckets and their properties.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.ListBucketsAsync">
            <summary>
            List all current buckets in this cluster.
            </summary>
            <returns>A list of buckets and their properties.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.CreateBucket(System.String,System.UInt32,Couchbase.Core.Buckets.BucketTypeEnum,Couchbase.Management.ReplicaNumber,Couchbase.Authentication.AuthType,System.Boolean,System.Boolean,System.Boolean,System.String,Couchbase.Management.ThreadNumber)">
            <summary>
            Creates a new bucket on the cluster
            </summary>
            <param name="name">Required parameter. Name for new bucket.</param>
            <param name="ramQuota">The RAM quota in megabytes. The default is 100.</param>
            <param name="bucketType">Required parameter. Type of bucket to be created. “Memcached” configures as Memcached bucket. “Couchbase” configures as Couchbase bucket</param>
            <param name="replicaNumber">The number of replicas of each document: minimum 0, maximum 3.</param>
            <param name="authType">The authentication type.</param>
            <param name="indexReplicas">Disable or enable indexes for bucket replicas.</param>
            <param name="flushEnabled">Enables the flush functionality on the specified bucket.</param>
            <param name="parallelDbAndViewCompaction">Indicates whether database and view files on disk can be compacted simultaneously.</param>
            <param name="saslPassword">Optional Parameter. String. Password for SASL authentication. Required if SASL authentication has been enabled.</param>
            <param name="threadNumber">Optional Parameter. Integer from 2 to 8. Change the number of concurrent readers and writers for the data bucket. </param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.CreateBucketAsync(Couchbase.Management.BucketSettings)">
            <summary>
            Creates a new bucket on the cluster
            </summary>
            <param name="settings">The settings for the bucket.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.CreateBucketAsync(System.String,System.UInt32,Couchbase.Core.Buckets.BucketTypeEnum,Couchbase.Management.ReplicaNumber,Couchbase.Authentication.AuthType,System.Boolean,System.Boolean,System.Boolean,System.String,Couchbase.Management.ThreadNumber)">
            <summary>
            Creates a new bucket on the cluster
            </summary>
            <param name="name">Required parameter. Name for new bucket.</param>
            <param name="ramQuota">The RAM quota in megabytes. The default is 100.</param>
            <param name="bucketType">Required parameter. Type of bucket to be created. “Memcached” configures as Memcached bucket. “Couchbase” configures as Couchbase bucket</param>
            <param name="replicaNumber">The number of replicas of each document: minimum 0, maximum 3.</param>
            <param name="authType">The authentication type.</param>
            <param name="indexReplicas">Disable or enable indexes for bucket replicas.</param>
            <param name="flushEnabled">Enables the flush functionality on the specified bucket.</param>
            <param name="parallelDbAndViewCompaction">Indicates whether database and view files on disk can be compacted simultaneously.</param>
            <param name="saslPassword">Optional Parameter. String. Password for SASL authentication. Required if SASL authentication has been enabled.</param>
            <param name="threadNumber">Optional Parameter. Integer from 2 to 8. Change the number of concurrent readers and writers for the data bucket. </param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.RemoveBucket(System.String)">
            <summary>
            Removes a bucket from the cluster permamently.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.RemoveBucketAsync(System.String)">
            <summary>
            Removes a bucket from the cluster permamently.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>A boolean value indicating the result.</returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.ClusterInfo">
            <summary>
            Returns the current state of the cluster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.ClusterInfoAsync">
            <summary>
            Returns the current state of the cluster.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.InitializeClusterAsync(System.String,System.String,System.String)">
            <summary>
            Initializes the entry point (EP) node of the cluster; similar to using the Management Console to setup a cluster.
            </summary>
            <param name="hostName"></param>
            <param name="path">The path to the data file.</param>
            <param name="indexPath">The index path to data file.</param>
            <returns>
            An <see cref="T:Couchbase.IResult"/> with the status of the operation.
            </returns>
            <remarks>
            See: <a href="http://docs.couchbase.com/admin/admin/Misc/admin-datafiles.html"/>
            </remarks>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.RenameNodeAsync(System.String)">
            <summary>
            Renames the name of a node from it's default.
            </summary>
            <param name="hostName">Name of the host.</param>
            <returns>
            An <see cref="T:Couchbase.IResult"/> with the status of the operation.
            </returns>
            <remarks>In most cases this should just be the IP or hostname of node.</remarks>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.SetupServicesAsync(System.String,Couchbase.Management.CouchbaseService[])">
            <summary>
            Sets up the services that are available on a given node.
            </summary>
            <param name="hostName">The hostname or IP of the node.</param>
            <param name="services">The services - e.g. query, kv, and/or index</param>
            <returns>
            An <see cref="T:Couchbase.IResult"/> with the status of the operation.
            </returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.SetupServicesAsync(System.String,System.Collections.Generic.List{Couchbase.Management.CouchbaseService})">
            <summary>
            Sets up the services that are available on a given node.
            </summary>
            <param name="hostName">The hostname or IP of the node.</param>
            <param name="services">The services - e.g. query, kv, and/or index</param>
            <returns>
            An <see cref="T:Couchbase.IResult"/> with the status of the operation.
            </returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.ConfigureMemoryAsync(System.String,System.UInt32,System.UInt32)">
            <summary>
            Configures the memory asynchronous.
            </summary>
            <param name="hostName">Name of the host.</param>
            <param name="memoryQuota">The memory quota.</param>
            <param name="indexMemQuota"></param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.ConfigureAdminAsync(System.String)">
            <summary>
            Provisions the administartor account for an EP node.
            </summary>
            <param name="hostName">Name of the host.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Management.ClusterManager.AddSampleBucketAsync(System.String,System.String)">
            <summary>
            Adds the sample bucket asynchronous.
            </summary>
            <param name="hostName">Name of the host.</param>
            <param name="sampleBucketName">Name of the sample bucket.</param>
            <returns></returns>
        </member>
        <member name="T:Couchbase.Management.ReplicaNumber">
            <summary>
            Number of replicas to be configured for this bucket. Required parameter when creating a Couchbase bucket. Default 1, minimum 0, maximum 3.
            </summary>
        </member>
        <member name="F:Couchbase.Management.ReplicaNumber.Two">
            <summary>
            Default.
            </summary>
        </member>
        <member name="T:Couchbase.Management.ThreadNumber">
            <summary>
            The number of concurrent readers and writers for the data bucket.
            </summary>
        </member>
        <member name="T:Couchbase.N1QL.IQueryRequestWithDataMapper">
            <summary>
            Extends <see cref="T:Couchbase.N1QL.IQueryRequest"/> to provide a custom data mapper
            </summary>
        </member>
        <member name="T:Couchbase.N1QL.IQueryRequest">
            <summary>
            Represents a request for a N1QL query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.AdHoc(System.Boolean)">
            <summary>
             If set to false, the client will try to perform optimizations
             transparently based on the server capabilities, like preparing the statement and
             then executing a query plan instead of the raw query.
            </summary>
            <param name="adHoc">if set to <c>false</c> the query will be optimized if possible.</param>
            <remarks>The default is <c>true</c>; the query will executed in an ad-hoc manner,
             without special optomizations.</remarks>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Statement(System.String)">
            <summary>
             Sets a N1QL statement to be executed.
            </summary>
            <param name="statement">Any valid N1QL statement for a POST request, or a read-only N1QL statement (SELECT, EXPLAIN) for a GET request.</param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
            <remarks>If both prepared and statement are present and non-empty, an error is returned.</remarks>
            <remarks>Required if prepared not provided.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Prepared(Couchbase.N1QL.QueryPlan,System.String)">
            <summary>
             Sets a N1QL statement to be executed in an optimized way using the given queryPlan.
            </summary>
            <param name="queryPlan">The <see cref="T:Couchbase.N1QL.QueryPlan"/> that was prepared beforehand.</param>
            <param name="originalStatement">The original statement (eg. SELECT * FROM default) that the user attempted to optimize</param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
            <remarks>Required if statement not provided, will erase a previous call to <see cref="M:Couchbase.N1QL.IQueryRequest.Statement(System.String)"/>.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Timeout(System.TimeSpan)">
            <summary>
            Sets the maximum time to spend on the request.
            </summary>
            <param name="timeOut">Maximum time to spend on the request</param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
            <remarks>Optional - the default is 0ms, which means the request runs for as long as it takes.</remarks>
            <remarks>There is also a server wide timeout parameter, and the minimum of that and the request timeout is what gets applied. </remarks>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.ReadOnly(System.Boolean)">
            <summary>
            If a GET request, this will always be true otherwise false.
            </summary>
            <param name="readOnly">True for get requests.</param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
            <remarks>Any value set here will be overridden by the type of request sent.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Metrics(System.Boolean)">
            <summary>
            Specifies that metrics should be returned with query results.
            </summary>
            <param name="includeMetrics">True to return query metrics.</param>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.AddNamedParameter(System.String,System.Object)">
            <summary>
            Adds a named parameter to the parameters to the statement or prepared statement.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.AddNamedParameter(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
             Adds a collection of named parameters to the parameters to the statement or prepared statement.
            </summary>
            <param name="parameters">A list of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to be sent.</param>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.AddPositionalParameter(System.Object)">
            <summary>
            Adds a positional parameter to the parameters to the statement or prepared statement.
            </summary>
            <param name="value">The value of the positional parameter.</param>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.AddPositionalParameter(System.Object[])">
            <summary>
            Adds a list of positional parameters to the statement or prepared statement.
            </summary>
            <param name="parameters">A list of positional parameters.</param>
            <returns></returns>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Format(Couchbase.N1QL.Format)">
            <summary>
            Desired format for the query results.
            </summary>
            <param name="format">An <see cref="M:Couchbase.N1QL.IQueryRequest.Format(Couchbase.N1QL.Format)"/> enum.</param>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Encoding(Couchbase.N1QL.Encoding)">
            <summary>
            Specifies the desired character encoding for the query results.
            </summary>
            <param name="encoding">An <see cref="M:Couchbase.N1QL.IQueryRequest.Encoding(Couchbase.N1QL.Encoding)"/> enum.</param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
            <remarks>Optional.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Compression(Couchbase.N1QL.Compression)">
            <summary>
            Compression format to use for response data on the wire. Possible values are ZIP, RLE, LZMA, LZO, NONE.
            </summary>
            <param name="compression"></param>
            <remarks>Optional. The default is NONE.</remarks>
            <remarks>Values are case-insensitive.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Signature(System.Boolean)">
            <summary>
             Includes a header for the results schema in the response.
            </summary>
            <param name="includeSignature">True to include a header for the results schema in the response.</param>
            <remarks>The default is true.</remarks>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.ScanConsistency(Couchbase.N1QL.ScanConsistency)">
            <summary>
            Specifies the consistency guarantee/constraint for index scanning.
            </summary>
            <param name="scanConsistency">Specify the consistency guarantee/constraint for index scanning.</param>
            <remarks>Optional.</remarks>
            <remarks>The default is <see cref="M:Couchbase.N1QL.IQueryRequest.ScanConsistency(Couchbase.N1QL.ScanConsistency)"/>.NotBounded.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.ScanVector(System.Object)">
             <summary>
             Specify the lower bound vector timestamp when using at_plus scan consistency.
             </summary>
             <param name="vector"></param>
            <remarks>Required if <see cref="M:Couchbase.N1QL.IQueryRequest.ScanConsistency(Couchbase.N1QL.ScanConsistency)"/> is AtPlus.</remarks>
            <remarks>There are two formats: array of 1024 numbers, to specify a full scan vector and object containing vbucket/seqno pairs, to specify a sparse scan vector (e.g. { "5 ": 5409393,  "19": 47574574 })</remarks>
             <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.ScanWait(System.TimeSpan)">
            <summary>
             Specifies the maximum time the client is willing to wait for an index to catch up to the vector timestamp in the request. If an index has to catch up, and the <see cref="M:Couchbase.N1QL.IQueryRequest.ScanWait(System.TimeSpan)"/> time is exceed doing so, an error is returned.
            </summary>
            <param name="scanWait">The maximum time the client is willing to wait for index to catch up to the vector timestamp.</param>
            <remarks>Optional.</remarks>
            <remarks>Can be supplied with <see cref="M:Couchbase.N1QL.IQueryRequest.ScanConsistency(Couchbase.N1QL.ScanConsistency)"/> values of RequestPlus, StatementPlus and AtPlus.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.Pretty(System.Boolean)">
            <summary>
            Pretty print the output.
            </summary>
            <param name="pretty">True for the pretty.</param>
            <remarks>True by default.</remarks>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.AddCredentials(System.String,System.String,System.Boolean)">
            <summary>
            Adds a set of credentials to the list of credentials, in the form of user/password
            </summary>
            <param name="username">The bucket or username.</param>
            <param name="password">The password of the bucket.</param>
            <param name="isAdmin">True if connecting as an admin.</param>
            <remarks>Optional.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.ClientContextId(System.String)">
            <summary>
            A piece of data supplied by the client that is echoed in the response, if present. N1QL makes no assumptions about the meaning of this data and just logs and echoes it.
            </summary>
            <param name="contextId"></param>
            <remarks>Optional.</remarks>
            <remarks> Maximum allowed size is 64 characters. A clientContextID longer than 64 characters is cut off at 64 characters.</remarks>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.BaseUri(System.Uri)">
            <summary>
            The base <see cref="T:System.Uri"/> used to create the request e.g. http://localhost:8093/query
            </summary>
            <param name="uri"></param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.GetBaseUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> for the Query service
            </summary>
            <returns>The <see cref="T:System.Uri"/> for the Query service</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.GetOriginalStatement">
            <summary>
            Gets the raw, unprepared N1QL statement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.GetPreparedPayload">
            <summary>
            Gets the prepared payload for this N1QL statement if IsPrepared() is true,
            null otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.GetFormValues">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IDictionary`2"/> of the name/value pairs to be POSTed to the service if <see cref="F:Couchbase.N1QL.Method.Post"/> is used.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IDictionary`2"/> of the name/value pairs to be POSTed to the service.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.GetFormValuesAsJson">
            <summary>
            Gets the JSON representation of this query for execution in a POST.
            </summary>
            <returns>The form values as a JSON object.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryRequest.TimedOut">
            <summary>
            True if the request exceeded it's <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.QueryRequestTimeout"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.N1QL.IQueryRequest.Lifespan">
            <summary>
            Sets the lifespan of the query request; used to check if the request exceeded the maximum time
            configured for it in <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.QueryRequestTimeout"/>
            </summary>
            <value>
            The lifespan.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryRequest.IsPrepared">
            <summary>
            Returns true if the request is not ad-hoc and has been optimized using <see cref="M:Couchbase.N1QL.IQueryRequest.Prepared(Couchbase.N1QL.QueryPlan,System.String)"/>.
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.IQueryRequest.IsAdHoc">
            <summary>
            Gets a value indicating whether this query statement is to executed in an ad-hoc manner.
            </summary>
            <value>
              <c>true</c> if this instance is ad-hoc; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryRequest.HasBeenRetried">
            <summary>
            Gets a value indicating whether this instance has been retried (if it's been optimized
            and prepared then the server marked it as stale/not runnable).
            </summary>
            <value><c>true</c> if this instance has been retried once, otherwise <c>false</c>.</value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryRequestWithDataMapper.DataMapper">
            <summary>
            Custom <see cref="T:Couchbase.Views.IDataMapper"/> to use when deserializing query results.
            </summary>
            <remarks>Null will use the default <see cref="T:Couchbase.Views.IDataMapper"/>.</remarks>
        </member>
        <member name="T:Couchbase.N1QL.IQueryResult`1">
            <summary>
            Interface for the results of a N1QL query.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.RequestId">
            <summary>
            Gets A unique identifier for the response.
            </summary>
            <value>
            The unique identifier for the response.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.ClientContextId">
            <summary>
            Gets the clientContextID of the request, if one was supplied. Used for debugging.
            </summary>
            <value>
            The client context identifier.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.Signature">
            <summary>
            Gets the schema of the results. Present only when the query completes successfully.
            </summary>
            <value>
            The signature of the schema of the request.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.Rows">
            <summary>
            Gets a list of all the objects returned by the query. An object can be any JSON value.
            </summary>
            <value>
            A a list of all the objects returned by the query.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.Status">
            <summary>
            Gets the status of the request; possible values are: success, running, errors, completed, stopped, timeout, fatal.
            </summary>
            <value>
            The status of the request.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.Errors">
            <summary>
            Gets a list of 0 or more error objects; if an error occurred during processing of the request, it will be represented by an error object in this list.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.Warnings">
            <summary>
            Gets a list of 0 or more warning objects; if a warning occurred during processing of the request, it will be represented by a warning object in this list.
            </summary>
            <value>
            The warnings.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.IQueryResult`1.Metrics">
            <summary>
            Gets an object containing metrics about the request.
            </summary>
            <value>
            The metrics.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryPlan.Name">
            <summary>
            Gets the name of the query plan generated by the server.
            </summary>
            <value>
            The name of the query plan.
            </value>
        </member>
        <member name="T:Couchbase.N1QL.QueryRequest">
            <summary>
            Builds a N1QL query request.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.AdHoc(System.Boolean)">
            <summary>
            If set to false, the client will try to perform optimizations
            transparently based on the server capabilities, like preparing the statement and
            then executing a query plan instead of the raw query.
            </summary>
            <param name="adHoc">if set to <c>false</c> the query will be optimized if possible.</param>
            <returns></returns>
            <remarks>
            The default is <c>true</c>; the query will executed in an ad-hoc manner,
            without special optomizations.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Prepared(Couchbase.N1QL.QueryPlan,System.String)">
            <summary>
             Sets a N1QL statement to be executed in an optimized way using the given queryPlan.
            </summary>
            <param name="preparedPlan">The <see cref="T:Couchbase.N1QL.QueryPlan"/> that was prepared beforehand.</param>
            <param name="originalStatement">The original statement (eg. SELECT * FROM default) that the user attempted to optimize</param>
            <returns>A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.</returns>
            <remarks>Required if statement not provided, will erase a previously set Statement.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="preparedPlan"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Statement(System.String)">
            <summary>
            Sets a N1QL statement to be executed.
            </summary>
            <param name="statement">Any valid N1QL statement for a POST request, or a read-only N1QL statement (SELECT, EXPLAIN) for a GET request.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">statement</exception>
            <remarks>
            Will erase a previous optimization of a statement using Prepared.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Timeout(System.TimeSpan)">
            <summary>
            Sets the maximum time to spend on the request.
            </summary>
            <param name="timeOut">Maximum time to spend on the request</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.
            </returns>
            <remarks>
            Optional - the default is 0ms, which means the request runs for as long as it takes.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.ReadOnly(System.Boolean)">
            <summary>
            If a GET request, this will always be true otherwise false.
            </summary>
            <param name="readOnly">True for get requests.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.
            </returns>
            <remarks>
            Any value set here will be overridden by the type of request sent.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Metrics(System.Boolean)">
            <summary>
            Specifies that metrics should be returned with query results.
            </summary>
            <param name="includeMetrics">True to return query metrics.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.AddNamedParameter(System.String,System.Object)">
            <summary>
            Adds a named parameter to the parameters to the statement or prepared statement.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.AddPositionalParameter(System.Object)">
            <summary>
            Adds a positional parameter to the parameters to the statement or prepared statement.
            </summary>
            <param name="value">The value of the positional parameter.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.AddNamedParameter(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Adds a collection of named parameters to the parameters to the statement or prepared statement.
            </summary>
            <param name="parameters">A list of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to be sent.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.AddPositionalParameter(System.Object[])">
            <summary>
            Adds a list of positional parameters to the statement or prepared statement.
            </summary>
            <param name="parameters">A list of positional parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Format(Couchbase.N1QL.Format)">
            <summary>
            Desired format for the query results.
            </summary>
            <param name="format">An <see cref="M:Couchbase.N1QL.QueryRequest.Format(Couchbase.N1QL.Format)"/> enum.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Encoding(Couchbase.N1QL.Encoding)">
            <summary>
            Specifies the desired character encoding for the query results.
            </summary>
            <param name="encoding">An <see cref="M:Couchbase.N1QL.QueryRequest.Encoding(Couchbase.N1QL.Encoding)"/> enum.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Compression(Couchbase.N1QL.Compression)">
            <summary>
            Compression format to use for response data on the wire. Possible values are ZIP, RLE, LZMA, LZO, NONE.
            </summary>
            <param name="compression"></param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.
            </returns>
            <remarks>
            Optional. The default is NONE.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Signature(System.Boolean)">
            <summary>
            Includes a header for the results schema in the response.
            </summary>
            <param name="includeSignature">True to include a header for the results schema in the response.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.
            </returns>
            <remarks>
            The default is true.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.ScanConsistency(Couchbase.N1QL.ScanConsistency)">
            <summary>
            Specifies the consistency guarantee/constraint for index scanning.
            </summary>
            <param name="scanConsistency">Specify the consistency guarantee/constraint for index scanning.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.
            </returns>
            <exception cref="T:System.NotSupportedException">AtPlus and StatementPlus are not currently supported by CouchbaseServer.</exception>
            <exception cref="T:System.NotSupportedException">AtPlus and StatementPlus are not currently supported by CouchbaseServer.</exception>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.ScanVector(System.Object)">
            <summary>
            Scans the vector.
            </summary>
            <param name="scanVector">The scan vector.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.ScanWait(System.TimeSpan)">
            <summary>
            Specifies the maximum time the client is willing to wait for an index to catch up to the vector timestamp in the request. If an index has to catch up, and the <see cref="M:Couchbase.N1QL.QueryRequest.ScanWait(System.TimeSpan)"/> time is exceed doing so, an error is returned.
            </summary>
            <param name="scanWait">The maximum time the client is willing to wait for index to catch up to the vector timestamp.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.
            </returns>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Pretty(System.Boolean)">
            <summary>
            Pretty print the output.
            </summary>
            <param name="pretty">True for the pretty.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.
            </returns>
            <remarks>
            True by default.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.AddCredentials(System.String,System.String,System.Boolean)">
            <summary>
            Adds a set of credentials to the list of credentials, in the form of user/password
            </summary>
            <param name="username">The bucket or username.</param>
            <param name="password">The password of the bucket.</param>
            <param name="isAdmin">True if connecting as an admin.</param>
            <returns>
            A reference to the current <see cref="T:Couchbase.N1QL.IQueryRequest"/> for method chaining.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">username;cannot be null, empty or whitespace.</exception>
            <remarks>
            Optional.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.ClientContextId(System.String)">
            <summary>
            Clients the context identifier.
            </summary>
            <param name="clientContextId">The client context identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.BaseUri(System.Uri)">
            <summary>
            Bases the URI.
            </summary>
            <param name="baseUri">The base URI.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.GetOriginalStatement">
            <summary>
            Gets the raw, unprepared N1QL statement.
            </summary>
            <remarks>If the statement has been optimized using Prepared, this will still
            return the original un-optimized statement.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.GetPreparedPayload">
            <summary>
            Gets the prepared payload for this N1QL statement if IsPrepared() is true,
            null otherwise.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.GetFormValues">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IDictionary`2"/> of the name/value pairs to be POSTed to the service.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> of the name/value pairs to be POSTed to the service.
            </returns>
            <exception cref="T:System.ArgumentException">A statement or prepared plan must be provided.</exception>
            <remarks>Since values will be POSTed as JSON, here we deal with unencoded typed values
            (like ints, Lists, etc...) rather than only strings.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.GetQueryParametersAsFormUrlencoded">
            <summary>
            Gets the query parameters for x-form-urlencoded content-type.
            </summary>
            <remarks>Each key and value from GetFormValues will be urlencoded</remarks>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.GetFormValuesAsJson">
            <summary>
            Gets the JSON representation of this query for execution in a POST.
            </summary>
            <returns>The form values as a JSON object.</returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Create">
            <summary>
            Creates a new <see cref="T:Couchbase.N1QL.QueryRequest"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Create(System.String)">
            <summary>
            Creates a new <see cref="T:Couchbase.N1QL.QueryRequest"/> object with the specified statement.
            </summary>
            <param name="statement">The statement.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Create(Couchbase.N1QL.QueryPlan,System.String)">
            <summary>
            Creates a query using the given plan as an optimization for the originalStatement.
            </summary>
            <param name="plan">The plan.</param>
            <param name="originalStatement">The original statement, unoptimized.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryRequest.Couchbase#N1QL#IQueryRequest#TimedOut">
            <summary>
            True if the request exceeded it's <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.QueryRequestTimeout"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.N1QL.QueryRequest.IsPrepared">
            <summary>
            Returns true if the request is a prepared statement
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.QueryRequest.IsAdHoc">
            <summary>
            Gets a value indicating whether this query statement is to executed in an ad-hoc manner.
            </summary>
            <value>
              <c>true</c> if this instance is ad-hoc; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryRequest.HasBeenRetried">
            <summary>
            Gets a value indicating whether this instance has been retried (if it's been optimized
            and prepared then the server marked it as stale/not runnable).
            </summary>
            <value><c>true</c> if this instance has been retried once, otherwise <c>false</c>.</value>
        </member>
        <member name="P:Couchbase.N1QL.QueryRequest.DataMapper">
            <summary>
            Custom <see cref="T:Couchbase.Views.IDataMapper"/> to use when deserializing query results.
            </summary>
            <remarks>Null will use the default <see cref="T:Couchbase.Views.IDataMapper"/>.</remarks>
        </member>
        <member name="P:Couchbase.N1QL.QueryRequest.Couchbase#N1QL#IQueryRequest#Lifespan">
            <summary>
            Sets the lifespan of the query request; used to check if the request exceeded the maximum time
            configured for it in <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.QueryRequestTimeout"/>
            </summary>
            <value>
            The lifespan.
            </value>
        </member>
        <member name="T:Couchbase.N1QL.FailureCountingUri">
            <summary>
            A decorator around a <see cref="T:System.Uri"/> that maintains count of the whether the last request failed.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.FailureCountingUri.#ctor(System.String,System.UriKind)">
            <exception cref="T:System.UriFormatException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.FormatException"/>, instead.<paramref name="uriString"/> contains a relative URI and <paramref name="uriKind"/> is <see cref="F:System.UriKind.Absolute"/>.or<paramref name="uriString"/> contains an absolute URI and <paramref name="uriKind"/> is <see cref="F:System.UriKind.Relative"/>.or<paramref name="uriString"/> is empty.-or- The scheme specified in <paramref name="uriString"/> is not correctly formed. See <see cref="M:System.Uri.CheckSchemeName(System.String)"/>.-or- <paramref name="uriString"/> contains too many slashes.-or- The password specified in <paramref name="uriString"/> is not valid.-or- The host name specified in <paramref name="uriString"/> is not valid.-or- The file name specified in <paramref name="uriString"/> is not valid. -or- The user name specified in <paramref name="uriString"/> is not valid.-or- The host or authority name specified in <paramref name="uriString"/> cannot be terminated by backslashes.-or- The port number specified in <paramref name="uriString"/> is not valid or cannot be parsed.-or- The length of <paramref name="uriString"/> exceeds 65519 characters.-or- The length of the scheme specified in <paramref name="uriString"/> exceeds 1023 characters.-or- There is an invalid character sequence in <paramref name="uriString"/>.-or- The MS-DOS path specified in <paramref name="uriString"/> must start with c:\\.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="uriKind"/> is invalid. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uriString"/> is null. </exception>
        </member>
        <member name="M:Couchbase.N1QL.FailureCountingUri.#ctor(System.Uri,System.String)">
            <exception cref="T:System.ArgumentNullException"><paramref name="baseUri"/> is null. </exception>
            <exception cref="T:System.UriFormatException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.FormatException"/>, instead.The URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> is empty or contains only spaces.-or- The scheme specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> is not valid.-or- The URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> contains too many slashes.-or- The password specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> is not valid.-or- The host name specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> is not valid.-or- The file name specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> is not valid. -or- The user name specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> is not valid.-or- The host or authority name specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> cannot be terminated by backslashes.-or- The port number specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> is not valid or cannot be parsed.-or- The length of the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> exceeds 65519 characters.-or- The length of the scheme specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> exceeds 1023 characters.-or- There is an invalid character sequence in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/>.-or- The MS-DOS path specified in <paramref name="uriString"/> must start with c:\\.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUri"/> is not an absolute <see cref="T:System.Uri"/> instance. </exception>
        </member>
        <member name="M:Couchbase.N1QL.FailureCountingUri.#ctor(System.Uri,System.Uri)">
            <exception cref="T:System.ArgumentException"><paramref name="baseUri"/> is not an absolute <see cref="T:System.Uri"/> instance. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="baseUri"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="baseUri"/> is not an absolute <see cref="T:System.Uri"/> instance. </exception>
            <exception cref="T:System.UriFormatException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.FormatException"/>, instead.The URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> is empty or contains only spaces.-or- The scheme specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> is not valid.-or- The URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> contains too many slashes.-or- The password specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> is not valid.-or- The host name specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> is not valid.-or- The file name specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> is not valid. -or- The user name specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> is not valid.-or- The host or authority name specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> cannot be terminated by backslashes.-or- The port number specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> is not valid or cannot be parsed.-or- The length of the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> exceeds 65519 characters.-or- The length of the scheme specified in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/> exceeds 1023 characters.-or- There is an invalid character sequence in the URI formed by combining <paramref name="baseUri"/> and <paramref name="relativeUri"/>.-or- The MS-DOS path specified in <paramref name="uriString"/> must start with c:\\.</exception>
        </member>
        <member name="M:Couchbase.N1QL.FailureCountingUri.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exception cref="T:System.ArgumentNullException">The <paramref name="serializationInfo"/> parameter contains a null URI. </exception>
            <exception cref="T:System.UriFormatException">The <paramref name="serializationInfo"/> parameter contains a URI that is empty.-or- The scheme specified is not correctly formed. See <see cref="M:System.Uri.CheckSchemeName(System.String)"/>.-or- The URI contains too many slashes.-or- The password specified in the URI is not valid.-or- The host name specified in URI is not valid.-or- The file name specified in the URI is not valid. -or- The user name specified in the URI is not valid.-or- The host or authority name specified in the URI cannot be terminated by backslashes.-or- The port number specified in the URI is not valid or cannot be parsed.-or- The length of URI exceeds 65519 characters.-or- The length of the scheme specified in the URI exceeds 1023 characters.-or- There is an invalid character sequence in the URI.-or- The MS-DOS path specified in the URI must start with c:\\.</exception>
        </member>
        <member name="M:Couchbase.N1QL.FailureCountingUri.IncrementFailed">
            <summary>
            Increments the failed count by 1.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.FailureCountingUri.ClearFailed">
            <summary>
            Sets the failed count to zero indicating the <see cref="T:System.Uri"/> will execute requests successfully.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.FailureCountingUri.IsHealthy(System.Int32)">
            <summary>
            Determines whether the specified threshold is bueno.
            </summary>
            <param name="threshold">The threshold.</param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.N1QL.FailureCountingUri.FailedCount">
            <summary>
            Gets the failed count.
            </summary>
            <value>
            The failed count.
            </value>
        </member>
        <member name="T:Couchbase.Utils.QueryResultExtensions">
            <summary>
            Provides methods which extend the <see cref="T:Couchbase.N1QL.IQueryResult`1"/> interface, without actually modifying the interface.
            </summary>
        </member>
        <member name="M:Couchbase.Utils.QueryResultExtensions.GetErrorsAsString``1(Couchbase.N1QL.IQueryResult{``0})">
            <summary>
            Converts the <see cref="P:Couchbase.N1QL.IQueryResult`1.Errors"/> collection to a string representation.
            </summary>
            <typeparam name="T">The Type of the row body.</typeparam>
            <param name="query">The <see cref="T:Couchbase.N1QL.IQueryResult`1"/> reference.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Utils.TaskExtensions.ContinueOnAnyContext(System.Threading.Tasks.Task)">
            <summary>
            Makes the <see cref="T:System.Threading.Tasks.Task"/> resume without the current context.
            </summary>
            <param name="task">The current <see cref="T:System.Threading.Tasks.Task"/>.</param>
            <returns>The <see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable"/> not dependent on the current context.</returns>
        </member>
        <member name="M:Couchbase.Utils.TaskExtensions.ContinueOnAnyContext``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Makes the <see cref="T:System.Threading.Tasks.Task`1"/> resume without the current context.
            </summary>
            <param name="task">The current <see cref="T:System.Threading.Tasks.Task`1"/>.</param>
            <returns>The <see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1"/> not dependent on the current context.</returns>
        </member>
        <member name="M:Couchbase.Utils.TimeSpanExtensions.ToTtl(System.TimeSpan)">
            <summary>
            Converts a <see cref="T:System.TimeSpan"/> into an uint correctly representing a Time-To-Live,
            that is expressed in seconds.
            Durations strictly bigger than 30 days are converted to a unix-syle timestamp (seconds since the Epoch),
            as described in the couchbase TTL documentation.
            </summary>
            <returns>The TTL, expressed as a suitable uint.</returns>
        </member>
        <member name="T:Couchbase.Views.ISpatialViewQuery">
            <summary>
            An interface for Spatial view request which provide multidimensional spatial indexes in Couchbase.
            </summary>
        </member>
        <member name="T:Couchbase.Views.IViewQueryable">
            <summary>
            A base interface for View and Spatial query requests.
            </summary>
        </member>
        <member name="M:Couchbase.Views.IViewQueryable.RawUri">
            <summary>
            Returns the raw REST URI which can be executed in a browser or using curl.
            </summary>
            <returns>A <see cref="T:System.Uri"/> object that represents the query. This query can be run within a browser.</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQueryable.BaseUri(System.Uri)">
            <summary>
            Sets the base uri for the query if it's not set in the constructor.
            </summary>
            <param name="uri">The base uri to use - this is normally set internally and may be overridden by configuration.</param>
            <returns>An <see cref="T:Couchbase.Views.IViewQueryable"/> object for chaining</returns>
            <remarks>Note that this will override the baseUri set in the ctor. Additionally, this method may be called internally by the <see cref="T:Couchbase.Core.IBucket"/> and overridden.</remarks>
        </member>
        <member name="P:Couchbase.Views.IViewQueryable.BucketName">
            <summary>
            Gets the name of the <see cref="T:Couchbase.Core.IBucket"/> that the query is targeting.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewQueryable.UseSsl">
            <summary>
            When true, the generated url will contain 'https' and use port 18092
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewQueryable.RetryAttempts">
            <summary>
            The number of times the view request was retried if it fails before succeeding or giving up.
            </summary>
            <remarks>Used internally.</remarks>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.StartRange(System.Collections.Generic.List{System.Nullable{System.Double}})">
            <summary>
            The start range of the spatial query.
            </summary>
            <param name="startRange">The start range.</param>
            <remarks>The number of elements must match the number of dimensions of the index</remarks>
            <remarks>Array of numeric or null; optional</remarks>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.StartRange(System.Nullable{System.Double}[])">
            <summary>
            The start range of the spatial query.
            </summary>
            <param name="startRange">The start range.</param>
            <remarks>The number of elements must match the number of dimensions of the index</remarks>
            <remarks>Array of numeric or null; optional</remarks>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.EndRange(System.Collections.Generic.List{System.Nullable{System.Double}})">
            <summary>
            The end range of the spatial query.
            </summary>
            <param name="endRange">The end range.</param>
            <remarks>The number of elements must match the number of dimensions of the index</remarks>
            <remarks>Array of numeric or null; optional</remarks>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.EndRange(System.Nullable{System.Double}[])">
            <summary>
            The end range of the spatial query.
            </summary>
            <param name="endRange">The end range.</param>
            <remarks>The number of elements must match the number of dimensions of the index</remarks>
            <remarks>Array of numeric or null; optional</remarks>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.Range(System.Collections.Generic.List{System.Nullable{System.Double}},System.Collections.Generic.List{System.Nullable{System.Double}})">
            <summary>
            The start and end range for a spatial query.
            </summary>
            <param name="startRange">The start range.</param>
            <param name="endRange">The end range.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.Skip(System.Int32)">
            <summary>
            Skip this number of records before starting to return the results
            </summary>
            <param name="count">The number of records to skip</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.Stale(Couchbase.Views.StaleState)">
            <summary>
            Allow the results from a stale view to be used. The default is StaleState.Ok; for development work set to StaleState.False
            </summary>
            <param name="staleState">The staleState value to use.</param>
            <returns>An ISpatialViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.Limit(System.Int32)">
            <summary>
            Limit the number of the returned documents to the specified number
            </summary>
            <param name="limit">The numeric limit</param>
            <returns>An ISpatialViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.Bucket(System.String)">
            <summary>
            Sets the name of the Couchbase Bucket.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>An ISpatialViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.Development(System.Boolean)">
            <summary>
            Toggles the query between development or production dataset and View.
            </summary>
            <param name="development">If true the development View will be used</param>
            <returns>An ISpatialViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.From(System.String,System.String)">
            <summary>
            Specifies the design document and view to execute.
            </summary>
            <param name="designDoc">The design document.</param>
            <param name="view">The view.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.DesignDoc(System.String)">
            <summary>
            Specifies the design document.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.View(System.String)">
            <summary>
            Specifies the view to execute.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ISpatialViewQuery.ConnectionTimeout(System.Int32)">
            <summary>
            Specifies the server timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Views.ISpatialViewQuery.Host">
            <summary>
            Gets the hostname or IP of the remote Couchbase server which will execute the query.
            </summary>
            <value>
            The host.
            </value>
        </member>
        <member name="T:Couchbase.Views.IViewResult`1">
            <summary>
            Represents the results of a View query.
            </summary>
            <typeparam name="T">The Type parameter to be used for deserialization by the <see cref="T:Couchbase.Views.IDataMapper"/>
            implementation.</typeparam>
        </member>
        <member name="M:Couchbase.Views.IViewResult`1.CannotRetry">
            <summary>
            Returns false if the error that caused the View request to fail can result in a retry request.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Views.IViewResult`1.TotalRows">
            <summary>
            The total number of rows returned by the View request.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewResult`1.Rows">
            <summary>
            The results of the query if successful as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewResult`1.Error">
            <summary>
            A View engine specific error message if one occured.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewResult`1.StatusCode">
            <summary>
            The HTTP Status Code for the request
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewResult`1.Values">
            <summary>
            Returns the value of each element within the <see cref="P:Couchbase.Views.IViewResult`1.Rows"/> property as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="T:Couchbase.OperationResult`1">
            <summary>
            The primary return type for binary Memcached operations which return a value
            </summary>
            <typeparam name="T">The value returned by the operation.</typeparam>
        </member>
        <member name="T:Couchbase.OperationResult">
            <summary>
            The result of an operation.
            </summary>
            <remarks>If Success is false, use the Message property to help determine the reason.</remarks>
        </member>
        <member name="M:Couchbase.OperationResult.IsNmv">
            <summary>
            Checks if the server responded with a Not My Vbucket.
            </summary>
            <returns>Returns true if <see cref="T:Couchbase.IO.ResponseStatus"/> is a VBucketBelongsToAnotherServer.</returns>
        </member>
        <member name="P:Couchbase.OperationResult.Success">
            <summary>
            True if the operation succeeded.
            </summary>
            <remarks>If Success is false, use the Message property to help determine the reason.</remarks>
        </member>
        <member name="P:Couchbase.OperationResult.Message">
            <summary>
            If Success is false, the reason why the operation failed.
            </summary>
        </member>
        <member name="P:Couchbase.OperationResult.Token">
            <summary>
            Gets the mutation token for the operation if enhanced durability is enabled.
            </summary>
            <value>
            The mutation token.
            </value>
        </member>
        <member name="P:Couchbase.OperationResult.Cas">
            <summary>
            The 'Check and Set' or 'CAS' value for enforcing optimistic concurrency.
            </summary>
        </member>
        <member name="P:Couchbase.OperationResult.Status">
            <summary>
            The status returned from the Couchbase Server after an operation.
            </summary>
            <remarks><see cref="F:Couchbase.IO.ResponseStatus.Success"/> will be returned if <see cref="P:Couchbase.OperationResult.Success"/>
            is true, otherwise <see cref="P:Couchbase.OperationResult.Success"/> will be false. If <see cref="F:Couchbase.IO.ResponseStatus.ClientFailure"/> is
            returned, then the operation failed before being sent to the Couchbase Server.</remarks>
        </member>
        <member name="P:Couchbase.OperationResult.Durability">
            <summary>
            The level of durability that the operation achieved
            </summary>
        </member>
        <member name="P:Couchbase.OperationResult.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="P:Couchbase.OperationResult`1.Value">
            <summary>
            The value of the key retrieved from Couchbase Server.
            </summary>
        </member>
        <member name="T:Couchbase.IO.ConnectionPool`1">
            <summary>
            Represents a pool of TCP connections to a Couchbase Server node.
            </summary>
        </member>
        <member name="T:Couchbase.IO.IConnectionPool`1">
            <summary>
            Represents a pool of <see cref="T:Couchbase.IO.IConnection"/> objects which are TCP connections to Couchbase Server. 
            </summary>
        </member>
        <member name="T:Couchbase.IO.IConnectionPool">
            <summary>
            Represents a pool of TCP connections to a Couchbase Server node.
            </summary>
        </member>
        <member name="M:Couchbase.IO.IConnectionPool.Acquire">
            <summary>
            Returns a <see cref="T:Couchbase.IO.IConnection"/> the pool, creating a new one if none are available
            and the <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.MaxSize"/> has not been reached.
            </summary>
            <returns>A TCP <see cref="T:Couchbase.IO.IConnection"/> object to a Couchbase Server.</returns>
        </member>
        <member name="M:Couchbase.IO.IConnectionPool.Release(Couchbase.IO.IConnection)">
            <summary>
            Releases an acquired <see cref="T:Couchbase.IO.IConnection"/> object back into the pool so that it can be reused by another operation.
            </summary>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection"/> to release back into the pool.</param>
        </member>
        <member name="M:Couchbase.IO.IConnectionPool.Initialize">
            <summary>
            Sets the initial state of the pool and adds the MinSize of <see cref="T:Couchbase.IO.IConnection"/> object to the pool.
            After the <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.MinSize"/> is reached, the pool will grow to <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.MaxSize"/>
            and any pending requests will then wait for a <see cref="T:Couchbase.IO.IConnection"/> to be released back into the pool.
            </summary>
        </member>
        <member name="M:Couchbase.IO.IConnectionPool.Count">
            <summary>
            Gets the number of <see cref="T:Couchbase.IO.IConnection"/> within the pool, whether or not they are availabe or not.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.IO.IConnectionPool.Configuration">
            <summary>
            The configuration passed into the pool when it is created. It has fields
            for MaxSize, MinSize, etc.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnectionPool.EndPoint">
            <summary>
            The <see cref="T:System.Net.IPEndPoint"/> of the server that the <see cref="T:Couchbase.IO.IConnection"/>s are connected to.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnectionPool.Connections">
            <summary>
            Returns a collection of <see cref="T:Couchbase.IO.IConnection"/> objects.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IConnectionPool.Owner">
            <summary>
            Gets or sets the <see cref="T:Couchbase.Core.IServer"/> instance which "owns" this pool.
            </summary>
            <value>
            The owner.
            </value>
        </member>
        <member name="P:Couchbase.IO.IConnectionPool.InitializationFailed">
            <summary>
            Gets a value indicating whether the pool failed to initialize properly.
            If for example, TCP connection to the server couldn't be made, then this
            would return false until the connection could be made (after the node went
            back online).
            </summary>
            <value>
              <c>true</c> if initialization failed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.IO.IConnectionPool`1.Release(`0)">
            <summary>
            Releases an acquired <see cref="T:Couchbase.IO.IConnection"/> object back into the pool so that it can be reused by another operation.
            </summary>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection"/> to release back into the pool.</param>
        </member>
        <member name="M:Couchbase.IO.ConnectionPool`1.#ctor(Couchbase.Configuration.Client.PoolConfiguration,System.Net.IPEndPoint,System.Func{Couchbase.IO.ConnectionPool{`0},Couchbase.IO.Converters.IByteConverter,Couchbase.IO.BufferAllocator,`0},Couchbase.IO.Converters.IByteConverter)">
            <summary>
            CTOR for testing/dependency injection.
            </summary>
            <param name="configuration">The <see cref="T:Couchbase.Configuration.Client.PoolConfiguration"/> to use.</param>
            <param name="endPoint">The <see cref="T:System.Net.IPEndPoint"/> of the Couchbase Server.</param>
            <param name="factory">A functory for creating <see cref="T:Couchbase.IO.IConnection"/> objects./&gt;</param>
        </member>
        <member name="M:Couchbase.IO.ConnectionPool`1.Count">
            <summary>
            Gets the number of <see cref="T:Couchbase.IO.IConnection"/> within the pool, whether or not they are available or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.ConnectionPool`1.Initialize">
            <summary>
            Sets the initial state of the pool and adds the MinSize of <see cref="T:Couchbase.IO.IConnection"/> object to the pool.
            </summary>After the <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.MinSize"/> is reached, the pool will grow to <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.MaxSize"/>
            and any pending requests will then wait for a <see cref="T:Couchbase.IO.IConnection"/> to be released back into the pool.
            <remarks></remarks>
        </member>
        <member name="M:Couchbase.IO.ConnectionPool`1.Acquire">
            <summary>
            Returns a <see cref="T:Couchbase.IO.IConnection"/> the pool, creating a new one if none are available
            and the <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.MaxSize"/> has not been reached.
            </summary>
            <returns>A TCP <see cref="T:Couchbase.IO.IConnection"/> object to a Couchbase Server.</returns>
            <exception cref="T:Couchbase.IO.ConnectionUnavailableException">thrown if a thread waits more than the <see cref="P:Couchbase.Configuration.Client.PoolConfiguration.MaxAcquireIterationCount"/>.</exception>
        </member>
        <member name="M:Couchbase.IO.ConnectionPool`1.Release(`0)">
            <summary>
            Releases an acquired <see cref="T:Couchbase.IO.IConnection"/> object back into the pool so that it can be reused by another operation.
            </summary>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection"/> to release back into the pool.</param>
        </member>
        <member name="M:Couchbase.IO.ConnectionPool`1.Dispose">
            <summary>
            Removes and disposes all <see cref="T:Couchbase.IO.IConnection"/> objects in the pool.
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionPool`1.InitializationFailed">
            <summary>
            Gets a value indicating whether the pool failed to initialize properly.
            If for example, TCP connection to the server couldn't be made, then this
            would return false until the connection could be made (after the node went
            back online).
            </summary>
            <value>
              <c>true</c> if initialization failed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.ConnectionPool`1.Configuration">
            <summary>
            The configuration passed into the pool when it is created. It has fields
            for MaxSize, MinSize, etc.
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionPool`1.EndPoint">
            <summary>
            The <see cref="T:System.Net.IPEndPoint"/> of the server that the <see cref="T:Couchbase.IO.IConnection"/>s are connected to.
            </summary>
        </member>
        <member name="P:Couchbase.IO.ConnectionPool`1.Connections">
            <summary>
            Returns a collection of <see cref="T:Couchbase.IO.IConnection"/> objects.
            </summary>
            <remarks>Only returns what is available in the queue at the point in time it is called.</remarks>
        </member>
        <member name="P:Couchbase.IO.ConnectionPool`1.Owner">
            <summary>
            Gets or sets the <see cref="T:Couchbase.Core.IServer"/> instance which "owns" this pool.
            </summary>
            <value>
            The owner.
            </value>
        </member>
        <member name="T:Couchbase.IO.Converters.DefaultConverter">
            <summary>
            The default <see cref="T:Couchbase.IO.Converters.IByteConverter"/> for for converting types and arrays before
            being sent or after being received across the network. Unless an overload is called
            with useNbo = false, Network Byte Order will be used in the conversion.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Converters.IByteConverter">
            <summary>
            Provides an interface for converting types and arrays before being sent or after being received across the network.
            </summary>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToByte(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.Byte"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
             Reads a <see cref="T:System.Int16"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.Int64"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> from the buffer starting at a given offset and length.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt16(System.UInt16,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt16(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt32(System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt32(System.UInt32,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt32(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt32(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt64(System.Int64,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt64(System.UInt64,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt64(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt64(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromString(System.String,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.String"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromString(System.String,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.String"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromByte(System.Byte,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.SetBit(System.Byte@,System.Int32,System.Boolean)">
            <summary>
            Sets the bit from a <see cref="T:System.Byte"/> at a given position.
            </summary>
            <param name="theByte">The byte.</param>
            <param name="position">The position.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.GetBit(System.Byte,System.Int32)">
            <summary>
            Gets the bit as a <see cref="T:System.Boolean"/> from a <see cref="T:System.Byte"/> at a given position.
            </summary>
            <param name="theByte">The byte.</param>
            <param name="position">The position.</param>
            <returns>True if the bit is set; otherwise false.</returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToInt16(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Int16"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToUInt16(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.Int32"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToInt32(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Int32"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToUInt32(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToInt64(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Int64"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.ToUInt64(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt16(System.Int16,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt16(System.Int16,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt16(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt16(System.UInt16,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt32(System.Int32,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt32(System.UInt32,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromInt64(System.Int64,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.IByteConverter.FromUInt64(System.UInt64,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToByte(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.Byte"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.Int16"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToInt16(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Int16"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToUInt16(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.Int32"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToInt32(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Int32"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToUInt32(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.Int64"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToInt64(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.Int64"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToUInt64(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Reads a <see cref="T:System.UInt64"/> from a buffer starting from a given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt16(System.Int16,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt16(System.Int16,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt16(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt16(System.UInt16,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt16(System.UInt16,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt16(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt32(System.Int32,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt32(System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt32(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt32(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt32(System.UInt32,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt32(System.UInt32,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt64(System.Int64,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt64(System.Int64,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromInt64(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt64(System.UInt64,System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="useNbo">If <c>true</c> will make most significant byte first.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt64(System.UInt64,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromUInt64(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromString(System.String,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.String"/> to a dst at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The dst.</param>
            <param name="offset">The offset.</param>
            <remarks>Will resize dst if empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromString(System.String,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.String"/> to a dst at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The dst.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromByte(System.Byte,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.FromByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to a buffer starting at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.SetBit(System.Byte@,System.Int32,System.Boolean)">
            <summary>
            Sets the bit from a <see cref="T:System.Byte"/> at a given position.
            </summary>
            <param name="theByte">The byte.</param>
            <param name="position">The position.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Couchbase.IO.Converters.DefaultConverter.GetBit(System.Byte,System.Int32)">
            <summary>
            Gets the bit as a <see cref="T:System.Boolean"/> from a <see cref="T:System.Byte"/> at a given position.
            </summary>
            <param name="theByte">The byte.</param>
            <param name="position">The position.</param>
            <returns>
            True if the bit is set; otherwise false.
            </returns>
        </member>
        <member name="T:Couchbase.IO.Converters.ManualByteConverter">
            <summary>
            Provides methods for "manually" converting bytes to and from types.
            </summary>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToByte(System.Byte[],System.Int32)">
            <summary>
            Converts a <see cref="T:System.Byte"/> at a given offset to a <see cref="T:System.Byte"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Converts a buffer at a given offset to a <see cref="T:System.Int16"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Converts a buffer at a given offset to a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Converts a buffer at a given offset to a <see cref="T:System.Int32"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Converts a buffer at a given offset to a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Converts a buffer at a given offset to a <see cref="T:System.Int64"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Converts a buffer at a given offset to a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a buffer at a given offset to a <see cref="T:System.String"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromByte(System.Byte,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will create the buffer if null or empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Byte"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromInt16(System.Int16,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will create the buffer if null or empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromUInt16(System.UInt16,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will create the buffer if null or empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromInt16(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int16"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromUInt16(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromInt32(System.Int32,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will create the buffer if null or empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromUInt32(System.UInt32,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will create the buffer if null or empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromInt32(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromUInt32(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromInt64(System.Int64,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int64"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will create the buffer if null or empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromUInt64(System.UInt64,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will create the buffer if null or empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromInt64(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromUInt64(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromString(System.String,System.Byte[]@,System.Int32)">
            <summary>
            Writes a <see cref="T:System.String"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <remarks>Will resize buffer if empty.</remarks>
        </member>
        <member name="M:Couchbase.IO.Converters.ManualByteConverter.FromString(System.String,System.Byte[],System.Int32)">
            <summary>
            Writes a <see cref="T:System.String"/> to a buffer at a given offset.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="T:Couchbase.IO.Operations.KeyState">
            <summary>
            In an Observe operation, indicates whether the key is persisted or not.
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.KeyState.FoundNotPersisted">
            <summary>
            Found, not persisted. Indicates key is in RAM, but not persisted to disk
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.KeyState.FoundPersisted">
            <summary>
            Found, persisted. Indicates key is found in RAM, and is persisted to disk
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.KeyState.NotFound">
            <summary>
            Not found. Indicates the key is persisted, but not found in RAM. In this case,
            a key is not available in any view/index. Couchbase Server will return this keystate
            for any item that is not stored in the server. It indicates you will not expect to have
            the item in a view/index.
            </summary>
        </member>
        <member name="F:Couchbase.IO.Operations.KeyState.LogicalDeleted">
            <summary>
            Logically deleted. Indicates an item is in RAM, but is not yet deleted from disk.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Operations.Authentication.SaslList">
            <summary>
            Gets the supported SASL Mechanisms supported by the Couchbase Server.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Operations.Authentication.SaslStart">
            <summary>
            Starts the SASL authentication process using a specified SASL mechanism type as a key.
            </summary>
        </member>
        <member name="M:Couchbase.IO.Operations.Authentication.SaslStart.#ctor(System.String,System.String,Couchbase.Core.IVBucket,Couchbase.Core.Transcoders.ITypeTranscoder,System.UInt32,System.UInt32)">
            <summary>
                Creates an instance of the <see cref="T:Couchbase.IO.Operations.Authentication.SaslStart"/>" object for starting the SASL authentication process.
            </summary>
            <param name="key">The SASL Mechanism to use: PLAIN or CRAM-MD5.</param>
            <param name="value"></param>
            <param name="vBucket"></param>
            <param name="transcoder"></param>
            <param name="opaque"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Couchbase.IO.Operations.Authentication.SaslStart.#ctor(System.String,System.String,Couchbase.Core.Transcoders.ITypeTranscoder,System.UInt32)">
            <summary>
            Creates an instance of the <see cref="T:Couchbase.IO.Operations.Authentication.SaslStart"/>" object for starting the SASL authentication process.
            </summary>
            <param name="key">The SASL Mechanism to use: PLAIN or CRAM-MD5.</param>
            <param name="value"></param>
            <param name="transcoder"></param>
            <param name="timeout"></param>
        </member>
        <member name="T:Couchbase.IO.Operations.Authentication.SaslStep">
            <summary>
            Peforms the next step in the in SASL authentication process when required by a AuthenticationContinue message from a <see cref="T:Couchbase.IO.Operations.Authentication.SaslStart"/> operation.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Operations.Replace`1">
            <summary>
            Replace a key in the database, failing if the key does not exist.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Couchbase.IO.Operations.Set`1">
            <summary>
            Add a key to the database, replacing the key if it already exists.
            </summary>
            <typeparam name="T">The value to insert.</typeparam>
        </member>
        <member name="T:Couchbase.IO.Strategies.DefaultIOStrategy">
            <summary>
            The default strategy for performing IO
            </summary>
        </member>
        <member name="T:Couchbase.IO.IOStrategy">
            <summary>
            Primary interface for the IO engine.
            </summary>
        </member>
        <member name="M:Couchbase.IO.IOStrategy.Execute``1(Couchbase.IO.Operations.IOperation{``0},Couchbase.IO.IConnection)">
            <summary>
            Executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection"/> the operation is using.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> representing the result of operation.</returns>
            <remarks>This overload is used to perform authentication on the connection if it has not already been authenticated.</remarks>
        </member>
        <member name="M:Couchbase.IO.IOStrategy.Execute``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> representing the result of operation.</returns>
        </member>
        <member name="M:Couchbase.IO.IOStrategy.Execute(Couchbase.IO.Operations.IOperation)">
            <summary>
            Executes an operation for a given key.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> being executed.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> representing the result of operation.</returns>
        </member>
        <member name="M:Couchbase.IO.IOStrategy.ExecuteAsync``1(Couchbase.IO.Operations.IOperation{``0},Couchbase.IO.IConnection)">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection"/> the operation is using.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> representing the result of operation.</returns>
            <remarks>This overload is used to perform authentication on the connection if it has not already been authenticated.</remarks>
        </member>
        <member name="M:Couchbase.IO.IOStrategy.ExecuteAsync``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> representing the result of operation.</returns>
            <remarks>This overload is used to perform authentication on the connection if it has not already been authenticated.</remarks>
        </member>
        <member name="M:Couchbase.IO.IOStrategy.ExecuteAsync(Couchbase.IO.Operations.IOperation,Couchbase.IO.IConnection)">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection"/> the operation is using.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult"/> representing the result of operation.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>
            This overload is used to perform authentication on the connection if it has not already been authenticated.
            </remarks>
        </member>
        <member name="M:Couchbase.IO.IOStrategy.ExecuteAsync(Couchbase.IO.Operations.IOperation)">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult"/> representing the result of operation.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>
            This overload is used to perform authentication on the connection if it has not already been authenticated.
            </remarks>
        </member>
        <member name="P:Couchbase.IO.IOStrategy.EndPoint">
            <summary>
            The IP endpoint of the node in the cluster that this <see cref="T:Couchbase.IO.IOStrategy"/> instance is communicating with.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IOStrategy.ConnectionPool">
            <summary>
            The <see cref="T:Couchbase.IO.IConnectionPool"/> that this <see cref="T:Couchbase.IO.IOStrategy"/> instance is using for acquiring <see cref="T:Couchbase.IO.IConnection"/>s.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IOStrategy.SaslMechanism">
            <summary>
            The SASL mechanism type the <see cref="T:Couchbase.IO.IOStrategy"/> is using for authentication.
            </summary>
            <remarks>This could be PLAIN or CRAM-MD5 depending upon what the server supports.</remarks>
        </member>
        <member name="P:Couchbase.IO.IOStrategy.IsSecure">
            <summary>
            Returns true if internal TCP connections are using SSL.
            </summary>
        </member>
        <member name="P:Couchbase.IO.IOStrategy.SupportsEnhancedDurability">
            <summary>
            Gets a value indicating whether the server supports enhanced durability.
            </summary>
            <value>
            <c>true</c> if the server supports enhanced durability; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Couchbase.IO.Strategies.DefaultIOStrategy.#ctor(Couchbase.IO.IConnectionPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.IO.Strategies.DefaultIOStrategy"/> class.
            </summary>
            <param name="connectionPool">The connection pool.</param>
        </member>
        <member name="M:Couchbase.IO.Strategies.DefaultIOStrategy.#ctor(Couchbase.IO.IConnectionPool,Couchbase.Authentication.SASL.ISaslMechanism)">
            <summary>
            Initializes a new instance of the <see cref="T:Couchbase.IO.Strategies.DefaultIOStrategy"/> class.
            </summary>
            <param name="connectionPool">The connection pool.</param>
            <param name="saslMechanism">The sasl mechanism.</param>
        </member>
        <member name="M:Couchbase.IO.Strategies.DefaultIOStrategy.Execute``1(Couchbase.IO.Operations.IOperation{``0},Couchbase.IO.IConnection)">
            <summary>
            Executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection"/> the operation is using.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult`1"/> representing the result of operation.
            </returns>
            <remarks>
            This overload is used to perform authentication on the connection if it has not already been authenticated.
            </remarks>
        </member>
        <member name="M:Couchbase.IO.Strategies.DefaultIOStrategy.Execute(Couchbase.IO.Operations.IOperation)">
            <summary>
            Executes an operation for a given key.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> being executed.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult"/> representing the result of operation.
            </returns>
        </member>
        <member name="M:Couchbase.IO.Strategies.DefaultIOStrategy.Execute``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult`1"/> representing the result of operation.
            </returns>
        </member>
        <member name="M:Couchbase.IO.Strategies.DefaultIOStrategy.ExecuteAsync``1(Couchbase.IO.Operations.IOperation{``0},Couchbase.IO.IConnection)">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection"/> the operation is using.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult`1"/> representing the result of operation.
            </returns>
            <remarks>
            This overload is used to perform authentication on the connection if it has not already been authenticated.
            </remarks>
        </member>
        <member name="M:Couchbase.IO.Strategies.DefaultIOStrategy.ExecuteAsync(Couchbase.IO.Operations.IOperation,Couchbase.IO.IConnection)">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <param name="connection">The <see cref="T:Couchbase.IO.IConnection"/> the operation is using.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult"/> representing the result of operation.
            </returns>
            <remarks>
            This overload is used to perform authentication on the connection if it has not already been authenticated.
            </remarks>
        </member>
        <member name="M:Couchbase.IO.Strategies.DefaultIOStrategy.ExecuteAsync``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <typeparam name="T">The Type T of the value being stored or retrieved.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult`1"/> representing the result of operation.
            </returns>
            <remarks>
            This overload is used to perform authentication on the connection if it has not already been authenticated.
            </remarks>
        </member>
        <member name="M:Couchbase.IO.Strategies.DefaultIOStrategy.ExecuteAsync(Couchbase.IO.Operations.IOperation)">
            <summary>
            Asynchrounously executes an operation for a given key.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> being executed.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult"/> representing the result of operation.
            </returns>
            <remarks>
            This overload is used to perform authentication on the connection if it has not already been authenticated.
            </remarks>
        </member>
        <member name="M:Couchbase.IO.Strategies.DefaultIOStrategy.Authenticate(Couchbase.IO.IConnection)">
            <summary>
            Authenticates the specified connection.
            </summary>
            <param name="connection">The connection.</param>
            <exception cref="T:System.Security.Authentication.AuthenticationException"></exception>
        </member>
        <member name="M:Couchbase.IO.Strategies.DefaultIOStrategy.EnableEnhancedDurability(Couchbase.IO.IConnection)">
            <summary>
            Enables enhanced durability if it is configured and supported by the server.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:Couchbase.IO.Strategies.DefaultIOStrategy.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Couchbase.IO.Strategies.DefaultIOStrategy.EndPoint">
            <summary>
            The IP endpoint of the node in the cluster that this <see cref="T:Couchbase.IO.IOStrategy"/> instance is communicating with.
            </summary>
        </member>
        <member name="P:Couchbase.IO.Strategies.DefaultIOStrategy.ConnectionPool">
            <summary>
            The <see cref="T:Couchbase.IO.IConnectionPool"/> that this <see cref="T:Couchbase.IO.IOStrategy"/> instance is using for acquiring <see cref="T:Couchbase.IO.IConnection"/>s.
            </summary>
        </member>
        <member name="P:Couchbase.IO.Strategies.DefaultIOStrategy.SaslMechanism">
            <summary>
            The SASL mechanism type the <see cref="T:Couchbase.IO.IOStrategy"/> is using for authentication.
            </summary>
            <remarks>
            This could be PLAIN or CRAM-MD5 depending upon what the server supports.
            </remarks>
        </member>
        <member name="P:Couchbase.IO.Strategies.DefaultIOStrategy.SupportsEnhancedDurability">
            <summary>
            Gets a value indicating whether enhanced durability is enabled.
            </summary>
            <value>
            <c>true</c> if the server supports enhanced durability and it is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.IO.Strategies.DefaultIOStrategy.IsSecure">
            <summary>
            Returns true if internal TCP connections are using SSL.
            </summary>
        </member>
        <member name="M:Couchbase.IO.SslConnection.Dispose">
            <summary>
            Shuts down, closes and disposes of the internal <see cref="T:System.Net.Sockets.Socket"/> instance.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Utils.BufferExtensions">
            <summary>
            Extension methods for reading values from a buffer and converting them to CLR types.
            </summary>
        </member>
        <member name="M:Couchbase.IO.Utils.BufferExtensions.ToOpCode(System.Byte)">
            <summary>
            Converts a <see cref="T:System.Byte"/> to an <see cref="T:Couchbase.IO.Operations.OperationCode"/>
            </summary>
            <param name="value"></param> enumeration value.
            <returns>A <see cref="T:Couchbase.IO.Operations.OperationCode"/> enumeration value.</returns>
            <remarks><see cref="T:Couchbase.IO.Operations.OperationCode"/> are the available operations supported by Couchbase.</remarks>
        </member>
        <member name="M:Couchbase.IO.Utils.BufferExtensions.GetLengthSafe(System.Byte[])">
            <summary>
            Gets the length of a buffer.
            </summary>
            <param name="buffer"></param>
            <returns>0 if the buffer is null, otherwise the length of the buffer.</returns>
        </member>
        <member name="T:Couchbase.N1QL.QueryResult`1">
            <summary>
            The result of a N1QL query.
            </summary>
            <typeparam name="T">The Type of each row returned.</typeparam>
            <remarks>
            The dynamic keyword works well for the Type T.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryResult`1.Couchbase#IResult#ShouldRetry">
            <summary>
            If the response is retryable, returns true.
            </summary>
            <returns></returns>
            <remarks>Intended for internal use only.</remarks>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Success">
            <summary>
            True if query was successful.
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Message">
            <summary>
            Optional message returned by query engine or client
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.RequestId">
            <summary>
            Gets the request identifier.
            </summary>
            <value>
            The request identifier.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.ClientContextId">
            <summary>
            Gets the clientContextID of the request, if one was supplied. Used for debugging.
            </summary>
            <value>
            The client context identifier.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Signature">
            <summary>
            Gets the schema of the results. Present only when the query completes successfully.
            </summary>
            <value>
            The signature of the schema of the request.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Rows">
            <summary>
            Gets a list of all the objects returned by the query. An object can be any JSON value.
            </summary>
            <value>
            A a list of all the objects returned by the query.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Status">
            <summary>
            Gets the status of the request; possible values are: success, running, errors, completed, stopped, timeout, fatal.
            </summary>
            <value>
            The status of the request.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Errors">
            <summary>
            Gets a list of 0 or more error objects; if an error occurred during processing of the request, it will be represented by an error object in this list.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Warnings">
            <summary>
            Gets a list of 0 or more warning objects; if a warning occurred during processing of the request, it will be represented by a warning object in this list.
            </summary>
            <value>
            The warnings.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.Metrics">
            <summary>
            Gets an object containing metrics about the request.
            </summary>
            <value>
            The metrics.
            </value>
        </member>
        <member name="P:Couchbase.N1QL.QueryResult`1.HttpStatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
            <value>
            The HTTP status code.
            </value>
        </member>
        <member name="T:Couchbase.N1QL.IQueryClient">
            <summary>
            An interface for client-side support for executing N1QL queries against a Couchbase Server.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.IQueryClient.Query``1(System.Uri,System.String)">
            <summary>
            Executes an ad-hoc N1QL query against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="server">The <see cref="T:System.Uri"/> of the server.</param>
            <param name="query">A string containing a N1QL query.</param>
            <returns>An <see cref="T:Couchbase.N1QL.IQueryResult`1"/> implementation representing the results of the query.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryClient.QueryAsync``1(System.Uri,System.String)">
            <summary>
            Executes an ad-hoc N1QL query against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="server">The <see cref="T:System.Uri"/> of the server.</param>
            <param name="query">A string containing a N1QL query.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryClient.Prepare(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Prepare an ad-hoc N1QL statement for later execution against a Couchbase Server.
            </summary>
            <param name="toPrepare">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> containing a N1QL statement to be prepared.</param>
            <returns>A <see cref="T:Couchbase.N1QL.IQueryResult`1"/> containing  the <see cref="T:Couchbase.N1QL.QueryPlan"/> representing the reusable
            and cachable execution plan for the statement.</returns>
            <remarks>Most parameters in the IQueryRequest will be ignored, appart from the Statement and the BaseUri.</remarks>
        </member>
        <member name="M:Couchbase.N1QL.IQueryClient.Query``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Synchronously executes an a N1QL query request against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="request">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> to execute.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="M:Couchbase.N1QL.IQueryClient.QueryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Asynchronously executes an a N1QL query request against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="request">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> to execute.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="P:Couchbase.N1QL.IQueryClient.DataMapper">
            <summary>
            The <see cref="T:Couchbase.Views.IDataMapper"/> to use for mapping the output stream to a Type.
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.IQueryClient.HttpClient">
            <summary>
            The <see cref="P:Couchbase.N1QL.IQueryClient.HttpClient"/> to use for the HTTP POST to the Server.
            </summary>
        </member>
        <member name="T:Couchbase.IO.DefaultConnectionFactory">
            <summary>
            A factory creator for <see cref="T:Couchbase.IO.IConnection"/>s
            </summary>
        </member>
        <member name="M:Couchbase.IO.DefaultConnectionFactory.GetGeneric``1">
            <summary>
            Returns a functory for creating <see cref="T:Couchbase.IO.Connection"/> objects.
            </summary>
            <returns>A <see cref="T:Couchbase.IO.Connection"/> based off of the <see cref="T:Couchbase.Configuration.Client.PoolConfiguration"/> of the <see cref="T:Couchbase.IO.IConnectionPool"/>.</returns>
        </member>
        <member name="T:Couchbase.Core.IServer">
            <summary>
            Represents a Couchbase Server node on the network.
            </summary>
        </member>
        <member name="M:Couchbase.Core.IServer.SendAsync(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a key/value operation that contains no body to it's mapped server asynchronously.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to send.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.SendAsync``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a key/value operation to it's mapped server asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.Send``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a key/value operation that contains a body to it's mapped server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult`1"/> representing the result of the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.Send(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a key/value operation that contains no body to it's mapped server.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to send.</param>
            <returns>An <see cref="T:Couchbase.IOperationResult"/> representing the result of the operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.Send``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a request for a View to the server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body for each row result.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> representing the query.</param>
            <returns>An <see cref="T:Couchbase.Views.IViewResult`1"/> representing the result of the query.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.SendAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a request for a View to the server asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body for each row result.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> representing the query.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.Send``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a request for a N1QL query to the server asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body for each row (or document) result.</typeparam>
            <param name="queryRequest">A <see cref="T:Couchbase.N1QL.IQueryRequest"/> object.</param>
            <returns>An <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Couchbase.Core.IServer.SendAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a request for a N1QL query to the server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body for each row (or document) result.</typeparam>
            <param name="queryRequest">A <see cref="T:Couchbase.N1QL.IQueryRequest"/> object.</param>
        </member>
        <member name="M:Couchbase.Core.IServer.CreateSaslMechanismIfNotExists">
            <summary>
            Creates the sasl mechanism using the <see cref="P:Couchbase.Core.IServer.SaslFactory"/> provided if it is null.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IServer.IsMgmtNode">
            <summary>
            Gets a value indicating whether this instance is MGMT node.
            </summary>
            <value>
            <c>true</c> if this instance is MGMT node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IServer.IsQueryNode">
            <summary>
            Gets a value indicating whether this instance is query node.
            </summary>
            <value>
            <c>true</c> if this instance is query node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IServer.IsDataNode">
            <summary>
            Gets a value indicating whether this instance is data node.
            </summary>
            <value>
            <c>true</c> if this instance is data node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IServer.IsIndexNode">
            <summary>
            Gets a value indicating whether this instance is index node.
            </summary>
            <value>
            <c>true</c> if this instance is index node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IServer.IsViewNode">
            <summary>
            Gets a value indicating whether this instance is view node.
            </summary>
            <value>
            <c>true</c> if this instance is view node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.IServer.SaslFactory">
            <summary>
            Gets or sets the SASL factory for authenticating each TCP connection.
            </summary>
            <value>
            The sasl factory.
            </value>
        </member>
        <member name="P:Couchbase.Core.IServer.Revision">
            <summary>
            Gets the clustermap rev# of the <see cref="T:Couchbase.Core.Server"/>.
            </summary>
            <value>
            The revision.
            </value>
        </member>
        <member name="T:Couchbase.Core.IVBucket">
            <summary>
            Represents a VBucket partition in a Couchbase cluster
            </summary>
        </member>
        <member name="M:Couchbase.Core.IVBucket.LocateReplica(System.Int32)">
            <summary>
            Locates a replica for a given index.
            </summary>
            <param name="index">The index of the replica.</param>
            <returns>An <see cref="T:Couchbase.Core.IServer"/> if the replica is found, otherwise null.</returns>
        </member>
        <member name="P:Couchbase.Core.IVBucket.Replicas">
            <summary>
            Gets an array of replica indexes.
            </summary>
        </member>
        <member name="P:Couchbase.Core.IVBucket.Index">
            <summary>
            Gets the index of the VBucket.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Couchbase.Core.IVBucket.Primary">
            <summary>
            Gets the index of the primary node in the VBucket.
            </summary>
            <value>
            The primary index that the key has mapped to.
            </value>
        </member>
        <member name="P:Couchbase.Core.IVBucket.HasReplicas">
            <summary>
            Gets a value indicating whether this instance has replicas.
            </summary>
            <value>
            <c>true</c> if this instance has replicas; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Couchbase.IO.Operations.OperationCode.Hello">
            <summary>
            You say goodbye and I say Hello. Hello, hello.
            </summary>
        </member>
        <member name="T:Couchbase.IO.ResponseStatus">
            <summary>
            The response status for binary Memcached and Couchbase operations.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.None">
            <summary>
             Indicates that the enum has not been set.
            </summary>
            <remarks>0 has already been taken by the Memcached protocol for success.</remarks>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.Success">
            <summary>
            The operation was successful
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.KeyNotFound">
            <summary>
            The key does not exist in the database
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.KeyExists">
            <summary>
            The key exists in the database.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.ValueTooLarge">
            <summary>
            The value of the object stored was too large.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.InvalidArguments">
            <summary>
            The arguments of the operation were invalid.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.ItemNotStored">
            <summary>
            The item could be stored in the database
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.IncrDecrOnNonNumericValue">
            <summary>
            The increment operation was called on a non-numeric value
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.VBucketBelongsToAnotherServer">
            <summary>
            The VBucket the operation was attempted on, no longer belongs to the server.
            <remarks>This is a common during rebalancing after adding or removing a node or during a failover.</remarks>
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.AuthenticationError">
            <summary>
            The connection to Couchbase could not be authenticated.
            </summary>
            <remarks>Check the bucket name and/or password being used.</remarks>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.AuthenticationContinue">
            <summary>
            During SASL authentication, another step (or more) must be made before authentication is complete.
            <remarks>This is a system-level response status.</remarks>
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.InvalidRange">
            <summary>
            The value was outside of supported range.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.UnknownCommand">
            <summary>
            The server received an unknown command from a client.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.OutOfMemory">
            <summary>
            The server is temporarily out of memory.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.NotSupported">
            <summary>
            The operation is not supported.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.InternalError">
            <summary>
            An internal error has occured.
            </summary>
            <remarks>See logs for more details.</remarks>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.Busy">
            <summary>
            The server was too busy to complete the operation.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.TemporaryFailure">
            <summary>
            A temporary error has occured in the server.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.ClientFailure">
            <summary>
            A client error has occured before the operation could be sent to the server.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.OperationTimeout">
            <summary>
            The operation exceeded the specified OperationTimeout configured for the client instance.
            </summary>
            <remarks>The default is 2500ms.</remarks>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.NoReplicasFound">
            <summary>
             Returned when the client cannot locate a replica within the cluster map config for a replica read.
             This would happen if a bucket was not configured to have replicas; if you encounter this error check
             to make sure you have indeed configured replicas on your bucket.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.NodeUnavailable">
            <summary>
            The node or service that the key has been mapped to is offline or cannot be reached.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.TransportFailure">
            <summary>
            Indicates that a transport layer failure occured while the client was sending or receiving data.
            </summary>
        </member>
        <member name="F:Couchbase.IO.ResponseStatus.DocumentMutationLost">
            <summary>
            Document Mutation lost during a hard failover.
            </summary>
        </member>
        <member name="T:Couchbase.IO.SocketAwaitable">
            <summary>
            A class wrapper for <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> which supports await and async on <see cref="T:System.Net.Sockets.Socket"/> objects.
            </summary>
        </member>
        <member name="M:Couchbase.IO.SocketAwaitable.#ctor(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Ctor for <see cref="T:Couchbase.IO.SocketAwaitable"/>.
            </summary>
            <param name="eventArgs">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> object to use for the underlying IO operations.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Couchbase.IO.SocketAwaitable.Reset">
            <summary>
            Resets the object for reuse.
            </summary>
        </member>
        <member name="M:Couchbase.IO.SocketAwaitable.GetAwaiter">
            <summary>
            Gets the object being awaited on.
            </summary>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object.</returns>
        </member>
        <member name="M:Couchbase.IO.SocketAwaitable.OnCompleted(System.Action)">
            <summary>
            Fired when the asyncrounous operation has completed.
            </summary>
            <param name="continuation">The <see cref="T:System.Action"/> object to run if continuation is required.</param>
        </member>
        <member name="M:Couchbase.IO.SocketAwaitable.GetResult">
            <summary>
            Gets the result of the asynchronous <see cref="T:System.Net.Sockets.Socket"/> operation.
            </summary>
            <remarks>Throws <see cref="T:System.Net.Sockets.SocketException"/> if <see cref="T:System.Net.Sockets.SocketError"/> is not <see cref="F:System.Net.Sockets.SocketError.Success"/>.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
        </member>
        <member name="P:Couchbase.IO.SocketAwaitable.EventArgs">
            <summary>
            Gets the internal <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> object that is wrapped by this instance.
            </summary>
        </member>
        <member name="P:Couchbase.IO.SocketAwaitable.IsCompleted">
            <summary>
            Returns true if the operation has comepleted.
            </summary>
        </member>
        <member name="T:Couchbase.IO.Utils.SocketExtensions">
            <summary>
            Extension methods for using <see cref="T:System.Net.Sockets.Socket"/> instances.
            </summary>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.SetKeepAlives(System.Net.Sockets.Socket,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Enable TCP keep-alives, the time and interval on a managed Socket.
            </summary>
            <param name="socket">The socket to enable keep-alives on.</param>
            <param name="on">if set to <c>true</c> keep-alives are enabled; false to disable.</param>
            <param name="time">The duration between two keepalive transmissions in idle condition.</param>
            <param name="interval">The duration between two successive keepalive retransmissions, if acknowledgement to the previous keepalive transmission is not received.</param>
            <remarks>Credit: <see href="http://blogs.msdn.com/b/lcleeton/archive/2006/09/15/754932.aspx"/></remarks>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.ReceiveAsync(System.Net.Sockets.Socket,Couchbase.IO.SocketAwaitable)">
            <summary>
            Begins an asynchronous request to receive data from a connected <see cref="T:System.Net.Sockets.Socket"/> object using await.
            </summary>
            <param name="socket">The connected <see cref="T:System.Net.Sockets.Socket"/> object to use.</param>
            <param name="awaitable">The <see cref="T:Couchbase.IO.SocketAwaitable"/> to await on.</param>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object ready to be reused.</returns>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.SendAsync(System.Net.Sockets.Socket,Couchbase.IO.SocketAwaitable)">
            <summary>
            Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket"/> object using await.
            </summary>
            <param name="socket">The connected <see cref="T:System.Net.Sockets.Socket"/> object to use.</param>
            <param name="awaitable">The <see cref="T:Couchbase.IO.SocketAwaitable"/> to await on.</param>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object ready to be reused.</returns>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.ConnectAsync(System.Net.Sockets.Socket,Couchbase.IO.SocketAwaitable)">
            <summary>
            Begins an asynchronous to a connection to a remote host using await.
            </summary>
            <param name="socket">The connected <see cref="T:System.Net.Sockets.Socket"/> object to use.</param>
            <param name="awaitable">The <see cref="T:Couchbase.IO.SocketAwaitable"/> to await on.</param>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object ready to be reused.</returns>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.DisconnectAsync(System.Net.Sockets.Socket,Couchbase.IO.SocketAwaitable)">
            <summary>
            Begins an asynchronous to disconnect from a remote host using await.
            </summary>
            <param name="socket">The connected <see cref="T:System.Net.Sockets.Socket"/> object to use.</param>
            <param name="awaitable">The <see cref="T:Couchbase.IO.SocketAwaitable"/> to await on.</param>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object ready to be reused.</returns>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.AcceptAsync(System.Net.Sockets.Socket,Couchbase.IO.SocketAwaitable)">
            <summary>
            Begins an asynchronous to accept an incoming connection attempt using await.
            </summary>
            <param name="socket">The connected <see cref="T:System.Net.Sockets.Socket"/> object to use.</param>
            <param name="awaitable">The <see cref="T:Couchbase.IO.SocketAwaitable"/> to await on.</param>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object ready to be reused.</returns>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.ReceiveAsync(Couchbase.IO.SocketAwaitable)">
            <summary>
            Begins an asynchronous request to receive data from a connected <see cref="T:System.Net.Sockets.Socket"/> object using await.
            </summary>
            <param name="awaitable">The <see cref="T:Couchbase.IO.SocketAwaitable"/> to await on.</param>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object ready to be reused.</returns>
        </member>
        <member name="M:Couchbase.IO.Utils.SocketExtensions.SendAsync(Couchbase.IO.SocketAwaitable)">
            <summary>
            Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket"/> object using await.
            </summary>
            <param name="awaitable">The <see cref="T:Couchbase.IO.SocketAwaitable"/> to await on.</param>
            <returns>A <see cref="T:Couchbase.IO.SocketAwaitable"/> object ready to be reused.</returns>
        </member>
        <member name="T:Couchbase.IO.Utils.HeaderIndexFor">
            <summary>
            Bytes offsets and constants for BinaryProtocolRevamped packets.
            </summary>
            <see cref="!:http://code.google.com/p/memcached/wiki/BinaryProtocolRevamped#Packet_Structure"/>
        </member>
        <member name="T:Couchbase.N1QL.QueryClient">
            <summary>
            A <see cref="T:Couchbase.Views.IViewClient"/> implementation for executing N1QL queries against a Couchbase Server.
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.QueryAsync``1(System.Uri,System.String)">
            <summary>
            Executes an ad-hoc N1QL query against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="server">The <see cref="T:System.Uri"/> of the server.</param>
            <param name="query">A string containing a N1QL query.</param>
            <returns>An <see cref="T:Couchbase.N1QL.IQueryResult`1"/> implementation representing the results of the query.</returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.Query``1(System.Uri,System.String)">
            <summary>
            Executes an ad-hoc N1QL query against a Couchbase Server.
            </summary>
            <typeparam name="T">The Type to cast the resulting rows to.</typeparam>
            <param name="server">The <see cref="T:System.Uri"/> of the server.</param>
            <param name="query">A string containing a N1QL query.</param>
            <returns>An <see cref="T:Couchbase.N1QL.IQueryResult`1"/> implementation representing the results of the query.</returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.Prepare(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Prepare an ad-hoc N1QL statement for later execution against a Couchbase Server.
            </summary>
            <param name="toPrepare">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> containing a N1QL statement to be prepared.</param>
            <returns>
            A <see cref="T:Couchbase.N1QL.IQueryResult`1"/> containing  the <see cref="T:Couchbase.N1QL.QueryPlan"/> representing the reusable
            and cachable execution plan for the statement.
            </returns>
            <remarks>
            Most parameters in the IQueryRequest will be ignored, appart from the Statement and the BaseUri.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.PrepareAsync(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Prepare an ad-hoc N1QL statement for later execution against a Couchbase Server asynchronously
            </summary>
            <param name="toPrepare">The <see cref="T:Couchbase.N1QL.IQueryRequest"/> containing a N1QL statement to be prepared.</param>
            <returns>
            A <see cref="T:Couchbase.N1QL.IQueryResult`1"/> containing  the <see cref="T:Couchbase.N1QL.QueryPlan"/> representing the reusable
            and cachable execution plan for the statement.
            </returns>
            <remarks>
            Most parameters in the IQueryRequest will be ignored, appart from the Statement and the BaseUri.
            </remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.Query``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Executes the <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase server.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryRequest">The query request.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.QueryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Executes the <see cref="T:Couchbase.N1QL.IQueryRequest"/> against the Couchbase server asynchronously.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryRequest">The query request.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.CheckRetry``1(Couchbase.N1QL.IQueryRequest,Couchbase.N1QL.IQueryResult{``0})">
            <summary>
            Checks the request and result to see if a retry is waranted. Will only retry if
            the request is not adhoc, has not already been retried and contains a N1QL error
            that matches criteria for retry (errors 4050, 4070 and some 5000).
            </summary>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.PrepareStatementIfNotAdHoc(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Prepares the statement if the <see cref="T:Couchbase.N1QL.IQueryRequest"/> is not ad-hoc and caches it for reuse.
            </summary>
            <param name="originalRequest">The original query request.</param>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.PrepareStatementIfNotAdHocAsync(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Prepares the statement if the <see cref="T:Couchbase.N1QL.IQueryRequest"/> is not ad-hoc and caches it for reuse.asynchronously.
            </summary>
            <param name="originalRequest">The original query request.</param>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.GetDataMapper(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Returns the <see cref="T:Couchbase.Views.IDataMapper"/> to use for a given <see cref="T:Couchbase.N1QL.IQueryRequest"/>
            </summary>
            <param name="queryRequest">Request to get the <see cref="T:Couchbase.Views.IDataMapper"/> for</param>
            <returns><see cref="T:Couchbase.Views.IDataMapper"/> to use for the request</returns>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.ExecuteQuery``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Executes the <see cref="T:Couchbase.N1QL.IQueryRequest"/> using HTTP POST to the Couchbase Server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of each row returned by the query.</typeparam>
            <param name="queryRequest">The query request.</param>
            <returns></returns>
            <remarks>The format for the querying is JSON</remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.ExecuteQueryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Executes the <see cref="T:Couchbase.N1QL.IQueryRequest"/> using HTTP POST to the Couchbase Server asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of each row returned by the query.</typeparam>
            <param name="queryRequest">The query request.</param>
            <returns></returns>
            <remarks>The format for the querying is JSON</remarks>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.InvalidateQueryCache">
            <summary>
            Invalidates and clears the query cache. This method can be used to explicitly clear the internal N1QL query cache. This cache will
            be filled with non-adhoc query statements (query plans) to speed up those subsequent executions. Triggering this method will wipe
            out the complete cache, which will not cause an interruption but rather all queries need to be re-prepared internally. This method
            is likely to be deprecated in the future once the server side query engine distributes its state throughout the cluster.
            </summary>
            <returns>
            An <see cref="T:System.Int32"/> representing the size of the cache before it was cleared.
            </returns>
            <exception cref="T:System.OverflowException">The dictionary already contains the maximum number of elements (<see cref="F:System.Int32.MaxValue"/>).</exception>
        </member>
        <member name="M:Couchbase.N1QL.QueryClient.ProcessError``1(System.Exception,Couchbase.N1QL.QueryResult{``0})">
            <summary>
            Sets the <see cref="T:Couchbase.N1QL.IQueryRequest"/> state if an error occurred during the request.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ex">The ex.</param>
            <param name="queryResult">The query result.</param>
        </member>
        <member name="P:Couchbase.N1QL.QueryClient.DataMapper">
            <summary>
            The <see cref="T:Couchbase.Views.IDataMapper"/> to use for mapping the output stream to a Type.
            </summary>
        </member>
        <member name="P:Couchbase.N1QL.QueryClient.HttpClient">
            <summary>
            The <see cref="P:Couchbase.N1QL.QueryClient.HttpClient"/> to use for the HTTP POST to the Server.
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Couchbase.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Couchbase.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Couchbase.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:Couchbase.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:Couchbase.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:Couchbase.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:Couchbase.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Couchbase.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:Couchbase.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:Couchbase.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:Couchbase.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Couchbase.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:Couchbase.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:Couchbase.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Couchbase.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:Couchbase.Core.Server">
            <summary>
            Represents a Couchbase Server node on the network.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Server._heartBeatTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Handles the Elapsed event of the _heartBeatTimer control which is enabled
            whenever a node is unresponsive and possible offline. Once it is started,
            the node will be flagged as <see cref="F:Couchbase.Core.Server._isDown"/> (which will be true). When the node
            is down, all operations (K/V, view and or query) that are mapped to this node will fail
            with a <see cref="T:Couchbase.Core.NodeUnavailableException"/> - however, since operations are retried,
            it may be routed to a live node and succeed. The logs will reflect this but the result
            to the user will be a successful execution of a given operation.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:System.Timers.ElapsedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Couchbase.Core.Server.CheckQueryNode">
            <summary>
            If the node is strictly a query node, this method will send a simple statement to
            be executed. If it returns successfully, then the node will be marked as not
            <see cref="F:Couchbase.Core.Server._isDown">down</see> and put back into rotation.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Server.CheckDataNode">
            <summary>
            If a data only node is flaged as down, this method will be invoked every <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.NodeAvailableCheckInterval"/>.
            When invoked, it will attempt to get a connection and perform a NOOP on it.
            If the NOOP succeeds, then the node will be put back into rotation.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Server.CreateSaslMechanismIfNotExists">
            <summary>
            Creates the sasl mechanism using the <see cref="P:Couchbase.Core.Server.SaslFactory"/> provided if it is null.
            </summary>
        </member>
        <member name="M:Couchbase.Core.Server.CheckOnline(System.Boolean)">
            <summary>
            This method checks to see if the node has experianced a number of IO failures which exceed
            the <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.IOErrorThreshold"/> value defined in the configuration
            within a specific duration specified by <see cref="P:Couchbase.Configuration.Client.ClientConfiguration.IOErrorCheckInterval"/>.
            </summary>
            <param name="isDead">if set to <c>true</c> is dead.</param>
        </member>
        <member name="M:Couchbase.Core.Server.HandleNodeUnavailable(Couchbase.IO.Operations.IOperation)">
            <summary>
            If the node is down, handles the return result for a K/V operation.
            </summary>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Server.HandleNodeUnavailable``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            If the node is down, handles the return result for a K/V operation.
            </summary>
            <typeparam name="T">The message body <see cref="T:System.Type"/>.</typeparam>
            <param name="operation">The operation.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Server.HandleNodeUnavailable``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            If the node is down, handles the return result for a query operation.
            </summary>
            <typeparam name="T">The message body <see cref="T:System.Type"/>.</typeparam>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Server.Send(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a key/value operation that contains no body to it's mapped server.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to send.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult"/> representing the result of the operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Server.Send``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a key/value operation that contains a body to it's mapped server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <returns>
            An <see cref="T:Couchbase.IOperationResult`1"/> representing the result of the operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Server.SendAsync``1(Couchbase.IO.Operations.IOperation{``0})">
            <summary>
            Sends a key/value operation to it's mapped server asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body.</typeparam>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation`1"/> to send.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Server.SendAsync(Couchbase.IO.Operations.IOperation)">
            <summary>
            Sends a key/value operation that contains no body to it's mapped server asynchronously.
            </summary>
            <param name="operation">The <see cref="T:Couchbase.IO.Operations.IOperation"/> to send.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Server.SendAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a request for a View to the server asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body for each row result.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> representing the query.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Server.Send``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Sends a request for a View to the server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body for each row result.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> representing the query.</param>
            <returns>
            An <see cref="T:Couchbase.Views.IViewResult`1"/> representing the result of the query.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Server.Couchbase#Core#IServer#Send``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a request for a N1QL query to the server asynchronously.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body for each row (or document) result.</typeparam>
            <param name="queryRequest">A <see cref="T:Couchbase.N1QL.IQueryRequest"/> object.</param>
            <returns>
            An <see cref="T:System.Threading.Tasks.Task`1"/> object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Couchbase.Core.Server.Couchbase#Core#IServer#SendAsync``1(Couchbase.N1QL.IQueryRequest)">
            <summary>
            Sends a request for a N1QL query to the server.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> T of the body for each row (or document) result.</typeparam>
            <param name="queryRequest">A <see cref="T:Couchbase.N1QL.IQueryRequest"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Core.Server.InvalidateQueryCache">
            <summary>
            Invalidates and clears the query cache. This method can be used to explicitly clear the internal N1QL query cache. This cache will
            be filled with non-adhoc query statements (query plans) to speed up those subsequent executions. Triggering this method will wipe
            out the complete cache, which will not cause an interruption but rather all queries need to be re-prepared internally. This method
            is likely to be deprecated in the future once the server side query engine distributes its state throughout the cluster.
            </summary>
            <returns>
            An <see cref="T:System.Int32"/> representing the size of the cache before it was cleared.
            </returns>
        </member>
        <member name="P:Couchbase.Core.Server.CachedViewBaseUri">
            <summary>
            The base <see cref="T:System.Uri"/> for building a View query request.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Server.CachedQueryBaseUri">
            <summary>
            The base <see cref="T:System.Uri"/> for building a N1QL query request.
            </summary>
        </member>
        <member name="P:Couchbase.Core.Server.IsMgmtNode">
            <summary>
            Gets a value indicating whether this instance is MGMT node.
            </summary>
            <value>
            <c>true</c> if this instance is MGMT node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.IsQueryNode">
            <summary>
            Gets a value indicating whether this instance is query node.
            </summary>
            <value>
            <c>true</c> if this instance is query node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.IsDataNode">
            <summary>
            Gets a value indicating whether this instance is data node.
            </summary>
            <value>
            <c>true</c> if this instance is data node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.IsIndexNode">
            <summary>
            Gets a value indicating whether this instance is index node.
            </summary>
            <value>
            <c>true</c> if this instance is index node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.IsViewNode">
            <summary>
            Gets a value indicating whether this instance is view node.
            </summary>
            <value>
            <c>true</c> if this instance is view node; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.SaslFactory">
            <summary>
            Gets or sets the SASL factory for authenticating each TCP connection.
            </summary>
            <value>
            The sasl factory.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.EndPoint">
            <summary>
            Gets the remote <see cref="T:System.Net.IPEndPoint"/> of this node.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.ConnectionPool">
            <summary>
            Gets a reference to the connection pool thar this node is using.
            </summary>
            <value>
            The connection pool.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.IsSecure">
            <summary>
            Gets a value indicating whether this instance node is sending
            and receiving data securely with TLS.
            </summary>
            <value>
              <c>true</c> if this instance is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.IsDown">
            <summary>
            Gets or sets a value indicating whether this instance is down.
            </summary>
            <value>
              <c>true</c> if this instance is down; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.QueryClient">
            <summary>
            Gets the client used for sending N1QL requests to the N1QL service.
            </summary>
            <value>
            The query client.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.ViewClient">
            <summary>
            Gets the view client for sending View requests to the data service.
            </summary>
            <value>
            The view client.
            </value>
        </member>
        <member name="P:Couchbase.Core.Server.Revision">
            <summary>
            Gets the clustermap rev# of the <see cref="T:Couchbase.Core.Server"/>.
            </summary>
            <value>
            The revision.
            </value>
        </member>
        <member name="T:Couchbase.Core.VBucket">
            <summary>
            Represents a VBucket partition in a Couchbase cluster
            </summary>
        </member>
        <member name="M:Couchbase.Core.VBucket.LocatePrimary">
             <summary>
             Gets a reference to the primary server for this VBucket.
             </summary>
             <returns>A <see cref="T:Couchbase.Core.IServer"/> reference which is the primary server for this <see cref="T:Couchbase.Core.VBucket"/></returns>
            <remarks>If the VBucket doesn't have a master, it will return a random <see cref="T:Couchbase.Core.IServer"/> to force a NMV and reconfig.</remarks>
        </member>
        <member name="M:Couchbase.Core.VBucket.LocateReplica(System.Int32)">
            <summary>
            Locates a replica for a given index.
            </summary>
            <param name="index">The index of the replica.</param>
            <returns>An <see cref="T:Couchbase.Core.IServer"/> if the replica is found, otherwise null.</returns>
        </member>
        <member name="P:Couchbase.Core.VBucket.Replicas">
            <summary>
            Gets an array of replica indexes.
            </summary>
        </member>
        <member name="P:Couchbase.Core.VBucket.Index">
            <summary>
            Gets the index of the VBucket.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Couchbase.Core.VBucket.Primary">
            <summary>
            Gets the index of the primary node in the VBucket.
            </summary>
            <value>
            The primary index that the key has mapped to.
            </value>
        </member>
        <member name="P:Couchbase.Core.VBucket.Rev">
            <summary>
            Gets or sets the configuration revision.
            </summary>
            <value>
            The rev.
            </value>
        </member>
        <member name="P:Couchbase.Core.VBucket.HasReplicas">
            <summary>
            Gets a value indicating whether this instance has replicas.
            </summary>
            <value>
            <c>true</c> if this instance has replicas; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Couchbase.ServerUnavailableException">
            <summary>
            Thrown when the client cannot find a healthy server to execute an operation on. This
            could temporarily happen during a swap/failover/rebalance situation. The calling code
            could decide to retry the operation after handling this exception.
            </summary>
        </member>
        <member name="T:Couchbase.Utils.ArraySegmentExtensions">
            <summary>
            Extension methods for copying values to <see cref="T:System.ArraySegment`1"/> instances.
            </summary>
        </member>
        <member name="M:Couchbase.Utils.ArraySegmentExtensions.ConvertAndCopy(System.ArraySegment{System.Byte},System.UInt32,System.Int32,System.Int32)">
            <summary>
            Takes a value, converts it from little-endian to big-endian and the copies it to the <see cref="T:System.ArraySegment`1"/> at a given offset and length.
            </summary>
            <param name="arraySegment">The <see cref="T:System.ArraySegment`1"/> to copy the value to.</param>
            <param name="value">An <see cref="T:System.UInt32"/> to copy to the <see cref="T:System.ArraySegment`1"/>.</param>
            <param name="offset">The offset to write the value to within the <see cref="T:System.ArraySegment`1"/></param>
            <param name="count">The length of the write - e.g. 4 for a int, 8 for a long.</param>
        </member>
        <member name="M:Couchbase.Utils.ArraySegmentExtensions.ConvertAndCopy(System.ArraySegment{System.Byte},System.UInt64,System.Int32,System.Int32)">
            <summary>
            Takes a value, converts it from little-endian to big-endian and the copies it to the <see cref="T:System.ArraySegment`1"/> at a given offset and length.
            </summary>
            <param name="arraySegment">The <see cref="T:System.ArraySegment`1"/> to copy the value to.</param>
            <param name="value">An <see cref="T:System.UInt64"/> to copy to the <see cref="T:System.ArraySegment`1"/>.</param>
            <param name="offset">The offset to write the value to within the <see cref="T:System.ArraySegment`1"/></param>
            <param name="count">The length of the write - e.g. 4 for a int, 8 for a long.</param>
        </member>
        <member name="M:Couchbase.Utils.StringExtensions.ToEnum``1(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> to an <see cref="T:System.Enum"/>. Assumes that
            the conversion is possible; e.g. the <see cref="!:value"/> field must match an enum name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if the conversion cannot be made.</exception>
        </member>
        <member name="T:Couchbase.Utils.UriExtensions">
            <summary>
            Provides extension methods for working with <see cref="T:System.Uri"/> class instances.
            </summary>
        </member>
        <member name="M:Couchbase.Utils.UriExtensions.GetIpAddress(System.Uri)">
            <summary>
            Resolves a given <see cref="T:System.Uri"/> to an <see cref="T:System.Net.IPAddress"/> using DNS if necessary.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to resolve the <see cref="T:System.Net.IPAddress"/> from.</param>
            <returns>An <see cref="T:System.Net.IPAddress"/> reference.</returns>
            <exception cref="T:Couchbase.Utils.UnsupportedAddressFamilyException"></exception>
            <remarks>Only returns IPV4 Addresses!</remarks>
        </member>
        <member name="M:Couchbase.Utils.UriExtensions.GetIPEndPoint(System.Uri,System.Int32)">
            <summary>
            Gets an <see cref="T:System.Net.IPEndPoint"/> given a valid <see cref="T:System.Uri"/> instance and port.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to use to get the <see cref="T:System.Net.IPEndPoint"/></param>
            <param name="port">The network port to use.</param>
            <returns>An <see cref="T:System.Net.IPEndPoint"/> reference.</returns>
        </member>
        <member name="T:Couchbase.Views.SpatialViewQuery">
            <summary>
            An implementation for Spatial view request which provide multidimensional spatial indexes in Couchbase.
            </summary>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.Couchbase#Views#IViewQueryable#BaseUri(System.Uri)">
            <summary>
            Sets the base uri for the query if it's not set in the constructor.
            </summary>
            <param name="uri">The base uri to use - this is normally set internally and may be overridden by configuration.</param>
            <returns>An IViewQuery object for chaining</returns>
            <remarks>Note that this will override the baseUri set in the ctor. Additionally, this method may be called internally by the <see cref="T:Couchbase.Core.IBucket"/> and overridden.</remarks>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.StartRange(System.Nullable{System.Double}[])">
            <summary>
            The start range of the spatial query.
            </summary>
            <param name="startRange">The start range.</param>
            <returns></returns>
            <remarks>
            The number of elements must match the number of dimensions of the index
            </remarks>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.StartRange(System.Collections.Generic.List{System.Nullable{System.Double}})">
            <summary>
            The start range of the spatial query.
            </summary>
            <param name="startRange">The start range.</param>
            <returns></returns>
            <remarks>
            The number of elements must match the number of dimensions of the index
            </remarks>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.EndRange(System.Collections.Generic.List{System.Nullable{System.Double}})">
            <summary>
            The end range of the spatial query.
            </summary>
            <param name="endRange">The end range.</param>
            <returns></returns>
            <remarks>
            The number of elements must match the number of dimensions of the index
            </remarks>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.EndRange(System.Nullable{System.Double}[])">
            <summary>
            The end range of the spatial query.
            </summary>
            <param name="endRange">The end range.</param>
            <returns></returns>
            <remarks>
            The number of elements must match the number of dimensions of the index
            </remarks>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.Range(System.Collections.Generic.List{System.Nullable{System.Double}},System.Collections.Generic.List{System.Nullable{System.Double}})">
            <summary>
            The start and end range for a spatial query.
            </summary>
            <param name="startRange">The start range.</param>
            <param name="endRange">The end range.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.From(System.String,System.String)">
            <summary>
            Specifies the design document and view to execute.
            </summary>
            <param name="designDoc">The design document.</param>
            <param name="view">The view.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.Bucket(System.String)">
            <summary>
            Specifies the name of the bucket to query.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.DesignDoc(System.String)">
            <summary>
            Specifies the design document.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.View(System.String)">
            <summary>
            Specifies the view to execute.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.Skip(System.Int32)">
            <summary>
            Skip this number of records before starting to return the results.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.Stale(Couchbase.Views.StaleState)">
            <summary>
            Specifies the level of data freshness.
            </summary>
            <param name="staleState">State of the stale.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.Limit(System.Int32)">
            <summary>
            Limit the number of the returned documents to the specified number.
            </summary>
            <param name="limit">The limit.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.ConnectionTimeout(System.Int32)">
            <summary>
            Specifies the server timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.Development(System.Boolean)">
            <summary>
            Toggles the query between development or production dataset and View.
            </summary>
            <param name="development">If true the development View will be used</param>
            <returns>An ISpatialViewQuery object for chaining</returns>
            <remarks>The default is false; use the published, production view.</remarks>
        </member>
        <member name="M:Couchbase.Views.SpatialViewQuery.RawUri">
            <summary>
            Raws the URI.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Views.SpatialViewQuery.Port">
            <summary>
            Gets the port to use if the default port is overridden.
            </summary>
            <value>
            The port.
            </value>
        </member>
        <member name="P:Couchbase.Views.SpatialViewQuery.SslPort">
            <summary>
            Gets the SSL port to use if the default SSL/TLS port is overridden.
            </summary>
            <value>
            The SSL port.
            </value>
        </member>
        <member name="P:Couchbase.Views.SpatialViewQuery.BucketName">
            <summary>
            Gets the name of the bucket.
            </summary>
            <value>
            The name of the bucket.
            </value>
        </member>
        <member name="P:Couchbase.Views.SpatialViewQuery.UseSsl">
            <summary>
            Gets or sets a value indicating whether to use SSL.
            </summary>
            <value>
              <c>true</c> if [use SSL]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Couchbase.Views.SpatialViewQuery.RetryAttempts">
            <summary>
            Gets or sets the retry attempts.
            </summary>
            <value>
            The retry attempts.
            </value>
        </member>
        <member name="P:Couchbase.Views.SpatialViewQuery.Host">
            <summary>
            Gets the host that will execute the query.
            </summary>
            <value>
            The host.
            </value>
        </member>
        <member name="T:Couchbase.Views.ViewResult`1">
            <summary>
            Represents the results of a View query.
            </summary>
            <typeparam name="T">The Type parameter to be used for deserialization by the <see cref="T:Couchbase.Views.IDataMapper"/>
            implementation.</typeparam>
        </member>
        <member name="M:Couchbase.Views.ViewResult`1.CannotRetry">
            <summary>
            Checks to see if the operation is eligible for a retry.
            </summary>
            <returns>True if the operation should not be retried.</returns>
        </member>
        <member name="M:Couchbase.Views.ViewResult`1.Check500ForRetry">
            <summary>
            Checks to see if a HTTP 500 can result in a retry operation
            </summary>
            <remarks>Derived rules: https://docs.google.com/document/d/1GhRxvPb7xakLL4g00FUi6fhZjiDaP33DTJZW7wfSxrI/edit</remarks>
            <returns>True if the operation should not be retried</returns>
        </member>
        <member name="M:Couchbase.Views.ViewResult`1.Check404ForRetry">
            <summary>
            Checks to see if a HTTP 400 can result in a retry operation
            </summary>
            <remarks>Derived rules: https://docs.google.com/document/d/1GhRxvPb7xakLL4g00FUi6fhZjiDaP33DTJZW7wfSxrI/edit</remarks>
            <returns>True if the operation should not be retried</returns>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.TotalRows">
            <summary>
            The total number of rows.
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.Rows">
            <summary>
            The results of the query if successful as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.Values">
            <summary>
            Returns the value of each element within the <see cref="P:Couchbase.Views.ViewResult`1.Rows"/> property as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.Error">
            <summary>
            An error message if one occured.
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.StatusCode">
            <summary>
            The HTTP Status Code for the request
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.Success">
            <summary>
            True if the request was successful
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.Message">
            <summary>
            An optional message returned by the server or the client
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewResult`1.Exception">
            <summary>
            If Success is false and an exception has been caught internally, this field will contain the exception.
            </summary>
        </member>
        <member name="T:Couchbase.Views.IDataMapper">
            <summary>
            Provides and interface for mapping the results of a <see cref="T:Couchbase.Views.ViewQuery"/> to it's <see cref="T:Couchbase.Views.IViewResult`1"/>
            </summary>
        </member>
        <member name="M:Couchbase.Views.IDataMapper.Map``1(System.IO.Stream)">
            <summary>
            Maps the entire results
            </summary>
            <typeparam name="T">The <see cref="T:Couchbase.Views.IViewResult`1"/>'s Type paramater.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> results of the query.</param>
            <returns>An object deserialized to it's T type.</returns>
        </member>
        <member name="T:Couchbase.Views.IViewClient">
            <summary>
            An interface for client-side support for querying Couchbase views.
            </summary>
        </member>
        <member name="M:Couchbase.Views.IViewClient.ExecuteAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Executes a <see cref="T:Couchbase.Views.IViewQuery"/> asynchronously against a View.
            </summary>
            <typeparam name="T">The Type parameter of the result returned by the query.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQueryable"/> to execute on.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="M:Couchbase.Views.IViewClient.Execute``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Executes a <see cref="T:Couchbase.Views.IViewQuery"/> synchronously against a View.
            </summary>
            <typeparam name="T">The Type parameter of the result returned by the query.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQueryable"/> to execute on.</param>
            <returns>The <see cref="T:Couchbase.Views.IViewResult`1"/> instance which is the results of the query.</returns>
        </member>
        <member name="P:Couchbase.Views.IViewClient.Mapper">
            <summary>
            An <see cref="T:Couchbase.Views.IDataMapper"/> instance for handling deserialization of <see cref="T:Couchbase.Views.IViewResult`1"/>
            and mapping then to the queries Type paramater.
            </summary>
        </member>
        <member name="P:Couchbase.Views.IViewClient.HttpClient">
            <summary>
            The <see cref="P:Couchbase.Views.IViewClient.HttpClient"/> used to execute the HTTP request against the Couchbase server.
            </summary>
        </member>
        <member name="T:Couchbase.Views.IViewQuery">
            <summary>
            Implemented as an object that can query a Couchbase View.
            <remarks>This is a "Fluent" style interface and methods can be chained togather.</remarks>
            </summary>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Asc">
            <summary>
            Return the documents in ascending by key order
            </summary>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Desc">
            <summary>
            Return the documents in descending by key order
            </summary>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.EndKey(System.Object)">
            <summary>
            Stop returning records when the specified key is reached. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to stop at</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.EndKey(System.Object,System.Boolean)">
            <summary>
            Stop returning records when the specified key is reached. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to stop at</param>
            <param name="encode">True to JSON encode the parameter.</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.EndKeyDocId(System.Object)">
            <summary>
            Stop returning records when the specified document ID is reached
            </summary>
            <param name="docId">The document Id to stop at.</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.FullSet">
            <summary>
            Use the full cluster data set (development views only).
            </summary>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Group(System.Boolean)">
            <summary>
            Group the results using the reduce function to a group or single row
            </summary>
            <param name="group">True to group using the reduce function into a single row</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.GroupLevel(System.Int32)">
            <summary>
            Specify the group level to be used
            </summary>
            <param name="level">The level of grouping to use</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.InclusiveEnd(System.Boolean)">
            <summary>
            Specifies whether the specified end key should be included in the result
            </summary>
            <param name="inclusiveEnd">True to include the last key in the result</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Key(System.Object)">
            <summary>
            Return only documents that match the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="key">The key to retrieve</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Key(System.Object,System.Boolean)">
            <summary>
            Return only documents that match the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="key">The key to retrieve</param>
            <param name="encode">True to JSON encode the parameter.</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Keys(System.Collections.IEnumerable)">
            <summary>
            Return only documents that match one of keys specified within the given array. Key must be specified as a JSON value. Sorting is not applied when using this option.
            </summary>
            <param name="keys">The keys to retrieve</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Keys(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Return only documents that match one of keys specified within the given array. Key must be specified as a JSON value. Sorting is not applied when using this option.
            </summary>
            <param name="keys">The keys to retrieve</param>
            /// <param name="encode">True to JSON encode the parameter.</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.OnError(System.Boolean)">
            <summary>
            Sets the response in the event of an error
            </summary>
            <param name="stop">True to stop in the event of an error; true to continue</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Reduce(System.Boolean)">
            <summary>
            Use the reduction function
            </summary>
            <param name="reduce">True to use the reduduction property. Default is false;</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.StartKey(System.Object)">
            <summary>
            Return records with a value equal to or greater than the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to return records greater than or equal to.</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.StartKey(System.Object,System.Boolean)">
            <summary>
            Return records with a value equal to or greater than the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to return records greater than or equal to.</param>
            <param name="encode">True to JSON encode the parameter.</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.StartKeyDocId(System.Object)">
            <summary>
            Return records starting with the specified document ID.
            </summary>
            <param name="docId">The docId to return records greater than or equal to.</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.From(System.String,System.String)">
            <summary>
            Specifies the bucket and design document to target for a query.
            </summary>
            <param name="designDoc">The bucket to target</param>
            <param name="view">The design document to use</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Bucket(System.String)">
            <summary>
            Sets the name of the Couchbase Bucket.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.DesignDoc(System.String)">
            <summary>
            Sets the name of the design document.
            </summary>
            <param name="name">The name of the design document to use.</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.View(System.String)">
            <summary>
            Sets the name of the view to query.
            </summary>
            <param name="name">The name of the view to query.</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Skip(System.Int32)">
            <summary>
            Skip this number of records before starting to return the results
            </summary>
            <param name="count">The number of records to skip</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Stale(Couchbase.Views.StaleState)">
            <summary>
            Allow the results from a stale view to be used. The default is StaleState.Ok; for development work set to StaleState.False
            </summary>
            <param name="staleState">The staleState value to use.</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Limit(System.Int32)">
            <summary>
            Limit the number of the returned documents to the specified number
            </summary>
            <param name="limit">The numeric limit</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.ConnectionTimeout(System.Int32)">
            <summary>
            The number of seconds before the request will be terminated if it has not completed.
            </summary>
            <param name="timeout">The period of time in seconds</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.IViewQuery.Development(System.Boolean)">
            <summary>
            Toggles the query between development or production dataset and View.
            </summary>
            <param name="development">If true the development View will be used</param>
            <returns>An IViewQuery  object for chaining</returns>
        </member>
        <member name="T:Couchbase.Views.JsonDataMapper">
            <summary>
            A class for mapping an input stream of JSON to a Type T using a <see cref="T:Newtonsoft.Json.JsonTextReader"/> instance.
            </summary>
        </member>
        <member name="M:Couchbase.Views.JsonDataMapper.Map``1(System.IO.Stream)">
            <summary>
            Maps a single row.
            </summary>
            <typeparam name="T">The <see cref="T:Couchbase.Views.IViewResult`1"/>'s Type paramater.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> results of the query.</param>
            <returns>An object deserialized to it's T type.</returns>
        </member>
        <member name="T:Couchbase.Views.StaleState">
            <summary>
            Allow the results from a stale view to be used
            </summary>
        </member>
        <member name="T:Couchbase.Views.StaleStateExtensions">
            <summary>
            Extension methods for working withe StaleState enumeration.
            </summary>
        </member>
        <member name="M:Couchbase.Views.StaleStateExtensions.ToLowerString(Couchbase.Views.StaleState)">
            <summary>
            Converts the StaleState value to a lowercase string.
            </summary>
            <param name="value">The <see cref="T:Couchbase.Views.StaleState"/> enumeration value to convert to a string.</param>
            <returns>The string value of a StaleState enumeration.</returns>
        </member>
        <member name="T:Couchbase.Views.ViewClient">
            <summary>
            A <see cref="T:Couchbase.Views.IViewClient"/> implementation for executing <see cref="T:Couchbase.Views.IViewQuery"/> queries against a Couchbase View.
            </summary>
        </member>
        <member name="M:Couchbase.Views.ViewClient.ExecuteAsync``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Executes a <see cref="T:Couchbase.Views.IViewQuery"/> asynchronously against a View.
            </summary>
            <typeparam name="T">The Type parameter of the result returned by the query.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> to execute on.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that can be awaited on for the results.</returns>
        </member>
        <member name="M:Couchbase.Views.ViewClient.Execute``1(Couchbase.Views.IViewQueryable)">
            <summary>
            Executes a <see cref="T:Couchbase.Views.IViewQuery"/> synchronously against a View.
            </summary>
            <typeparam name="T">The Type parameter of the result returned by the query.</typeparam>
            <param name="query">The <see cref="T:Couchbase.Views.IViewQuery"/> to execute on.</param>
            <returns>The <see cref="T:Couchbase.Views.IViewResult`1"/> instance which is the results of the query.</returns>
        </member>
        <member name="P:Couchbase.Views.ViewClient.HttpClient">
            <summary>
            The <see cref="P:Couchbase.Views.ViewClient.HttpClient"/> used to execute the HTTP request against the Couchbase server.
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewClient.Mapper">
            <summary>
            An <see cref="T:Couchbase.Views.IDataMapper"/> instance for handling deserialization of <see cref="T:Couchbase.Views.IViewResult`1"/>
            and mapping then to the queries Type paramater.
            </summary>
        </member>
        <member name="T:Couchbase.Views.ViewQuery">
            <summary>
            Implemented as an object that can query a Couchbase View.
            </summary>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.From(System.String,System.String)">
            <summary>
            Specifies the bucket and design document to target for a query.
            </summary>
            <param name="designDoc">The bucket to target</param>
            <param name="view">The design document to use</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Bucket(System.String)">
            <summary>
            Sets the name of the Couchbase Bucket.
            </summary>
            <param name="name">The name of the bucket.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.DesignDoc(System.String)">
            <summary>
            Sets the name of the design document.
            </summary>
            <param name="name">The name of the design document to use.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.View(System.String)">
            <summary>
            Sets the name of the view to query.
            </summary>
            <param name="name">The name of the view to query.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Skip(System.Int32)">
            <summary>
            Skip this number of records before starting to return the results
            </summary>
            <param name="count">The number of records to skip</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Stale(Couchbase.Views.StaleState)">
            <summary>
            Allow the results from a stale view to be used. The default is StaleState.Ok; for development work set to StaleState.False
            </summary>
            <param name="staleState">The staleState value to use.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Asc">
            <summary>
            Return the documents in ascending by key order
            </summary>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Desc">
            <summary>
            Return the documents in descending by key order
            </summary>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.EndKey(System.Object)">
            <summary>
            Stop returning records when the specified key is reached. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to stop at</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.EndKey(System.Object,System.Boolean)">
            <summary>
            Stop returning records when the specified key is reached. Key must be specified as a JSON value.
            </summary>
            <param name="endKey">The key to stop at</param>
            <param name="encode">True to JSON encode and URI escape the value.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.EndKeyDocId(System.Object)">
            <summary>
            Stop returning records when the specified document ID is reached
            </summary>
            <param name="endDocId">The document Id to stop at.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.FullSet">
            <summary>
            Use the full cluster data set (development views only).
            </summary>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Group(System.Boolean)">
            <summary>
            Group the results using the reduce function to a group or single row
            </summary>
            <param name="group">True to group using the reduce function into a single row</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.GroupLevel(System.Int32)">
            <summary>
            Specify the group level to be used
            </summary>
            <param name="level">The level of grouping to use</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.InclusiveEnd(System.Boolean)">
            <summary>
            Specifies whether the specified end key should be included in the result
            </summary>
            <param name="inclusiveEnd">True to include the last key in the result</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Key(System.Object)">
            <summary>
            Return only documents that match the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="key">The key to retrieve</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Key(System.Object,System.Boolean)">
            <summary>
            Return only documents that match the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="key">The key to retrieve</param>
            <param name="encode">True to JSON encode and URI escape the value.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Keys(System.Collections.IEnumerable)">
            <summary>
            Return only documents that match one of keys specified within the given array. Key must be specified as a JSON value. Sorting is not applied when using this option.
            </summary>
            <param name="keys">The keys to retrieve</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Keys(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Return only documents that match one of keys specified within the given array. Key must be specified as a JSON value. Sorting is not applied when using this option.
            </summary>
            <param name="keys">The keys to retrieve</param>
            <param name="encode">True to JSON encode and URI escape the value.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Limit(System.Int32)">
            <summary>
            Limit the number of the returned documents to the specified number
            </summary>
            <param name="limit">The numeric limit</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.OnError(System.Boolean)">
            <summary>
            Sets the response in the event of an error
            </summary>
            <param name="stop">True to stop in the event of an error; true to continue</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Reduce(System.Boolean)">
            <summary>
            Use the reduction function
            </summary>
            <param name="reduce">True to use the reduduction property. Default is false;</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.StartKey(System.Object)">
            <summary>
            Return records with a value equal to or greater than the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="startKey">The key to return records greater than or equal to.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.StartKey(System.Object,System.Boolean)">
            <summary>
            Return records with a value equal to or greater than the specified key. Key must be specified as a JSON value.
            </summary>
            <param name="startKey">The key to return records greater than or equal to.</param>
            <param name="encode">True to JSON encode and URI escape the value.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.StartKeyDocId(System.Object)">
            <summary>
            Return records starting with the specified document ID.
            </summary>
            <param name="startKeyDocId">The docId to return records greater than or equal to.</param>
            <returns>An IViewQuery object for chaining</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.ConnectionTimeout(System.Int32)">
            <summary>
            The number of seconds before the request will be terminated if it has not completed.
            </summary>
            <param name="timeout">The period of time in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Couchbase#Views#IViewQueryable#BaseUri(System.Uri)">
            <summary>
            Sets the base uri for the query if it's not set in the constructor.
            </summary>
            <param name="uri">The base uri to use - this is normally set internally and may be overridden by configuration.</param>
            <returns>An IViewQuery object for chaining</returns>
            <remarks>Note that this will override the baseUri set in the ctor. Additionally, this method may be called internally by the <see cref="T:Couchbase.Core.IBucket"/> and overridden.</remarks>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.Development(System.Boolean)">
            <summary>
            Toggles the query between development or production dataset and View.
            </summary>
            <param name="development">If true the development View will be used</param>
            <returns>An IViewQuery object for chaining</returns>
            <remarks>The default is false; use the published, production view.</remarks>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.EncodeParameter(System.Object)">
            <summary>
            JSON encodes the parameter and URI escapes the input parameter.
            </summary>
            <param name="parameter">The parameter to encode.</param>
            <returns>A JSON and URI escaped copy of the parameter.</returns>
        </member>
        <member name="M:Couchbase.Views.ViewQuery.RawUri">
            <summary>
            Returns the raw REST URI which can be executed in a browser or using curl.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.Views.ViewQuery.UseSsl">
            <summary>
            When true, the generated url will contain 'https' and use port 18092
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewQuery.BucketName">
            <summary>
            Gets the name of the <see cref="T:Couchbase.Core.IBucket"/> that the query is targeting.
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewQuery.RetryAttempts">
            <summary>
            The number of times the view request was retried if it fails before succeeding or giving up.
            </summary>
            <remarks>Used internally.</remarks>
        </member>
        <member name="T:Couchbase.Views.ViewRow`1">
            <summary>
            Represents a single row returned from a View request
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Couchbase.Views.ViewRow`1.Id">
            <summary>
            The identifier for the row
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewRow`1.Key">
            <summary>
            The key emitted by the View Map function
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewRow`1.Value">
            <summary>
            The value emitted by the View Map function or if a Reduce view, the value of the Reduce
            </summary>
        </member>
        <member name="P:Couchbase.Views.ViewRow`1.Geometry">
            <summary>
            If the View query was a <see cref="T:Couchbase.Views.SpatialViewQuery"/> and the Map function emitted a geometry this field will contain the emitted geometry.
            </summary>
            <value>
            The geometry object optionally emited from a GEO Spatial View. The structure must be compatible with the GEOJson specification.
            </value>
            <remarks>This value will be null for all non-Geo Views or if the geometry is not emitted from the Map function.</remarks>
        </member>
        <member name="T:Couchbase.ErrorPrepared">
            <summary>
            An enum listing the N1QL codes that should trigger a retry for non adhoc queries.
            </summary>
            <remarks>Generic (5000) also needs a check of the message content to determine if
            retry is applicable or not</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Couchbase.PrepareStatementException" -->
    </members>
</doc>
